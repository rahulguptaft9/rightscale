# -----------------------------------------------------------------------------
# Copyright 2016, Kronos Inc
# -----------------------------------------------------------------------------
# Rightscale CAT script for  WFM Services image.
# -----------------------------------------------------------------------------



name              "WFM Services - HA (rahul_gupta_r9int-1)"
short_description "Deploys an HA WFM v1"
rs_ca_ver         20161221
import 'wfm_custom_operations/custom_operations_rahul_gupta_r9int_1',       as: 'custom_operations'


import 'builds/parameters_rahul_gupta_r9int_1',       as: 'builds_parameters'
import 'builds/wfm_parameters_rahul_gupta_r9int_1',   as: 'builds_wfm_parameters'
import 'credentials/utilities_rahul_gupta_r9int_1',   as: 'credentials_utilities'
import 'clouds/google_rahul_gupta_r9int_1',           as: 'google_cloud'
import 'clouds/utilities_rahul_gupta_r9int_1',        as: 'cloud_utilities'
import 'inputs/common_rahul_gupta_r9int_1',           as: 'common_inputs'
import 'locations/datacenters_rahul_gupta_r9int_1',   as: 'locations_datacenters'
import 'locations/regions_rahul_gupta_r9int_1',       as: 'locations_regions'
import 'locations/utilities_rahul_gupta_r9int_1',     as: 'locations_utilities'
import 'locations/zones_rahul_gupta_r9int_1',         as: 'locations_zones'
import 'operations/deployment_rahul_gupta_r9int_1',   as: 'deployment_operations'
import 'operations/server_rahul_gupta_r9int_1',       as: 'server_operations'
import 'outputs/common_rahul_gupta_r9int_1',          as: 'common_outputs'
import 'permissions/users_rahul_gupta_r9int_1',       as: 'permissions_users'
import 'rightscripts/utilities_rahul_gupta_r9int_1',  as: 'rightscripts_utilities'
import 'servers/utilities_rahul_gupta_r9int_1',       as: 'servers_utilities'
import 'services/parameters_rahul_gupta_r9int_1',     as: 'services_parameters'
import 'subnets/security_rahul_gupta_r9int_1',        as: 'subnets_security'
import 'subnets/utilities_rahul_gupta_r9int_1',       as: 'subnets_utilities'
import 'tags/utilities_rahul_gupta_r9int_1',          as: 'tags_utilities'
import 'users/utilities_rahul_gupta_r9int_1',         as: 'users_utilities'
import 'logs/utilities_rahul_gupta_r9int_1',          as: 'log_utilities'
import 'config/inputs_rahul_gupta_r9int_1',           as: 'config_inputs'
import 'config/prelaunch_rahul_gupta_r9int_1',        as: 'config_prelaunch'
import 'config/generic_rahul_gupta_r9int_1',          as: 'config_generic'


parameter "param_atmcld_internal_use" do
 allowed_values "False", "True"
 category "Integration Hub: Configuration"
 default "True"
 description "Set to True for internal purposes. Set to False for real scenario and account created in Boomi."
 label "Internal Framework (param_atmcld_internal_use)"
 type "list"
end
parameter "param_atmcld_name" do
 allowed_pattern /(Location Default)|^[a-zA-Z0-9_]+$/
 category "Integration Hub: Configuration"
 default "Location Default"
 description <<-EOS
Location Default: Atom Cloud depends on the location user selected.
The name of the Boomi Atom Cloud.
sample pattern: Kronos-NewGoogle-AtomCloud
EOS
 label "Atom Cloud (param_atmcld_name)"
 min_length "3"
 type "string"
end
parameter "param_atmcld_proxy_host" do
 category "Integration Hub: Configuration"
 default "keng01-oss01-prx04-app.int.oss-keng.mykronos.com"
 description "The Host of proxy server"
 label "Project Proxy Server (param_atmcld_proxy_host)"
 type "string"
end
parameter "param_atmcld_url" do
 allowed_pattern /^((Location Default)|(http:\/\/[a-z]{4}\d{2}-[a-z]{3}\d{2}-hub\d{2}.+))/
 category "Integration Hub: Configuration"
 default "Location Default"
 description <<-EOS
Location Default: Atom Cloud URL depends on the location user selected.
The name of the Boomi Atom Cloud URL.
sample pattern: http://keng01-dev01-hub01.int.dev.mykronos.com
EOS
 label "Atom Cloud URL (param_atmcld_url)"
 type "string"
end
parameter "param_auth_url" do
 allowed_pattern /^((Location Default)|http:\/\/(.+-ath\d{2}-oam.+))/
 category "Authentication: Configuration"
 default "Location Default"
 description <<-EOS
Location Default: Auth URL depends on the location user selected.
The name of the Authentication server.
sample pattern: http://keng01-dev01-ath01-oam01.int.dev.mykronos.com
**For KENG Only[R9]: If this shared service endpoint needs to consume with RightScale USER/TEAM WFM, change Location Default to http://keng03-dev01-ath41-oam.int.dev.mykronos.com**
EOS
 label "Authentication Server URL (param_auth_url)"
 type "string"
end
parameter "param_auth_url_idp" do
 allowed_pattern /^((Location Default)|http:\/\/(.+-idp\d{2}-oam.+))/
 category "Authentication: Configuration"
 default "Location Default"
 description <<-EOS
Location Default: Auth URL depends on the location user selected.
The name of the Authentication server.
sample pattern: http://keng01-dev01-ath01-idp01.int.dev.mykronos.com
EOS
 label "Authentication Server URL IDP (param_auth_url_idp)"
 type "string"
end
parameter "param_is_icu" do
 allowed_values "False", "True"
 category "Shared Services"
 default "False"
 description "It will be true in case of ICU cluster registration, and false in case of Non ICU cluster registration. If 'true', please provide same build information corresponding to its Non-ICU."
 label "ICU Cluster Registration (param_is_icu)"
 type "list"
end
parameter "param_is_rolling_upgrade" do
 allowed_values "False", "True"
 category "Shared Services"
 default "True"
 description "Select True in case of Versioned Rolling Upgrade and False in case of blue-green upgrade approach"
 label "Is Rolling Upgrade (param_is_rolling_upgrade)"
 type "list"
end
parameter "param_build_level_backend" do
 allowed_values "09d00d00", "09d00d00 Untested", "09d00d98", "09d00d98 Untested", "09d00d99", "09d00d99 Untested", "09d01d00", "09d01d00 Untested", "09d02d00", "09d02d00 Untested", "09d03d00", "09d03d00 Untested", "09d04d00", "09d04d00 Untested", "aardvarks-a11y-r9int", "aardvarks-emppref-r9int", "abejide-r9int", "activities-defects-r9int", "activities-explorers-r9int", "activities-teams-r9int", "activities-upstream-r9int", "adp-addleave-r9int", "adp-atm-r9int", "adp-pir-r9int", "adp-uapr-r9int", "adp-wfd157549-r9int", "aegis-r9int", "akul-backend-r9int", "al-r9int", "alain-monorepo-r9int", "alain-r9int", "alpha-audittype-r9int", "alpha-common-r9int", "alpha-dim-000000-r9int", "alpha-dim-000011-r9int", "alpha-dim-000023-r9int", "alpha-dim-0001-state-r9int", "alpha-dim-0002-state-r9int", "alpha-dim-455815-r9int", "alpha-dim-468369-r9int", "alpha-dim-468383-r9int", "alpha-dim-468384-r9int", "alpha-dim-468404-r9int", "alpha-dim-479405-r9int", "alpha-dim-486299-r9int", "alpha-dim-486301-r9int", "alpha-dim-486302-r9int", "alpha-dim-504348-r9int", "alpha-dim-508023-r9int", "alpha-dim-508025-r9int", "alpha-dim-516882-r9int", "alpha-dim-516929-r9int", "alpha-dim-516930-r9int", "alpha-dim-521505-r9int", "alpha-dim-523150-r9int", "alpha-forecasting-r9int", "alpha-r9int", "am-upgrade654-r9int", "amit-r9int", "angrynerds-r9int", "anusha-r9int", "apd-mercy-filter-r9int", "apd-mercy01-09-04-00", "apd-mercy01-r9int", "apd-sdmproperty-r9int", "apd-textlabel01-r9int", "api-gatewayteam-r9int", "api-payroll-extract-r9int", "apidevportal-r9int", "apidevportalflag-r9int", "ararat-r9int", "araratbpf-r9int", "araratspring-r9int", "auth-hardening-r9int", "authn-r9int", "authn-upgrade-r9int", "avalanche-authn-tms-r9int", "avalanche-hfm-hint-r9int", "avalanche-impersonator-r9int", "avalanche-messaging-r9int", "avalanche-pce-r9int", "avalanche-permcache-r9int", "avalanche-session-r9int", "avalanche-tor-r9int", "avocados-r9int", "axis2andcsv-r9int", "axolotls-r9int", "axolotls-rfi-r9int", "badgeassign-r9int", "bcc-r9int", "bdcaching-r9int", "bdisuess-r9int", "beaver-accuracy-r9int", "beaver-batch-r9int", "beaver-borrow-r9int", "beaver-ccfxgb-r9int", "beaver-dev-r9int", "beaver-reconciliation-r9int", "beaver-sklearn-r9int", "beaver-sklearn15-r9int", "beholders-audit-r9int", "beholders2-r9int", "betelgeuse-apcommon-io-r9int", "betelgeuse-bugfix-r9int", "betelgeuse-cxf-r9int", "betelgeuse-defectfix-r9int", "betelgeuse-deffix-r9int", "betelgeuse-delay-r9int", "betelgeuse-hfhandoff-r9int", "betelgeuse-hfs-r9int", "betelgeuse-jackson-r9int", "betelgeuse-p0tests-09-04-00", "betelgeuse-poi-r9int", "betelgeuse-rud-r9int", "bhavik-modern-r9int", "bhavik-r9int", "bhavik-ulti-r9int", "blackduck-r9int", "bravo-dim-364307-r9int", "bravo-dim-371631-r9int", "bravo-dim-371640-r9int", "bravo-dim-374472-r9int", "bravo-r9int", "brianhack-r9int", "bunsen-r9int", "business-cache-fixes-r9int", "cache-monitor-version-r9int", "cache-monitoring-r9int", "cachechaosfix-r9int", "cachingteam-r9int", "capybara-r9int", "castor-translation-r9int", "castor-weeks-r9int", "celtics-r9int", "chameleon-r9int", "champains-r9int", "chargers-fbs-r9int", "chargers-fbs-ui-r9int", "chargers-fechins-int-r9int", "chargers-flat-r9int", "checkengine-hpo-r9int", "checkengine-mlcp-r9int", "checkengine-sonar-r9int", "checkengines-sph-r9int", "ci-r9int", "cia-r9int", "cis-r9int", "cis-team-r9int", "cloud-sre-wfm-r9int", "cmftools-r9int", "cmp-integration-r9int", "codecoverage-r9int", "colossus-09-03-00", "colossus-09-04-00", "colossus-r9int", "commoncomp-a-r9int", "conquerors-r9int", "convergence-removal-r9int", "convergencejars-r9int", "cover-partialshifts-r9int", "csvoptimizer-r9int", "customdrivers-r9int", "cyclops-r9int", "cyclops-sma-r9int", "dailyscheduleview-r9int", "david-r9int", "dbi-ci-r9int", "deepak-asp-r9int", "deepak-r9int", "deepak-rti-r9int", "deployment-desi-r9int", "desi-web-r9int", "develop", "dim-132681-r9int", "dim-277355-r9int", "dim-307662-r9int", "dim-322533-r9int", "dim-400528-r9int", "dim-436659-totalizer2-r9int", "dim-469645-r9int", "dim-474362-r9int", "dim-483565-r9int", "dim-490319-r9int", "dim-490322-r9int", "dim-506440-r9int", "dim-511211-r9int", "dim-518545-r9int", "dim131824-r9int", "dim132673-r9int", "dim132674-r9int", "dim133074-r9int", "dim138091-r9int", "dim138106-r9int", "dim138108-r9int", "dim138458-r9int", "dim471750-r9int", "dim484827-r9int", "dim490318-r9int", "dim490690-r9int", "dim497075tcext-r9int", "dirangers-r9int", "docker-tms-r9int", "dockerdim-tms-r9int", "dsaas-auditor-09-03-00", "dsaas-auditor-09-04-00", "dsaas-auditor-mergefix-r9int", "dsaas-auditor-r9int", "dsv-codereview-r9int", "dupk-defects-r9int", "dvtileslimit-r9int", "dynamic-chunk-r9int", "ecsenhancmnt-r9int", "eff-rate-firefighters-r9int", "enginerds-eventrules-r9int", "enginerds-smallscope-r9int", "engines-defects-r9int", "enhanced-cutover-09-03-00", "enhanced-cutover-r9int", "enterprise-people-r9int", "entry-lists-masons-r9int", "epam-r9int", "ess-reimagine-r9int", "ess-shifttemplate-r9int", "eureka-mlexplainer-r9int", "evpextension-r9int", "extensions-r9int", "fechins-async-r9int", "fechins-flat-r9int", "fechins-positions-r9int", "fechins-r9int", "fechins-starburst-db-r9int", "firebirds-r9int", "firefighters-r9int", "firefly-r9int", "firestar-09-04-00", "firestar-headline-r9int", "firestar-r9int", "firestartemp-09-04-00", "flash-r9int", "flatbs-r9int", "fonts-r9int", "for-schedulescore-r9int", "for-vtd-fcs-r9int", "forecast-home-r9int", "forecasting-mle-r9int", "forecasting-modernize-r9int", "forecasting-topdown-r9int", "frontend-du-r9int", "frontkepler-tk-r9int", "gaia-hf-future-r9int", "gaia-wfd131226-fix-r9int", "gaia-wfd134290-fix-r9int", "gambit-headline-r9int", "gambit-poc-r9int", "gambit-r9int", "gdap-public-api-r9int", "generic-request-r9int", "get-full-orgjob-path-r9int", "global-lang-r9int", "gogetters-access-r9int", "gogetters-accruals-r9int", "gogetters-approval-r9int", "gogetters-approve-card-r9int", "gogetters-attendance-r9int", "gogetters-calendars-r9int", "gogetters-labors-r9int", "gogetters-setting-r9int", "gogetters-tk-perf-r9int", "greenwarriors-r9int", "groot-external-r9int", "groot-r9int", "guardrail-r9int", "hades-r9int", "hades2-r9int", "happyhedgehogs-r9int", "happypulse-genai-r9int", "hawkeyes-r9int", "hawks-r9int", "hca-astra-r9int", "hca-supportability-r9int", "hca-team-authn-r9int", "hca-team-ce-r9int", "hca-team-customtiles-r9int", "hca-team-ia-r9int", "hca-team-rep-r9int", "hca-team-reports-r9int", "hca-team-security-r9int", "hca-team-tiles-r9int", "hca-team-zdt-r9int", "hcl-textlabel-r9int", "hestia-09-03-00", "hestia-hrsd-r9int", "hestia-r9int", "hfsbs-r9int", "hfsquad-r9int", "hyperfind-positions-r9int", "ia-crr-r9int", "ia-eu2defects-r9int", "ia-eu2features-r9int", "ia-people-dataview-r9int", "ia-people-r9int", "ia-r9u3defects-r9int", "ia-r9u3features-r9int", "iaas-r9int", "ihubextn-r9int", "illusions-r9int", "izarrabal-r9int", "jarvis-beaver-accuracy-r9int", "jasdeep-r9int", "jazz-authn-api-r9int", "jazz-impl-ams-r9int", "jazz-r9int", "jedi-r9int", "jobsortorder-r9int", "johnny-poc-r9int", "jordan-r9int", "jorge-r9int", "json-base-r9int", "keng-ppas-dba-r9int", "kepler-r9int", "kepler-tk-r9int", "kpif-09-04-00", "kpif-astra-09-04-00", "kpif-astra-bcc-r9int", "kpif-astra-r9int", "kpif-caas-r9int", "kpif-ce-09-03-00", "kpif-ce-09-04-00", "kpif-ce-r9int", "kpif-forecasting-r9int", "kpif-hca-r9int", "kpif-npd-r9int", "kpif-r9int", "krishna-kumar-r9int", "lat-wfd-r9int", "latha-gradleupgrade-r9int", "latha-lerna-r9int", "latha-pipeline-packer-r9int", "latha-pipeline-r9int", "lathat-test-r9int", "legionofdoom-r9int", "lighthouse-r9int", "loadbalncer-cleanup-r9int", "loons-r9int", "lynx-r9int", "lyra-r9int", "ma-positions-r9int", "mali-positions-r9int", "manan-r9int", "mary-r9int", "mason-hrsd-09-03-00", "mason-hrsd-09-04-00", "masons-acp-r9int", "masons-hrsd-r9int", "mep-hyperfindfilters-r9int", "messagesize-r9int", "messaging-xt-r9int", "mfa-pwd-r9int", "mfatesting-r9int", "minions-r9int", "mnm-r9int", "mousa-hyperfind-r9int", "mpwhd-r9int", "mte-spacedogs-r9int", "mudhawk-r9int", "multiein-r9int", "multiple-positions-r9int", "multiverse-r9int", "nagz-r9int", "nginxr26-r9int", "nhe-r9int", "nightwing-r9int", "nightwing-team-r9int", "nots-firefighters-r9int", "nots-translation-r9int", "nova-common-r9int", "nova-defect-r9int", "nova-feature-r9int", "nova-move-core-r9int", "nova-ui-09-04-00", "nova-ui-r9int", "nw-r9int", "odin-sched-r9int", "olympians-r9int", "onesupport-r9int", "opentext-r9int", "optimized-audit-r9int", "orc-r9int", "orc-upgrade-r9int", "orgmap-ct-r9int", "orion-r9int", "patriots-r9int", "pawan-launchable-r9int", "pawan-r9int", "payroll-bufixes-r9int", "payroll-extract-08-05-00", "payroll-extract-r9int", "payroll-wfd-fix-r9int", "payrollextract-api-r9int", "payrollextract-ui-r9int", "pc-convergence-rem-r9int", "pc-soapchangespmod-r9int", "pc-tmctjr-upgrd-r9int", "pc-zing-r9int", "pc-zingrtest-r9int", "people-auth-r9int", "people-photo-dev-r9int", "people-photo-r9int", "people-r9int", "peoplefacp-09-03-00", "perfshiftleft-r9int", "pess-shifttemplate-09-03-00", "pess-shifttemplate-09-04-00", "pess-shifttemplate-r9int", "phantom-r9int", "phantom-tk-r9int", "phoenix-preferences-r9int", "phoenix-r9int", "platform-09-04-r9int", "platform-ak-task-r9int", "platform-axis-r9int", "platform-comp-09-04-00", "platform-component-r9int", "platform-components-r9int", "platform-dwe-upgrade-r9int", "platform-jar-upgrade-r9int", "platform-security-r9int", "platform-services-08-05-00", "platform-test-comp-r9int", "platform-workflow-r9int", "pollux-24h-r9int", "pollux-cle-r9int", "pollux-dar-r9int", "pollux-hosp-r9int", "pollux-hosp2-r9int", "pollux-lstd-r9int", "pollux-sst-r9int", "pollux-vpec-r9int", "powerrangers-in-defect-r9int", "powerrangers-promote-r9int", "powerrangers-r9int", "ppbug-r9int", "praveen-r9int", "predictive-scheduling-r9int", "properties-extraction-r9int", "psoni-r9int", "psylocke-r9int", "pullux-rsrl-r9int", "punch-r9int", "quicksilver-09-04-00", "quicksilver-r9int", "quorbit-dimensions-09-04-00", "quorbit-dimensions-r9int", "r9int", "r9int Untested", "r9int-gfi Untested", "rabbit-r9int", "rabbitmessaging-r9int", "rabbitnew-r9int", "rabbittest-r9int", "raccoons-r9int", "rainbow-fares-r9int", "rainbow-r9int", "redissupport-r9int", "rehdurability-r9int", "rehdurabilitynew-r9int", "relativetimeperiod-r9int", "removecxf-logan-r9int", "renegades-attestation-r9int", "renegades-day-defect-r9int", "renegades-delegate-r9int", "renegades-for-plan-fix-r9int", "renegades-for-plan-r9int", "renegades-gdap-09-03-00", "renegades-gdap-09-04-00", "renegades-gdap-r9int", "renegades-import-budg-r9int", "renegades-kpi-sdm-09-03-00", "renegades-kpi-sdm-09-04-00", "renegades-kpi-sdm-r9int", "renegades-kpi-wages-r9int", "renegades-labor-r9int", "renegades-pce-r9int", "renegades-reevaluate-r9int", "renegades-shadefix-r9int", "renegades-sodexo-tor-r9int", "renegades-staffing-09-04-00", "renegades-staffing-r9int", "renegades-stafnosql-09-04-00", "renegades-ter-defect-r9int", "renegades-vol-def-r9int", "renegades-vol-for-09-03-00", "renegades-vol-for-09-04-00", "renegades-vol-for-r9int", "renegades-vol-team-r9int", "repo-lib-up-r9int", "report-accessibility-r9int", "report-axis2-r9int", "report-birt-api-test-r9int", "report-cognos-r9int", "report-defects-r9int", "report-relative-birt-r9int", "report-script-r9int", "report-security-r9int", "report-stagered-r9int", "reporting-a11y-r9int", "reporting-axis2-r9int", "reporting-cognos-r9int", "reporting-service-r9int", "reporting-usability-r9int", "rework-tiles-r9int", "rightscale-wit-dev-r9int", "rob-r9int", "ronin-r9int", "sandy-r9int", "schedulator-gerad-r9int", "sdm-docker-r9int", "sdm-ldi-r9int", "sdmtransfer-r9int", "seadogs-r9int", "seahawks-attestation-r9int", "seahawks-r9int", "security-hardening-r9int", "security-nova-r9int", "selective-loading-r9int", "sentry-bugfix-r9int", "service-limit-ia-r9int", "shared-business-dev-r9int", "shared-business-struct-r9int", "smart-refresh-r9int", "smarttiles-r9int", "spacebears-09-03-00", "spacebears-r9int", "spacebears-vb-fcs-r9int", "spacedogs-r9int", "spaceforce-r9int", "staggered-backup-r9int", "starburst-r9int", "storm-r9int", "sugar-gliders-r9int", "superfriends-r9int", "supportability-r9int", "supportability-rel2-r9int", "supportability-rel3-r9int", "taerrors-r9int", "tagdef-r9int", "tardigrades-cache-r9int", "tardigrades-emp-prefs-r9int", "tardigrades-r9int", "tarequestkey-r9int", "tcc-comments-r9int", "team-pulse-r9int", "temporary-tms-r9int", "test-build-nova-r9int", "test-r9int", "test1-r9int", "testpra0613-r9int", "testpra06132022-r9int", "testrail-r9int", "testrails-testing-r9int", "the-vision-r9int", "thealliance-r9int", "thunder-dim-489075-r9int", "thunder-dim-501148-r9int", "thunder-dim-501215-r9int", "thunder-dim-501217-r9int", "thunder-dim-501220-r9int", "thunder-dim-503005-r9int", "thunder-e3-dim-401699-r9int", "thunder-e7-dim-275350-r9int", "thunder-r9int", "thunder-wfd-150620-r9int", "thunder-wfd-161833-r9int", "tigerfrontendauthn-r9int", "tigers-r9int", "tigersnpd-r9int", "tiles-r9int", "tim-r9int", "tim-test-2-r9int", "tim-test-3-r9int", "tip-selfservice-09-04-00", "tip-selfservice-r9int", "tipselfservice-r9int", "tk-components-r9int", "tkp-firefighters-r9int", "tms-blackduckviolation-r9int", "tms-defect-r9int", "tms-hrsd-r9int", "tms-hydration-r9int", "tms-onduty-r9int", "tms-partial-r9int", "tms-registry-r9int", "tms-security-r9int", "tms-staggered-reset-r9int", "tms-team-r9int", "tms-telestaffcloud-r9int", "tomcat-upgrade-r9int", "tomcatversion-r9int", "totalizer-r9int", "toucans-r9int", "tr-r9int", "troy-09-04-00", "troy-r9int", "tsunami-borrow-hours-r9int", "tsunami-lb-fcs-r9int", "tsunami-peak-hours-r9int", "tt-api-firefighters-r9int", "tyrell-r9int", "ui-enhanced-cutover-r9int", "ui-firestar-r9int", "ui-payroll-extract-r9int", "ui-platform-r9int", "ui-sentry-bugfix-r9int", "ui-sentry-dim-454695-r9int", "ui-sentry-lerna-r9int", "ui-sentry-lerna-web-r9int", "ui-sentry-major-r9int", "ui-sentry-metadataui-r9int", "ui-sentry-monorepo-r9int", "ui-sentry-wfd-152372-r9int", "ui-sentry-wfd-153821-r9int", "ukg-authn-r9int", "ukgdatahubadmin-r9int", "ukrew-r9int", "unicorns-r9int", "unittes-dim362399-r9int", "upgrade-lib-r9int", "vanguards-bpf-comp-09-04-00", "vanguards-bpf-compjob-r9int", "vanguards-bpf-r9int", "vanguards-bpf-revert-r9int", "vanguards-cc-r9int", "vanguards-ccnot-r9int", "vanguards-controlcenter-r9int", "vanguards-renaming-r9int", "version-test-r9int", "vt-back-r9int", "vt-r9int", "vt128-r9int", "warlock-blackduck-r9int", "warlock-bugfix-r9int", "warlocks-r9int", "web-desi-r9int", "wethenorth-licensing-r9int", "wethenorth-r9int", "wethenorth-sl-r9int", "wfd-126096-r9int", "wfd-136210-r9int", "wfd-143108-r9int", "wfd-145838-totalizer2-r9int", "wfd-152372-r9int", "wfd-160574-r9int", "wfd-161097-r9int", "wfd-161600-r9int", "wfd-161756-r9int", "wfd113110new-r9int", "wfd138709-r9int", "wfd155486-r9int", "wfd158940-r9int", "wfd159442-09-04-00", "wfd162109-r9int", "wfl-bkpteam-r9int", "wfl-hackathon-r9int", "wfm-sched-r9int", "whitebird-r9int", "wit-harshit-r9int", "wit-r9int", "wit-u1-r9int", "wit-u2-r9int", "wit-u3-dev-r9int", "wit-u3-r9int", "wizard-r9int", "wizard-tk-r9int", "wolverine-09-04-00", "wolverine-bugfix-r9int", "wolverine-r9int", "wolverine-tk-r9int", "wombats-r9int", "woodpeckers-r9int", "workflow-sechard-r9int", "workflow-sechard2-r9int", "workflow-security-r9int", "workflow-team-r9int", "workflow-upgrade-r9int", "workflow-upgrade234-r9int", "workflow-upgrade237-r9int", "wtn-memory-issue-r9int", "zeppelin-audit-r9int", "zeppelin-r9int", "zion-hrsd-optional-r9int", "zion-hrsd-r9int", "zion-predicitve-r9int", "zion-r9int", "zion-scheduling-r9int"
 category "Image: Configuration"
 default "r9int"
 description "The WFM Service Backend build level."
 label "Backend Build Level (param_build_level_backend)"
 type "list"
end
parameter "param_build_level_dfi" do
 allowed_values "00d01d02", "02d00d00", "02d02d00", "02d03d00", "02d04d00", "02d05d00", "02d06d00", "02d07d00", "03d01d00", "03d02d00", "03d03d00", "03d04d00", "04d00d00", "04d01d00", "04d02d00", "04d03d00", "04d04d00", "04d05d00", "04d06d00", "04d07d00", "04d08d00", "04d09d00", "04d10d00", "04d11d00", "05d00d00", "05d01d00", "05d02d00", "05d03d00", "05d04d00", "05d05d00", "05d06d00", "06d00d00", "06d01d00", "06d02d00", "06d03d00", "06d04d00", "06d05d00", "06d06d00", "06d07d00", "07d00d00", "07d01d00", "07d02d00", "07d03d00", "07d04d00", "07d07d00", "08d00d00", "08d01d00", "08d02d00", "08d02d01", "08d02d02", "08d03d00", "08d04d00", "08d05d00", "09d00d00", "09d00d98", "09d00d99", "09d01d00", "09d02d00", "09d03d00", "09d04d00", "99d99d00", "99d99d01", "Release (use this)", "Unstable (CIA use only)", "ab-tms-r9int", "abhas-pipeline-r9int", "agentless", "akul-r9int", "akul-tms-r9int", "alain-r9int", "amit-r9int", "apd-sdmproperty-r9int", "api-gatewayteam-r9int", "auth-hardening-r9int", "authn-r9int", "authn-upgrade-r9int", "automergetesting", "autoprovdatahub-08-04-00", "autoprovdatahub-r8int", "bhavikr8int", "buildeverything", "ci-r8int", "ci-r9int", "cis-r9int", "cis-team-r9int", "citeamr6int", "citest-r9int", "cyclops-sma-r9int", "dbi-ci-r9int", "deployment-desi-r9int", "develop", "dimensions-tms-r9int", "docker-tms-r9int", "dockerdim-tms-r9int", "edwi-08-04-00", "edwi-08-05-00", "edwi-r8int", "fcs-schema-impr-r9int", "fechins-r9int", "gambit-r8int", "hawkeye-sdm-08-05-00", "java8test-r8int", "java8upgrade", "kpif-astra-r9int", "migratepython", "minions-r9int", "mnm-08-04-00", "mnm-r8int", "newjenkins-r6int", "nginxr26-r9int", "nightwing-r9int", "nightwing-team-r9int", "payroll-extract-08-05-00", "payroll-extract-r9int", "platform-components-r9int", "prodhotfix", "r1206int", "r21nginx", "r3int", "r3x", "r4homedepot", "r4int", "r5int", "r650int", "r6int", "r700int", "r7dev1", "r7dev2", "r7dev3", "r7dev4", "r7int", "r8dev1", "r8int", "r8test1", "r9int", "reese-node16-r9int", "release", "relwork", "rework-tiles-r9int", "safetestrelease", "sdm-docker-r9int", "sdm-ldi-r9int", "sdmtransfer-r9int", "securityfixes", "sentry-bugfix-r9int", "storm-r9int", "supportability-rel2-r8int", "temporary-tms-r9int", "test-packer-r5int", "testr6int", "testrelease2", "testrelease3", "tip-selfservice-r9int", "tms-blackduckviolation-r9int", "tms-hrsd-r9int", "tms-hydration-r9int", "tms-messaging-apd-08-05-00", "tms-onduty-r8int", "tms-onduty-r9int", "tms-partial-r9int", "tms-registry-r9int", "tms-security-r9int", "tms-skpi-08-02-00", "tms-skpi-backward-08-02-00", "tms-skpi-r8int", "tms-skpi-restore-r8int", "tms-staggered-reset-r9int", "tms-telestaffcloud-r9int", "tragentless", "troy-r9int", "tyrell-r9int", "ui-sentry-bugfix-r9int", "ui-sentry-lerna-r9int", "ui-sentry-metadataui-r9int", "ui-sentry-monorepo-r9int", "ui-sentry-r9int", "ui-sentry-tms-r9int", "ui-sentry-wfd-153821-r9int", "ukg-authn-r9int", "vt-back-r9int", "vt-r9int", "vt128-r9int", "warlock-bugfix-r9int", "warlocks-r9int", "weeka", "wit-u2-r9int", "wit-u3-r9int", "workflow-upgrade-r9int", "zion-hrsd-r9int"
 category "Image: Configuration"
 default "r9int"
 description "The Docker Foundation Image level upon which to build the deployment."
 label "DFI Build Level (param_build_level_dfi)"
 type "list"
end
parameter "param_build_level_frontend" do
 allowed_values "09d00d00", "09d00d00 Untested", "09d00d98", "09d00d98 Untested", "09d00d99", "09d00d99 Untested", "09d01d00", "09d01d00 Untested", "09d02d00", "09d02d00 Untested", "09d03d00", "09d03d00 Untested", "09d04d00", "09d04d00 Untested", "aardvarks-a11y-r9int", "aardvarks-emppref-r9int", "activities-explorers-r9int", "activities-teams-r9int", "activities-upstream-r9int", "adp-addleave-r9int", "adp-atm-r9int", "adp-uapr-r9int", "aegis-r9int", "akul-tms-r9int", "al-r9int", "alain-monorepo-r9int", "angrynerds-r9int", "apd-mercy01-09-04-00", "apd-mercy01-r9int", "apd-sdmproperty-r9int", "apidevportal-r9int", "apidevportalflag-r9int", "ararat-r9int", "araratspring-r9int", "auth-hardening-r9int", "authn-r9int", "avalanche-impersonator-r9int", "avalanche-session-r9int", "axolotls-r9int", "bdisuess-r9int", "beaver-accuracy-r9int", "beaver-batch-r9int", "betelgeuse-bugfix-r9int", "bhavik-modern-r9int", "bhavik-ulti-r9int", "capybara-r9int", "castor-translation-r9int", "castor-weeks-r9int", "chameleon-r9int", "champains-r9int", "chargers-fbs-r9int", "chargers-fbs-ui-r9int", "chargers-fechins-int-r9int", "ci-r9int", "cia-r9int", "colossus-09-03-00", "colossus-09-04-00", "colossus-r9int", "commoncomp-a-r9int", "cover-partialshifts-r9int", "cyclops-r9int", "cyclops-sma-r9int", "dailyscheduleview-r9int", "deployment-desi-r9int", "desi-web-r9int", "develop", "dim-474362-r9int", "dim-518545-r9int", "dirangers-r9int", "docker-tms-r9int", "dockerdim-tms-r9int", "dsaas-auditor-r9int", "dsv-codereview-r9int", "eff-rate-firefighters-r9int", "enhanced-cutover-09-03-00", "enhanced-cutover-r9int", "entry-lists-masons-r9int", "epam-r9int", "ess-reimagine-r9int", "ess-shifttemplate-r9int", "evpextension-r9int", "fechins-flat-r9int", "fechins-r9int", "firebirds-r9int", "flash-r9int", "fonts-r9int", "forecast-home-r9int", "forecasting-mle-r9int", "frontend-du-r9int", "frontkepler-tk-r9int", "gambit-r9int", "global-lang-r9int", "gogetters-tk-perf-r9int", "guardrail-r9int", "happypulse-genai-r9int", "hawkeyes-r9int", "hca-team-ce-r9int", "hca-team-customtiles-r9int", "hca-team-ia-r9int", "hca-team-reports-r9int", "hca-team-tiles-r9int", "hestia-09-03-00", "hestia-hrsd-r9int", "hestia-r9int", "ia-crr-r9int", "ia-eu2defects-r9int", "ia-eu2features-r9int", "ia-people-r9int", "ihubextn-r9int", "illusions-r9int", "jedi-r9int", "jobsortorder-r9int", "jorge-r9int", "json-base-r9int", "kepler-r9int", "kepler-tk-r9int", "kpif-hca-r9int", "kpif-r9int", "lat-wfd-r9int", "latha-lerna-r9int", "latha-pipeline-packer-r9int", "latha-pipeline-r9int", "lathat-test-r9int", "legionofdoom-r9int", "loons-r9int", "lynx-r9int", "lyra-r9int", "mali-positions-r9int", "mason-hrsd-09-03-00", "mason-hrsd-09-04-00", "masons-acp-r9int", "masons-hrsd-r9int", "mfa-pwd-r9int", "minions-r9int", "mnm-r9int", "mpwhd-r9int", "mte-spacedogs-r9int", "mudhawk-09-00-00", "multiple-positions-r9int", "multiverse-r9int", "nagz-r9int", "nightwing-r9int", "nightwing-team-r9int", "nova-common-r9int", "nova-defect-r9int", "nova-feature-r9int", "nova-move-core-r9int", "nova-ui-r9int", "nw-r9int", "olympians-r9int", "onesupport-r9int", "orion-r9int", "patriots-r9int", "pawan-r9int", "payroll-bufixes-r9int", "payroll-extract-r9int", "payroll-wfd-fix-r9int", "pc-zing-r9int", "pc-zingrtest-r9int", "people-auth-r9int", "people-r9int", "pess-shifttemplate-09-03-00", "pess-shifttemplate-09-04-00", "pess-shifttemplate-r9int", "phantom-r9int", "phantom-tk-r9int", "phoenix-preferences-r9int", "phoenix-r9int", "platform-components-r9int", "platform-security-r9int", "platform-workflow-r9int", "pollux-24h-r9int", "pollux-cle-r9int", "pollux-dar-r9int", "pollux-hosp-r9int", "pollux-hosp2-r9int", "pollux-sst-r9int", "pollux-vpec-r9int", "powerrangers-r9int", "ppbug-r9int", "psylocke-r9int", "punch-r9int", "quicksilver-09-04-00", "quicksilver-r9int", "quorbit-dimensions-09-04-00", "quorbit-dimensions-r9int", "r9int", "r9int Untested", "r9int-gfi Untested", "raccoons-r9int", "rainbow-fares-r9int", "relativetimeperiod-r9int", "renegades-attestation-r9int", "renegades-delegate-r9int", "renegades-for-plan-r9int", "renegades-kpi-wages-r9int", "renegades-shadefix-r9int", "renegades-staffing-09-04-00", "renegades-staffing-r9int", "renegades-vol-for-r9int", "renegades-vol-team-r9int", "repo-lib-up-r9int", "report-accessibility-r9int", "report-security-r9int", "reporting-service-r9int", "rework-tiles-r9int", "rob-r9int", "ronin-r9int", "sdm-docker-r9int", "sdm-ldi-r9int", "sdmtransfer-r9int", "seadogs-r9int", "seahawks-attestation-r9int", "seahawks-r9int", "security-nova-r9int", "sentry-bugfix-r9int", "spacedogs-r9int", "spaceforce-r9int", "storm-r9int", "sugar-gliders-r9int", "superfriends-r9int", "supportability-rel2-r9int", "supportability-rel3-r9int", "tagdef-r9int", "tardigrades-emp-prefs-r9int", "tardigrades-r9int", "tcc-comments-r9int", "team-pulse-poc-r9int", "team-pulse-r9int", "temporary-tms-r9int", "test-build-nova-r9int", "test-r9int", "the-vision-r9int", "thealliance-r9int", "thunder-e3-dim-401699-r9int", "tigerfrontendauthn-r9int", "tiles-r9int", "tim-r9int", "tip-selfservice-r9int", "tms-blackduckviolation-r9int", "tms-hrsd-r9int", "tms-hydration-r9int", "tms-onduty-r9int", "tms-partial-r9int", "tms-registry-r9int", "tms-security-r9int", "tms-staggered-reset-r9int", "tms-telestaffcloud-r9int", "toucans-r9int", "troy-09-04-00", "troy-r9int", "tyrell-r9int", "ui-firestar-r9int", "ui-platform-r9int", "ui-sentry-bugfix-r9int", "ui-sentry-dim-454695-r9int", "ui-sentry-lerna-r9int", "ui-sentry-lerna-web-r9int", "ui-sentry-major-r9int", "ui-sentry-metadataui-r9int", "ui-sentry-monorepo-r9int", "ui-sentry-wfd-152372-r9int", "ui-sentry-wfd-153821-r9int", "ukrew-r9int", "unicorns-r9int", "upgrade-lib-r9int", "vanguards-cc-r9int", "vanguards-ccnot-r9int", "version-test-r9int", "vt-back-r9int", "vt-r9int", "vt128-r9int", "warlock-blackduck-r9int", "warlock-bugfix-r9int", "warlocks-r9int", "web-desi-r9int", "wethenorth-r9int", "wfd138709-r9int", "wfl-hackathon-r9int", "wfm-sched-r9int", "wit-r9int", "wit-u1-r9int", "wit-u2-r9int", "wolverine-bugfix-r9int", "wolverine-r9int", "wolverine-tk-r9int", "woodpeckers-r9int", "workflow-team-r9int", "wtn-memory-issue-r9int", "zeppelin-r9int", "zion-hrsd-optional-r9int", "zion-hrsd-r9int"
 category "Image: Configuration"
 default "r9int"
 description "The WFM Service Frontend build level."
 label "Frontend Build Level (param_build_level_frontend)"
 type "list"
end
parameter "param_build_number_backend" do
 allowed_pattern /(^[0-9]+$)|(^latest$)/
 category "Image: Configuration"
 default "latest"
 description "Enter Jenkins build number to use (very old images are not available). Must be a number or 'latest'."
 label "Backend Build Number (param_build_number_backend)"
 min_length "1"
 type "string"
end
parameter "param_build_number_dfi" do
 allowed_pattern /^(latest|[0-9]+)$/
 category "Image: Configuration"
 default "latest"
 description "Jenkins build number of Docker Foundation Image to use (very old images are not available)."
 label "DFI Build Number (param_build_number_dfi)"
 min_length "1"
 type "string"
end
parameter "param_build_number_frontend" do
 allowed_pattern /(^[0-9]+$)|(^latest$)/
 category "Image: Configuration"
 default "latest"
 description "Enter Jenkins build number to use (very old images are not available). Must be a number or 'latest'."
 label "Frontend Build Number (param_build_number_frontend)"
 min_length "1"
 type "string"
end
parameter "param_cluster_id" do
 allowed_pattern /^\d{2}$/
 category "Cloud: Configuration"
 default "01"
 description "If applicable: the cluster identifier to assign to this deployment."
 label "Cluster identifier (param_cluster_id)"
 min_length "1"
 type "string"
end
parameter "param_datastx_analytic_nodes" do
 allowed_pattern /^((Location Default)|([a-z]{4}\d{2}-[a-z]{3}\d{2}.*-(nsq|dbs).+))/
 category "Business Analytics: Configuration"
 default "Location Default"
 description <<-EOS
Location Default: DataStax Analytic Cluster Nodes depends on the location user selected.
The name of the DataStax Analytic Cluster Nodes. Comma seperated list.
sample pattern: keng01-dev01-dbs22-scc22.int.dev.mykronos.com, keng01-dev01-dbs33-scc33.int.dev.mykronos.com
EOS
 label "Analytic Data Nodes (param_datastx_analytic_nodes)"
 type "string"
end
parameter "param_forecasting_cassandra_nodes" do
 allowed_pattern /^(($)|(Location Default)|([a-z]{4}\d{2}-[a-z]{3}\d{2}-ins\d{2}[^ ]*-(nsq|dbs)[^ ]+))*$/
 category "Business Analytics: Configuration"
 default "Location Default"
 description <<-EOS
Leave blank if you do not have FCS service available.\n Enter comma seperated CNAMEs of the nodes of Forecasting cluster.\n Provide cnames for all six nodes of forecasting cassandra cluster. For example : keng03-dev01-ins01-fcs10-nsq-1.int.dev.mykronos.com,keng03-dev01-ins01-fcs10-nsq-2.int.dev.mykronos.com,keng03-dev01-ins01-fcs10-nsq-3.int.dev.mykronos.com,keng03-dev01-ins01-fcs10-nsq-4.int.dev.mykronos.com,keng03-dev01-ins01-fcs10-nsq-5.int.dev.mykronos.com,keng03-dev01-ins01-fcs10-nsq-6.int.dev.mykronos.com
EOS 
 label "Forecasting Cassandra Cluster CNAMEs (param_forecasting_cassandra_nodes)"
 type "string"
end
parameter "param_datastx_batch_cluster" do
 category "Business Analytics: Configuration"
 default "Location Default"
 description <<-EOS
Location Default: DataStax Batch Computation Cluster Name depends on the location user selected.
The name of the DataStax Batch Computation Cluster.
sample pattern: KPI_BATCH_CLUSTER_MVP10
EOS
 label "Batch Compute Engine Cluster Name (param_datastx_batch_cluster)"
 type "string"
end
parameter "param_datastx_realtime_cluster" do
 category "Business Analytics: Configuration"
 default "Location Default"
 description <<-EOS
Location Default: DataStax Realtime Computation Cluster Name depends on the location user selected.
The name of the DataStax Realtime Computation Cluster.
sample pattern: KPI_REALTIME_CLUSTER_MVP10
EOS
 label "Realtime Compute Engine Cluster Name (param_datastx_realtime_cluster)"
 type "string"
end
parameter "param_bcc_cluster_name" do
 category "Business Analytics: Configuration"
 default "BCC_CLUSTER_40"
 description "Enter cluster name from Cluster Computing DSE service."
 label "BCC DSE Cluster Name (param_bcc_cluster_name)"
 type "string"
end
parameter "param_bcc_cassandra_cluster_nodes" do
 category "Business Analytics: Configuration"
 default "keng03-dev01-ins01-bcc40-app-1.int.dev.mykronos.com,keng03-dev01-ins01-bcc40-app-2.int.dev.mykronos.com,keng03-dev01-ins01-bcc40-app-3.int.dev.mykronos.com"
 description <<-EOS
Enter comma seperated CNAMEs of the nodes of Cluster Computing DSE cluster.\n Provide cnames for all three nodes of analytic cluster. For example : keng02-dev01-ins01-bcc30-app-1.int.dev.mykronos.com, keng02-dev01-ins01-bcc30-app-2.int.dev.mykronos.com, keng02-dev01-ins01-bcc30-app-3.int.dev.mykronos.com
EOS 
 label "BCC Cassandra Cluster CNAMEs (param_bcc_cassandra_cluster_nodes)"
 type "string"
end
parameter "param_dbserver_and_dbname" do
 allowed_pattern /^((Location Default)|([a-z]{4}\d{2}-[a-z]{3}\d{2}-[a-z]{3}\d{2}.*-dbs-.+))/
 category "Database: Configuration"
 description <<-EOS
The fully qualified CNAME of the database server, DataBase Name to connect to. For Example: keng01-dev01-wfm01-dbs-01.int.dev.mykronos.com,ppas_wfm_db. For more info see https://engconf.int.kronos.com/display/FT/PPAS+Inventory
EOS
 label "Database Server CNAME and DB name (param_dbserver_and_dbname)"
 type "string"
end
parameter "param_skpi_dbserver_and_dbname" do
 category "Database: Configuration"
 default ""
 description <<-EOS
The fully qualified CNAME of the SKPI database server, DataBase Name to connect to. For Example: keng01-dev01-wfm01-dbs-01.int.dev.mykronos.com,ppas_wfm_skpi_db. For more info see https://engconf.int.kronos.com/display/FT/PPAS+Inventory
EOS
 label "SKPI Database Server CNAME and DB name(param_skpi_dbserver_and_dbname)"
 type "string"
end
parameter "param_deployment_datacenter" do
 category "Deployment: Location"
 default "North America"
 description <<-EOS
This is the geographic continent to create the deployment in.
Possible Values - North America, Asia, Canada
EOS
 label "Continent (param_deployment_datacenter)"
 type "string"
end
parameter "param_deployment_purpose" do
 allowed_values "Development (Platform team only)", "GQS", "Official Shared Service (CIA use only)", "Official Shared Service (cia use only Release N)", "Official Shared Service (cia use only Release N+1)", "Production (CIA use only)", "QIP", "absence", "apd", "architecture", "automation", "backwardcomp", "caauto", "cata", "ce", "ci-codefreeze", "cia-automation", "cloudopsdev", "common-components", "core", "dba", "deployment-automation", "dsaas", "ee", "ets", "forecasting", "ges", "globalization", "hca-kpi", "hcm-integrations", "help", "inauto", "integration", "mobile", "obs", "others", "pipother", "platform-apigateway", "platform-authentication", "platform-caching", "platform-components", "platform-ia", "platform-messaging", "platform-reporting", "platform-supportability", "platform-tms", "platform-tms", "platform-workflow", "product-management", "scheduling", "suite", "svv-cx", "testclient", "timekeeping", "tsg", "udmdev", "ultimate-integrations", "usauto", "ux", "wfmsaas", "work"
 category "Deployment: Configuration"
 description "The use case for this deployment."
 label "Deployment purpose (param_deployment_purpose)"
 type "list"
end
parameter "param_deployment_region" do
 category "Deployment: Location"
 default "East"
 description <<-EOS
This is the cloud region to create the deployment in. Leave as default unless instructed otherwise.
Possible Values - East, Central, West, NorthEast
EOS
 label "Region (param_deployment_region)"
 type "string"
end
parameter "param_deployment_size" do
 allowed_values "Large", "Medium", "Micro", "Small"
 category "Deployment: Configuration"
 default "Small"
 description <<-EOS
Dictates machine and volume size.
EOS
 label "Deployment Size (param_deployment_size)"
 type "list"
end
parameter "param_boot_disk_size" do
 allowed_values "200", "50"
 category "Deployment: Configuration"
 default "50"
 description <<-EOS
Dictates boot disk size.
EOS
 label "Boot Disk Size (param_boot_disk_size)"
 type "list"
end
parameter "param_deployment_type" do
 allowed_values "Environment", "Instance", "WFM"
 category "Deployment: Information"
 default "Instance"
 description "The context this service will be used in."
 label "Deployment type (param_deployment_type)"
 type "list"
end
parameter "param_devportal_fqdn" do
 category "API Gateway Devportal: Configuration"
 default "Location Default"
 description "The Developer Portal FQDN"
 label "Developer Portal FQDN (param_devportal_fqdn)"
 type "string"
end
parameter "param_docker_build_level_ilb" do
 allowed_values "00.01.02", "03.01.00", "03.02.00", "03.03.00", "03.04.00", "04.00.00", "04.01.00", "04.02.00", "04.03.00", "04.04.00", "04.05.00", "04.06.00", "04.07.00", "04.08.00", "04.09.00", "04.10.00", "04.11.00", "05.00.00", "05.01.00", "05.02.00", "05.03.00", "05.04.00", "05.05.00", "05.06.00", "06.00.00", "06.01.00", "06.02.00", "06.03.00", "06.04.00", "06.05.00", "06.06.00", "06.07.00", "07.00.00", "07.01.00", "07.02.00", "07.03.00", "07.04.00", "07.05.00", "08.00.00", "08.01.00", "08.02.00", "08.02.01", "08.02.02", "08.03.00", "08.04.00", "08.05.00", "09.00.00", "09.00.98", "09.00.99", "09.01.00", "09.02.00", "09.03.00", "09.04.00", "99.99.00", "99.99.01", "ab-tms-r9int", "abhas-pipeline-r9int", "akul-r9int", "akul-tms-r9int", "alain-r9int", "amit-r9int", "apd-sdmproperty-r9int", "api-gatewayteam-r9int", "auth-hardening-r9int", "authn-r9int", "authn-upgrade-r9int", "automergetesting", "autoprovdatahub-08-04-00", "autoprovdatahub-r8int", "bhavikr8int", "buildeverything", "ci-r8int", "ci-r9int", "cis-team-r9int", "citeamr6int", "citest-r9int", "cyclops-sma-r9int", "dbi-ci-r9int", "deployment-desi-r9int", "develop", "dimensions-tms-r9int", "docker-tms-r9int", "dockerdim-tms-r9int", "fcs-schema-impr-r9int", "fcs-tenant-clone-08-04-00", "fechins-r9int", "gambit-r8int", "hawkeye-sdm-08-05-00", "migratepython", "minions-r9int", "mnm-08-04-00", "mnm-r8int", "newjenkins-r6int", "nginxr26-r9int", "nightwing-r9int", "nightwing-team-r9int", "payroll-extract-08-04-00", "payroll-extract-08-05-00", "payroll-extract-r8int", "payroll-extract-r9int", "platform-components-r9int", "platformkiosk-08-05-00", "prodhotfix", "r1206int", "r21nginx", "r3int", "r3x", "r4homedepot", "r4int", "r5int", "r650int", "r6int", "r6int", "r700int", "r7dev1", "r7dev2", "r7dev3", "r7dev4", "r7int", "r8dev1", "r8int", "r8test1", "r9int", "reese-node16-r9int", "release", "relwork", "rework-tiles-r9int", "sdm-docker-r9int", "sdm-ldi-r9int", "sdmtransfer-r9int", "securityfixes", "sentry-bugfix-r9int", "storm-r9int", "supportability-rel2-r8int", "temporary-tms-r9int", "test-packer-r5int", "testr6int", "testrelease", "testrelease2", "testrelease3", "tip-selfservice-r9int", "tms-blackduckviolation-r9int", "tms-hrsd-r9int", "tms-hydration-r9int", "tms-messaging-apd-08-05-00", "tms-messaging-service-08-05-00", "tms-onduty-r8int", "tms-onduty-r9int", "tms-partial-r9int", "tms-registry-r9int", "tms-security-r9int", "tms-skpi-08-02-00", "tms-skpi-backward-08-02-00", "tms-skpi-r8int", "tms-skpi-restore-r8int", "tms-staggered-reset-r9int", "tms-telestaffcloud-r9int", "troy-r9int", "tyrell-r9int", "ui-sentry-bugfix-r9int", "ui-sentry-lerna-r9int", "ui-sentry-metadataui-r9int", "ui-sentry-monorepo-r9int", "ui-sentry-r9int", "ui-sentry-tms-r9int", "ui-sentry-wfd-153821-r9int", "ukg-authn-r9int", "vt-back-r9int", "vt-r9int", "vt128-r9int", "warlock-bugfix-r9int", "warlocks-r9int", "weeka", "wit-u2-r9int", "wit-u3-r9int", "workflow-upgrade-r9int", "zion-hrsd-r9int"
 category "Image: Configuration"
 default "r9int"
 description "Build level of the Docker ILB image"
 label "Docker ILB Image Build Level (param_docker_build_level_ilb)"
 type "list"
end
parameter "param_build_number_ilb" do
 category "Image: Configuration"
 default "latest"
 description "The ILB image tag to use, can be 'latest' or a build number"
 label "Docker ILB Image Tag (param_build_number_ilb)"
 type "string"
end
parameter "param_elb_fqdn" do
 category "Deployment: Configuration"
 default "https://oam40.dev.mykronos.com/authn"
 description "For TMS deployment use IDP Proxy URL like : 'https://idp15.gss-keng.mykronos.com/authn' OR External load balancer's fully-qualified domain name, for example: use1.ath01.xfn.mykronos.com **For KENG Only[R9]: If this shared service endpoint needs to consume with RightScale USER/TEAM WFM, change https://oam40.dev.mykronos.com/authn to https://oam41.dev.mykronos.com/authn**"
 label "External load balancer FQDN (param_elb_fqdn)"
 type "string"
end
parameter "param_env_rabbit_host" do
 allowed_pattern /^((Location Default)|([a-z]{4}\d{2}-[a-z]{3}\d{2}.*-dmq\d{2}.+))/
 category "Messaging Service: Configuration"
 default "Location Default"
 description <<-EOS
The fully qualified domain name of the RabbitMQ environment server to connect to.
sample pattern: keng01-dev01-dmq01.int.dev.mykronos.com
EOS
 label "RabbitMQ FQDN (param_env_rabbit_host)"
 type "string"
end
parameter "param_environment_id" do
 category "Cloud: Configuration"
 default "01"
 description "Numeric identifier of the environment to deploy to. Leave at 01."
 label "Environment identifier (param_environment_id)"
 type "string"
end
parameter "param_environment_name" do
 category "Cloud: Configuration"
 default "Development"
 description <<-EOS
 Choose one of below supported values.
    KENG-{'Development' , 'OS Services'} 
     KACD-{'ACD' , 'SUP - CE One Support' , 'PRF - Performance' , 'SIT - System Integration Testing' , 'PIP - Pipeline Production'} 
     KCFN-{'Cross Functional' , 'Evaluation'} 
     CUST-{'Non Production' , 'Staging' , 'Production' , 'Next'} 
     DHUB-{'PRF - Performance'} 
EOS
 label "Environment Name (param_environment_name)"
 type "string"
end
parameter "param_gateway_host" do
 allowed_pattern /^((Location Default)|([a-z]{4}\d{2}-[a-z]{3}\d{2}-api-gtw\d{2}-app.+))/
 category "API Gateway: Configuration"
 default "Location Default"
 description <<-EOS
Location Default: APIGatway URL depends on the location user selected.
The CNAME of the APIGatway ILB.
sample pattern: keng01-dev01-api-gtw01-app.int.dev.mykronos.com
**For KENG Only[R9]: If this shared service endpoint needs to consume with RightScale USER/TEAM WFM, change Location Default to keng03-dev01-api-gtw41-app.int.dev.mykronos.com**
EOS
 label "API Gateway FQDN (param_gateway_host)"
 type "string"
end
parameter "param_help_url" do
 category "Help"
 default "Location Default"
 description <<-EOS
The URL for the help server.  Use the ILB CNAME.  Example: http://keng01-dev01-hlp01-app.int.dev.mykronos.com
EOS
 label "Help Server URL (param_help_url)"
 type "string"
end
parameter "param_idp_elb_url" do
 category "Deployment: Configuration"
 default "https://idp40.gss-keng.mykronos.com/authn"
 description "External load balancer's URL, for example: https://sso-idp00.acd.mykronos.com/authn"
 label "External load balancer URL for IDP Proxy (param_idp_elb_url)"
 type "string"
end
parameter "param_instance_id" do
 category "Cloud: Configuration"
 default "01"
 description "If applicable: the instance identifier to assign to this deployment."
 label "Instance identifier (param_instance_id)"
 type "string"
end
parameter "param_integration_dbserver_and_dbname" do
 allowed_pattern /^((Location Default)|([a-z]{4}\d{2}-.+-dbs.+))/
 category "Integration Database: Configuration"
 default "keng03-dev01-int25-dbs-01.int.dev.mykronos.com,ppas_ihub_db9_r9"
 description <<-EOS
The fully qualified CNAME of the Integration database server, DataBase Name to connect to. For Example: keng01-dev01-wfm01-dbs-01.int.dev.mykronos.com,ppas_wfm_int_db. For more info see https://engconf.int.kronos.com/display/FT/PPAS+Inventory
EOS
 label "Integration Database Server CNAME and DB name (param_integration_dbserver_and_dbname)"
 type "string"
end
parameter "param_integration_hub_account" do
 category "Integration Hub: Configuration"
 default "KENG_R9_IHUB"
 description "Integration Hub account name."
 label "Integration Hub account name (param_integration_hub_account)"
 min_length "3"
 type "string"
end
parameter "param_openam_idp_proxy_url" do
 allowed_pattern /^((Location Default)|(((http:\/\/[a-z]{4}\d{2})|([a-z]{4}\d{2}))(-[a-z]{3}\d{2}-idp\d{2}-oam.+)))/
 category "Authentication: Configuration"
 default "Location Default"
 description <<-EOS
Location Default: IDP Proxy URL depends on the location user selected.
The name of the Authentication server.
sample pattern: http://keng01-dev01-idp01-oam01.int.dev.mykronos.com:80/authn
EOS
 label "IDP Proxy URL (param_openam_idp_proxy_url)"
 type "string"
end
parameter "param_rabbit_host" do
 allowed_pattern /^((Location Default)|([a-z]{4}\d{2}-[a-z]{3}\d{2}.*-dmq.+))/
 category "Messaging Service: Configuration"
 default "Location Default"
 description <<-EOS
The fully qualified domain name of the RabbitMQ server to connect to.
sample pattern: keng01-dev01-dmq01.int.dev.mykronos.com
**For KENG Only[R9]: If this shared service endpoint needs to consume with RightScale USER/TEAM WFM, change Location Default to keng03-dev01-ins01-dmq41-app.int.dev.mykronos.com**
EOS
 label "RabbitMQ FQDN (param_rabbit_host)"
 type "string"
end
parameter "param_redis_cluster" do
 category "Caching Service: Configuration"
 default "WFMRedisCluster-wfm40"
 description "Redis Cluster Name "
 label "Redis Cluster Name (param_redis_cluster)"
 type "string"
end
parameter "param_redis_hosts" do
 allowed_pattern /^((Location Default)|([a-z]{4}\d{2}-[a-z]{3}\d{2}.*-dmc.+))/
 category "Caching Service: Configuration"
 default "Location Default"
 description <<-EOS
Location Default: Comma seperated list of Redis hosts. Depends on the location user selected.
The fully qualified domain name of the Redis servers and ports. Set single host for standalone Redis.
sample pattern: keng01-dev01-dmc01.int.dev.mykronos.com:26380,keng01-dev01-dmc04.int.dev.mykronos.com:26381,keng01-dev01-dmc05.int.dev.mykronos.com:26382
EOS
 label "Redis Hosts and Ports (param_redis_hosts)"
 type "string"
end
parameter "param_redis_master" do
 allowed_pattern /^((Location Default)|([a-z]{4}\d{2}-[a-z]{3}\d{2}.*-dmc.+))/
 category "Caching Service: Configuration"
 default "Location Default"
 description <<-EOS
Location Default: Redis Master depends on the location user selected.
The fully qualified domain name of the Redis Master to connect to.
sample pattern: keng01-dev01-dmc01.int.dev.mykronos.com
EOS
 label "Redis Master FQDN (param_redis_master)"
 type "string"
end
parameter "param_reporting_designer_url" do
 allowed_pattern /^((Location Default)|(((http:\/\/[a-z]{4}\d{2})|([a-z]{4}\d{2}))(-[a-z]{3}\d{2}.*-rpt\d{2}-web.+)))/
 category "Reporting: Configuration"
 default "Location Default"
 description <<-EOS
Location Default: Reporting designer url depends on the location user selected.
The fully qualified url of the Reporting designer url to connect to.
sample pattern: http://keng01-dev01-rpt01-web01.int.dev.mykronos.com
EOS
 label "Reporting Designer Url (param_reporting_designer_url)"
 type "string"
end
parameter "param_reporting_host" do
 allowed_pattern /^((Location Default)|([a-z]{4}\d{2}-[a-z]{3}\d{2}-[a-z]{3}\d{2}-rpt\d{2}-app\..+))/
 category "Reporting: Configuration"
 default "Location Default"
 description <<-EOS
Location Default: Reporting server host depends on the location user selected.
The fully qualified domain name of the Reporting server to connect to.
sample pattern: keng01-dev01-ins01-rpt01-app.int.dev.mykronos.com
EOS
 label "Reporting Host (param_reporting_host)"
 type "string"
end
parameter "param_sa_num" do
 category "Cloud: Configuration"
 default "bck=1,tmk=0,sch=0,bgp=1,bgi=0,fnt=1,api=0,udm=0"
 description "The number of nodes in each server array. sample pattern is - bck=1,tmk=0,sch=0,bgp=1,bgi=0,fnt=1,api=0,udm=0"
 label "Server Array Number of Nodes - BCK, TMK, SCH, BGP, BGI, FNT, API, UDM(param_sa_num)"
 type "string"
end
parameter "param_scanning_service_enabled" do
 allowed_values "False", "True"
 category "Scanning Service: Information"
 default "True"
 description "Enable the Scanning Service"
 label "Scanning Service Enabled (param_scanning_service_enabled)"
 type "list"
end
parameter "param_scanning_service_url_and_port" do
 category "Scanning Service: Information"
 default "http://keng01-oss01-avs-app.int.oss-keng.mykronos.com,8000"
 description "The URL of Scanning Server and Port. Sample pattern- scanning_service_url,scanning_service_port"
 label "Scanning Service URL and port (param_scanning_service_url_and_port)"
 type "string"
end
parameter "param_sdm_host" do
 allowed_pattern /^((Location Default)|(((http:\/\/[a-z]{4}\d{2})|([a-z]{4}\d{2}))(-[a-z]{3}\d{2}-sdm\d{2}-app\..+)))/
 category "Setup Data Manager: Configuration"
 default "Location Default"
 description <<-EOS
Location Default: Setup Data Manager host depends on the location user selected.
The fully qualified domain name of the Setup Data Manager server to connect to.
sample pattern: http://keng01-dev01-sdm01-app.int.dev.mykronos.com
EOS
 label "Setup Data Manager Host (param_sdm_host)"
 type "string"
end
parameter "param_ecs_host" do
 allowed_pattern /^(($)|(Location Default)|(((http:\/\/[a-z]{4}\d{2})|([a-z]{4}\d{2}))(-[a-z]{3}\d{2}-ecs\d{2}-app\..+)))/
 category "Event Connector Service: Configuration"
 default "Location Default"
 description <<-EOS
Leave blank if you do not have ECS service available.
Location Default: ECS host depends on the location user selected.
The fully qualified domain name of the ECS server (with port if not 80) to connect to.
sample pattern: keng01-dev01-ecs01-app.int.dev.mykronos.com
EOS
 label "Event Connector Service Host (param_ecs_host)"
 type "string"
end
parameter "param_hca_url" do
 allowed_pattern /^(($)|(Location Default)|([a-z]{4}\d{2}-[a-z]{3}\d{2}-[a-z]{3}\d{2}-hca\d{2}-bck\..+))/
 category "Shared Services"
 default "Location Default"
 description <<-EOS
Leave blank if you do not have HCA service available.
The fully qualified domain name of the HCA server to connect to.
sample pattern: keng03-dev01-ins01-hca01-bck.int.dev.mykronos.com
EOS
 label "HCA (param_hca_url)"
 type "string"
end
parameter "param_smtp_enable" do
 allowed_values "False", "True"
 category "SMTP: Configuration"
 default "True"
 description <<-EOS
SMTP Username
EOS
 label "SMTP Enable (param_smtp_enable)"
 type "list"
end
parameter "param_stack_id" do
 category "Cloud: Configuration"
 default "03"
 description "Numeric identifier of the stack to deploy to. Leave at 01."
 label "Stack identifier (param_stack_id)"
 type "string"
end
parameter "param_subnet" do
 allowed_values "CORE", "Cross Functional", "Development", "Global", "OSS", "Operations", "Performance", "Quality Assurance"
 category "Cloud: Configuration"
 default "Development"
 description "The subnet you want your deployment placed in."
 label "Subnet (param_subnet)"
 type "list"
end
parameter "param_tms_url" do
 allowed_pattern /^((Location Default)|(((http:\/\/[a-z]{4}\d{2})|([a-z]{4}\d{2}))(-[a-z]{3}\d{2}-tms\d{2}-app.+)))/
 category "TMS: Configuration"
 default "Location Default"
 description <<-EOS
Location Default: TMS Node depends on the location user selected.
The name of the TMS Node. Comma seperated list.
sample pattern: http://keng01-dev01-tms05-app01.int.dev.mykronos.com
EOS
 label "TMS URL (param_tms_url)"
 type "string"
end
parameter "param_tr_host" do
 category "Tenant Router: Infomation"
 default "keng03-dev01-trt40-app.int.dev.mykronos.com:8080"
 description "FQDN for Tenant Router eg. keng01-dev01-trt01.int.ops.mykronos.com. Only needed if 'Register with TMS' is true; otherwise blank."
 label "Tenant Router (param_tr_host)"
 type "string"
end
parameter "param_udm_url" do
 allowed_pattern /^((Location Default)|([a-z]{4}\d{2}-[a-z]{3}\d{2}.*-udm\d{2}-app.+))/
 category "Universal Device Manager: Configuration"
 default "Location Default"
 description <<-EOS
Location Default: Universal Device Manager host depends on the location user selected.
The fully qualified domain name of the Universal Device Manager server to connect to.
sample pattern: keng01-dev01-udm01-app.int.dev.mykronos.com
EOS
 label "Universal Device Manager URL (param_udm_url)"
 type "string"
end
parameter "param_ums_host" do
 allowed_pattern /^((Location Default)|([a-z]{4}\d{2}-[a-z]{3}\d{2}-ums\d{2}-app\..+))/
 category "User Management Service: Configuration"
 default "Location Default"
 description <<-EOS
Use UMS server wrt to deployment in North America or Asia. 
 URL for UMS server if launched with ILB - sample pattern: <ILB FQDN> , replace <ILB FQDN> with the appropriate value 
 URL for UMS server if launched without ILB - sample pattern: <Node FQDN>:8080 , replace <Node FQDN> with the appropriate value
EOS
 label "User Management Service Host (param_ums_host)"
 type "string"
end
parameter "param_use_vanity_url" do
 allowed_values "False", "True"
 category "Tenant Router Services"
 default "False"
 description "Set to true if you are using the tenant router."
 label "Use Vanity URL (param_use_vanity_url)"
 type "list"
end
parameter "param_wfladmin_url" do
 allowed_pattern /^((Location Default)|(((http:\/\/[a-z]{4}\d{2})|([a-z]{4}\d{2}))(-[a-z]{3}\d{2}-[a-z]{3}\d{2}-wfl\d{2}-mgt\..+)))/
 category "Workflow: Configuration"
 default "Location Default"
 description <<-EOS
Location Default: Workflow Admin URL depends on the location user selected.
The name of the Workflow Admin server.
sample pattern in case its a node machine: http://keng02-dev01-ins01-wfl32-mgt.int.dev.mykronos.com
EOS
 label "Workflow Admin URL (param_wfladmin_url)"
 type "string"
end
parameter "param_wflapp_url" do
 allowed_pattern /^((Location Default)|(((http:\/\/[a-z]{4}\d{2})|([a-z]{4}\d{2}))(-[a-z]{3}\d{2}-[a-z]{3}\d{2}-wfl\d{2}-app\..+)))/
 category "Workflow: Configuration"
 default "Location Default"
 description <<-EOS
Location Default: Workflow App URL depends on the location user selected.
The name of the Workflow App server.
sample pattern in case its a node machine: http://keng02-dev01-ins01-wfl32-app.int.dev.mykronos.com
EOS
 label "Workflow App URL (param_wflapp_url)"
 type "string"
end
parameter "param_das_prv_url" do
 category "CIS: Configuration"
 default "Location Default"
 description <<-EOS
Leave blank if you do not have CIS service available.The fully qualified CIS Provisioning API URL.
sample pattern: https://keng03-dev01-das22-api-prv-uesahmidiq-ue.a.run.app
EOS
 label "CIS Provisioning URL (param_das_prv_url)"
 type "string"
end
parameter "param_dsaas_url" do
 category "DSaaS: Configuration"
 default "Location Default"
 description <<-EOS
The fully qualified DSaaS CNAME.
Sample pattern: keng03-dev01-dss34-cnt.int.gss-keng.mykronos.com
EOS
 label "DSaaS URL (param_dsaas_url)"
 type "string"
end
parameter "param_enable_monitoring" do
 allowed_values "False", "Logging Only", "Monitoring Only", "True"
 category "Monitoring"
 default "False"
 description "True - Enable Splunk & Dynatrace , False - All Disabled , Monitoring Only - Enable Dynatrace Only, Logging Only - Enable Splunk Only"
 label "Enable Monitoring"
 type "list"
end
parameter "param_ha_ilb" do
 allowed_values "False", "True"
 category "Deploy HA ILB: Configuration"
 default "False"
 description "If True, 3 ILB Nodes will be deployed"
 label "Deploy HA ILB"
 type "list"
end
parameter "param_pes_prv_url" do
 category "PES: Configuration"
 default "Location Default"
 description <<-EOS
Leave blank if you do not have PES service available.The fully qualified PES Provisioning API URL.
sample pattern: https://deng01-pes-dev01-api-int-16-lqjrnarcwa-ue.a.run.app, https://deng01-pes-dev01.int.dev.mykronos.com
EOS
 label "PES Provisioning API URL (param_pes_prv_url)"
 type "string"
end
parameter "param_wit_host" do
 allowed_pattern /^(($)|(Location Default)|([a-z]{4}\d{2}-[a-z]{3}\d{2}-wit\d{2}-app\..+))/
 category "Web Import Tool: Configuration"
 default "Location Default"
 description <<-EOS
Leave blank if you do not have WIT service available.
Location Default: Web Import Tool host depends on the location user selected.
The fully qualified domain name of the Web Import Tool server to connect to.
sample pattern: keng01-dev01-wit01-app.int.dev.mykronos.com
EOS
 label "Web Import Tool Host (param_wit_host)"
 type "string"
end
parameter "param_pge_url" do
 category "PGE: Configuration"
 default "Location Default"
 description <<-EOS
The fully qualified PGE CNAME.
Sample pattern: keng03-dev01-pge34-cnt.int.gss-keng.mykronos.com
EOS
 label "PGE URL (param_pge_url)"
 type "string"
end
parameter "param_astra_db_name" do
 category "Business Analytics: Configuration"
 description "Astra Database Name. This is an optional field to be used in DEV environments only."
 label "Astra Database Name (param_astra_db_name)"
 type "string"
end
parameter "param_astra_zdm_nodes" do
 category "Business Analytics: Configuration"
 description "Comma separated fully qualified cnames of the zdm nodes"
 label "Astra ZDM Nodes (param_astra_zdm_nodes)"
 type "string"
end


output "output_atmcld_internal_use" do
 category "Shared Services"
 description "Internal Use Switch"
 label "Atom Cloud Internal Use Flag"
end
output "output_atmcld_name" do
 category "Shared Services"
 description "The name of Atom Cloud"
 label "Atom Cloud Name"
end
output "output_atmcld_proxy_host" do
 category "Shared Services"
 description "The Host of Project Proxy Server"
 label "Project Proxy Server Host"
end
output "output_atmcld_url" do
 category "Shared Services"
 description "The URL of Atom Cloud"
 label "Atom Cloud URL"
end
output "output_auth_host" do
 category "Shared Services"
 description "The name of the Authentication server"
 label "Authentication URL"
end
output "output_build_level_backend" do
 category "Instance: Image"
 description "Build level of image used."
 label "Backend Build Level"
end
output "output_build_level_dfi" do
 category "Instance: Image"
 description "Build level of Docker Foundation Image used."
 label "DFI Build Level"
end
output "output_build_level_frontend" do
 category "Instance: Image"
 description "Build level of image used."
 label "Frontend Build Level"
end
output "output_build_number_backend" do
 category "Instance: Image"
 description "This is the Jenkins workflow build that made this image."
 label "Backend Build Number"
end
output "output_build_number_dfi" do
 category "Instance: Image"
 description "Build number of Docker Foundation Image used for this deployment."
 label "DFI Build Number"
end
output "output_build_number_frontend" do
 category "Instance: Image"
 description "This is the Jenkins workflow build that made this image."
 label "Frontend Build Number"
end
output "output_cname_elb" do
 category "Instance: Properties"
 default_value "Not Set"
 description "Endpoint FQDN"
 label "output_cname_elb"
end
output "output_cname_idp_elb" do
 category "Instance: Properties"
 default_value "Not Set"
 description "Endpoint FQDN For ELB"
 label "output_cname_idp_elb"
end
output "output_cname_ilb_be" do
 category "Instance: Properties"
 default_value "Not Set"
 description "Endpoint FQDN"
 label "Backend CNAME"
end
output "output_cname_ilb_fe" do
 category "Instance: Properties"
 default_value "Not Set"
 description "Endpoint FQDN"
 label "Frontend CNAME"
end
output "output_datacenter" do
 category "Instance: Network"
 description "The geographic location of this deployment."
 label "Geographic location"
end
output "output_datastx_analytic_nodes" do
 category "Shared Services"
 description "The analytic nodes fqdns"
 label "Analytic Cluster Node FQDNs"
end
output "output_forecasting_cassandra_nodes" do
 category "Shared Services"
 description "The Forecasting Cassandra nodes fqdns"
 label "Forecasting Cassandra Node FQDNs"
end
output "output_datastx_batch_cluster" do
 category "Shared Services"
 description "The name of the Batch DataStax Cluster"
 label "Batch DataStax Cluster Name"
end
output "output_datastx_eventengine" do
 category "Shared Services"
 description "DataStax Event Engine"
 label "DataStax Nodes"
end
output "output_datastx_realtime_cluster" do
 category "Shared Services"
 description "The name of the Realtime DataStax Cluster"
 label "Realtime DataStax Cluster Name"
end
output "output_devportal_fqdn" do
 category "Shared Services"
 description "Developer Portal FQDN"
 label "Developer Portal FQDN"
end
output "output_docker_build_level_ilb" do
 category "Instance: Image"
 description "Build level of docker ILB image"
 label "Docker ILB Build level"
end
output "output_build_number_ilb" do
 category "Instance: Image"
 description "Docker tag of deployed Docker ILB image."
 label "Docker ILB Tag"
end
output "output_env_rabbit_host" do
 category "Shared Services"
 description "The name of the RabbitMQ environment server"
 label "RabbitMQ Environment Host Name"
end
output "output_fqdn_elb" do
 category "Instance: Properties"
 description "The fully qualified domain name for the ELB of this deployment."
 label "ELB FQDN"
end
output "output_fqdn_idp_elb" do
 category "Instance: Properties"
 description "The fully qualified domain name for the ELB for IDP Proxy"
 label "IDP Proxy ELB FQDN"
end
output "output_ha_fqdn_ilb1" do
 category "Instance: Properties"
 default_value "unset"
 description "The fully qualified domain name for the ILB02 of this deployment."
 label "HA ILB FQDN-1"
end
output "output_ha_fqdn_ilb2" do
 category "Instance: Properties"
 default_value "unset"
 description "The fully qualified domain name for the ILB02 of this deployment."
 label "HA ILB FQDN-2"
end
output "output_ha_fqdn_ilb3" do
 category "Instance: Properties"
 default_value "unset"
 description "The fully qualified domain name for the ILB02 of this deployment."
 label "HA ILB FQDN-3"
end
output "output_fqdn_ilb_fe" do
 category "Instance: Properties"
 description "The fully qualified domain name for the FE ILB of this deployment."
 label "Frontend ILB FQDN"
end
output "output_gateway_url" do
 category "Shared Services"
 description "API Gateway URL"
 label "API Gateway URL"
end
output "output_integration_hub_account" do
 category "Shared Services"
 description "Integration Hub account name"
 label "Integration Hub account name"
end
output "output_openam_idp_proxy_url" do
 category "Shared Services"
 description "The name of the IDP Proxy Authentication server"
 label "IDP Proxy URL"
end
output "output_private_ip_ilb_be" do
 category "Instance: Network"
 description "Internal IP address of Backend ILB for this deployment."
 label "BE ILB Private IP"
end
output "output_private_ip_ilb_fe" do
 category "Instance: Network"
 description "Internal IP address of Frontend ILB for this deployment."
 label "FE ILB Private IP"
end
output "output_private_ip_server1" do
 category "Instance: Network"
 description "Internal IP Address for server #1"
 label "Private IP - Server 1"
end
output "output_private_ip_server2" do
 category "Instance: Network"
 description "Internal IP Address for server #2"
 label "Private IP - Server 2"
end
output "output_rabbit_host" do
 category "Shared Services"
 description "The name of the RabbitMQ server"
 label "RabbitMQ Host Name"
end
output "output_redis_cluster" do
 category "Shared Services"
 description "The Redis Cluster Name."
 label "Redis Cluster Name"
end
output "output_redis_hosts" do
 category "Shared Services"
 description "The list of Redis hosts."
 label "Redis Host Name"
end
output "output_redis_master" do
 category "Shared Services"
 description "The Redis Master."
 label "Redis Master"
end
output "output_reporting_designer_url" do
 category "Shared Services"
 description "The url of the Reporting Designer Server"
 label "Reporting Designer Server Url"
end
output "output_reporting_host" do
 category "Shared Services"
 description "The name of the Reporting server"
 label "Reporting Server Name"
end
output "output_scanning_service_port" do
 category "Scanning Service: Information"
 description "The Port of Scanning Service"
 label "Scanning Service Port"
end
output "output_scanning_service_url" do
 category "Scanning Service: Information"
 description "The URL of Scanning Service"
 label "Scanning Service URL"
end
output "output_sdm_host" do
 category "Shared Services"
 description "The name of the Setup Data Manager host"
 label "Setup Data Manager (SDM) Host"
end
output "output_smtp_fqdn" do
 category "Shared Services"
 description "The name of the SMTP URL"
 label "SMTP URL"
end
output "output_subnetwork" do
 category "Instance: Network"
 description "The subnet this deployment falls under."
 label "Subnet"
end
output "output_tms_url" do
 category "Shared Services"
 description "TMS URL"
 label "TMS URL"
end
output "output_tr_host" do
 category "Tenant Router: Infomation"
 description "Tenant Router Info"
 label "TR Host"
end
output "output_udm_url" do
 category "Shared Services"
 description "The URL of the Universal Device Manager service"
 label "Universal Device Manager (UDM) URL"
end
output "output_ums_host" do
 category "Shared Services"
 description "The name of the User Management Service server"
 label "User Management Service Name"
end
output "output_ecs_host" do
 category "Shared Services"
 description "The name of the Event Connector Service server"
 label "Event Connector Service Name"
end
output "output_hca_url" do
 category "Shared Services"
 description "The name of the User Management Service server"
 label "HCA Serivce URL"
end
output "output_usage" do
 category "Instance: Image"
 description "Usage of the deployment"
 label "Usage"
end
output "output_wfladmin_url" do
 category "Shared Services"
 description "The name of the Workflow Admin server"
 label "Workflow Admin URL"
end
output "output_wflapp_url" do
 category "Shared Services"
 description "The name of the Workflow App server"
 label "Workflow App URL"
end
output "output_bgp_fqdn" do
 category "Instance: Properties"
 description "The fully qualified domain name for the bgp 1st instance."
 label "BGP FQDN"
end
output "output_das_prv_url" do
 category "Shared Services"
 description "CIS - Provisioning API URL"
 label "CIS Provisioning URL"
end
output "output_dsaas_url" do
 category "Shared Services"
 description "Fully qualified DSaaS CNAME"
 label "DSaaS URL"
end
output "output_pes_prv_url" do
 category "Shared Services"
 description "PES - Provisioning API URL"
 label "PES Provisioning API URL"
end
output "output_pge_url" do
 category "Shared Services"
 description "Fully qualified PGE CNAME"
 label "PGE URL"
end



operation "start" do
  like $deployment_operations.start
end


operation "stop" do
  like $deployment_operations.stop
end



operation 'launch' do
  definition 'launch'
  output_mappings do {
    $output_atmcld_internal_use => $local_atmcld_internal_use,
    $output_atmcld_name => $local_atmcld_name,
    $output_atmcld_proxy_host => $local_atmcld_proxy_host,
    $output_atmcld_url => $local_atmcld_url,
    $output_auth_host => $local_auth_host,
    $output_build_level_backend => $local_build_level_backend,
    $output_build_level_dfi => $local_build_level_dfi,
    $output_build_level_frontend => $local_build_level_frontend,
    $output_build_number_backend => $local_build_number_backend,
    $output_build_number_dfi => $local_build_number_dfi,
    $output_build_number_frontend => $local_build_number_frontend,
    $output_cname_elb => $local_cname_elb,
    $output_cname_idp_elb => $local_cname_idp_elb,
    $output_cname_ilb_be => $local_cname_ilb_be,
    $output_cname_ilb_fe => $local_cname_ilb_fe,
    $output_datacenter => $local_datacenter,
    $output_datastx_analytic_nodes => $local_datastx_analytic_nodes,
    $output_forecasting_cassandra_nodes => $local_forecasting_cassandra_nodes,
    $output_datastx_batch_cluster => $local_datastx_batch_cluster,
    $output_datastx_eventengine => $local_datastx_eventengine,
    $output_datastx_realtime_cluster => $local_datastx_realtime_cluster,
    $output_devportal_fqdn => $local_devportal_fqdn,
    $output_docker_build_level_ilb => $local_docker_build_level_ilb,
    $output_build_number_ilb => $local_build_number_ilb,
    $output_env_rabbit_host => $local_env_rabbit_host,
    $output_fqdn_elb => $local_fqdn_elb,
    $output_fqdn_idp_elb => $local_fqdn_idp_elb,
    $output_ha_fqdn_ilb1 => $local_ha_fqdn_ilb1,
    $output_ha_fqdn_ilb2 => $local_ha_fqdn_ilb2,
    $output_ha_fqdn_ilb3 => $local_ha_fqdn_ilb3,
    $output_fqdn_ilb_fe => $local_fqdn_ilb_fe,
    $output_gateway_url => $local_gateway_url,
    $output_integration_hub_account => $local_integration_hub_account,
    $output_openam_idp_proxy_url => $local_openam_idp_proxy_url,
    $output_private_ip_ilb_be => $local_private_ip_ilb_be,
    $output_private_ip_ilb_fe => $local_private_ip_ilb_fe,
    $output_private_ip_server1 => $local_private_ip_server1,
    $output_private_ip_server2 => $local_private_ip_server2,
    $output_rabbit_host => $local_rabbit_host,
    $output_redis_cluster => $local_redis_cluster,
    $output_redis_hosts => $local_redis_hosts,
    $output_redis_master => $local_redis_master,
    $output_reporting_designer_url => $local_reporting_designer_url,
    $output_reporting_host => $local_reporting_host,
    $output_scanning_service_port => $local_scanning_service_port,
    $output_scanning_service_url => $local_scanning_service_url,
    $output_sdm_host => $local_sdm_host,
    $output_smtp_fqdn => $local_smtp_fqdn,
    $output_subnetwork => $local_subnetwork,
    $output_tms_url => $local_tms_url,
    $output_tr_host => $local_tr_host,
    $output_udm_url => $local_udm_url,
    $output_ums_host => $local_ums_host,
    $output_ecs_host => $local_ecs_host,
    $output_hca_url => $local_hca_url,
    $output_usage => $local_usage,
    $output_wfladmin_url => $local_wfladmin_url,
    $output_wflapp_url => $local_wflapp_url,
    $output_bgp_fqdn => $local_bgp_fqdn,
    $output_das_prv_url => $local_das_prv_url,
    $output_dsaas_url => $local_dsaas_url,
    $output_pes_prv_url => $local_pes_prv_url,
    $output_pge_url => $local_pge_url
  } end
end



define handle_error() do
  concurrent do
    raise $_error
    #@@execution.terminate()
  end
end


permission "pft_sensitive_views" do
  resources "rs_cm.credentials"
  actions "rs_cm.index_sensitive", "rs_cm.show_sensitive"
end



mapping 'ilb_tf_choice' do {
  'False' => { 'choice' => 'False', 'choice_lc' => 'false' }, 'True' => { 'choice' => 'True', 'choice_lc' => 'true' }
}
end


mapping "map_tf_choice" do {
  'False' => { 'choice' => 'False', 'choice_lc' => 'false' }, 'True' => { 'choice' => 'True', 'choice_lc' => 'true' }
}
end
mapping "map_clouds" do
  like $cloud_utilities.map_clouds
end
mapping "map_security_tags" do
  like $subnets_security.map_security_tags
end

mapping "map_default_locations" do
  like $locations_utilities.map_default_locations
end


condition "auth_url_default" do
  equals?($param_auth_url, "Location Default")
end
condition "auth_url_idp_default" do
  equals?($param_auth_url_idp, "Location Default")
end
condition "openam_idp_proxy_url_default" do
  equals?($param_openam_idp_proxy_url, "Location Default")
end
condition "redis_master_default" do
  equals?($param_redis_master, "Location Default")
end
condition "redis_hosts_default" do
  equals?($param_redis_hosts, "Location Default")
end
condition "rabbit_host_default" do
  equals?($param_rabbit_host, "Location Default")
end
condition "rabbit_env_host_default" do
  equals?($param_env_rabbit_host, "Location Default")
end
condition "udm_url_default" do
  equals?($param_udm_url, "Location Default")
end
condition "ums_host_default" do
  equals?($param_ums_host, "Location Default")
end
condition "wflapp_url_default" do
  equals?($param_wflapp_url, "Location Default")
end
condition "wfladmin_url_default" do
  equals?($param_wfladmin_url, "Location Default")
end
condition "atmcld_name_default" do
  equals?($param_atmcld_name, "Location Default")
end
condition "atmcld_url_default" do
  equals?($param_atmcld_url, "Location Default")
end
condition "reporting_host_default" do
  equals?($param_reporting_host, "Location Default")
end
condition "reporting_designer_url_default" do
  equals?($param_reporting_designer_url, "Location Default")
end
condition "datastx_cluster_default" do
  equals?($param_datastx_cluster, "Location Default")
end
condition "datastx_batch_cluster_default" do
  equals?($param_datastx_batch_cluster, "Location Default")
end
condition "datastx_realtime_cluster_default" do
  equals?($param_datastx_realtime_cluster, "Location Default")
end
condition "datastx_analytic_nodes_default" do
  equals?($param_datastx_analytic_nodes, "Location Default")
end
condition "datastx_master_default" do
  equals?($param_datastx_master, "Location Default")
end
condition "datastx_nodes_default" do
  equals?($param_datastx_nodes, "Location Default")
end
condition "gateway_url_default" do
  equals?($param_gateway_url, "Location Default")
end
condition "gateway_host_default" do
  equals?($param_gateway_host, "Location Default")
end
condition "help_url_default" do
  equals?($param_help_url, "Location Default")
end
condition "sdm_host_default" do
  equals?($param_sdm_host, "Location Default")
end
condition "ecs_host_default" do
  equals?($param_ecs_host, "Location Default")
end
condition "hca_url_default" do
  equals?($param_hca_url, "Location Default")
end
condition "fcs_url_default" do
  equals?($param_forecasting_cassandra_nodes, "Location Default")
end
condition "tms_url_default" do
  equals?($param_tms_url, "Location Default")
end
condition 'devportal_fqdn_default' do
  equals?($param_devportal_fqdn, 'Location Default')
end
condition 'das_prv_url_default' do
  equals?($param_das_prv_url, 'Location Default')
end
condition 'pes_prv_url_default' do
  equals?($param_pes_prv_url, 'Location Default')
end
condition 'dsaas_url_default' do
  equals?($param_dsaas_url, 'Location Default')
end
condition "wit_host_default" do
  equals?($param_wit_host, "Location Default")
end
condition 'pge_url_default' do
  equals?($param_pge_url, 'Location Default')
end


#===============ILB_express_upgrade starts here====================
#===============ILB_express_upgrade starts here====================

define abort_task() do
  call log_utilities.audit_log('Custom Operation failed. Task aborted. Click to see details.', to_s($_error['message']))
  abort
end

operation 'boot_step_1__register_tms' do
  definition 'register_tms'
end
define register_tms(@server_array_bck) return @server_array_bck do
  call config_generic.production_get_deployment_inputs() retrieve $inputs
  $deployment_json = to_object(@@deployment)
  $deployment_href = $deployment_json['hrefs'][0]
  
  # Register with TMS
  $script_tms =
  {
    "IDP_AUTH_URL"  => join(["text:", split($inputs['IDP_AUTH_URL'], ';')[0]]),
    "TMS_URL"  => join(["text:", split($inputs['TMS_URL'], ';')[0]]),
    "DEPLOYMENT_HREF" => join(["text:", $deployment_href])
  }
  call rightscripts_utilities.run_rightscript_by_name(@server_array_bck.current_instances()[0], 'Register TMS_rahul_gupta_r9int_1', $script_tms)
end

operation 'boot_step_2__configure_database' do
  definition 'configure_database'
end
define configure_database(@server_array_fnt, @server_array_bck, @server_array_bgp) return @server_array_fnt, @server_array_bck, @server_array_bgp do
  call config_generic.production_get_deployment_inputs() retrieve $inputs
  $deployment_json = to_object(@@deployment)
  $deployment_href = $deployment_json['hrefs'][0]

  $script_inputs_db =
  {
    'DB_NAME'                => join(['text:', split($inputs['DB_NAME'], ';')[0]]),
    'DB_PASSWORD'            => join(['cred:', split($inputs['DB_PASSWORD'], ';')[0]]),
    'DB_SERVER_NAME'         => join(['text:', split($inputs['DB_SERVER_NAME'], ';')[0]]),
    'DB_USERNAME'            => join(['cred:', split($inputs['DB_USERNAME'], ';')[0]]),
    'SUPER_USER_PPAS'        => join(['cred:', split($inputs['SUPER_USER_PPAS'], ';')[0]]),
    'SUPER_USER_PWD_PPAS'    => join(['cred:', split($inputs['SUPER_USER_PWD_PPAS'], ';')[0]]),
    'IS_ICU'                 => join(['text:', split($inputs['IS_ICU'], ';')[0]]),
    'DEPLOYMENT_HREF'        => join(['text:', $deployment_href])
  }
  $script_inputs_intdb =
  {
    'INTEGRATIONDB_DBNAME'      => join(['text:', split($inputs['INTEGRATIONDB_DBNAME'], ';')[0]]),
    'INTEGRATIONDB_PASSWORD'    => join(['cred:', split($inputs['INTEGRATIONDB_PASSWORD'], ';')[0]]),
    'INTEGRATIONDB_SERVER_NAME' => join(['text:', split($inputs['INTEGRATIONDB_SERVER_NAME'], ';')[0]]),
    'INTEGRATIONDB_USERNAME'    => join(['cred:', split($inputs['INTEGRATIONDB_USERNAME'], ';')[0]]),
    'SUPER_USER_PPAS'           => join(['cred:', split($inputs['SUPER_USER_PPAS'], ';')[0]]),
    'SUPER_USER_PWD_PPAS'       => join(['cred:', split($inputs['SUPER_USER_PWD_PPAS'], ';')[0]])
  }
  
  $skpi_dedicated_db = split($inputs['SKPI_DEDICATED_DB'], ';')[0]
  if !($skpi_dedicated_db == "True")  
    $skpi_db_server_name = ''
    $skpi_db_name = ''
  else
    $skpi_db_server_name = split($inputs['SKPI_DB_SERVER_NAME'], ';')[0]
    $skpi_db_name = split($inputs['SKPI_DB_NAME'], ';')[0]
  end
  
  $script_inputs_skpidb =
  {
    'SKPI_DB_SERVER_NAME' => join(['text:', $skpi_db_server_name]),	
    'SKPI_DB_NAME'        => join(['text:', $skpi_db_name])
  }
 
  call rightscripts_utilities.run_rightscript_with_status( @server_array_bck.current_instances()[0], 'config_db_ha_rahul_gupta_r9int_1', $script_inputs_db) retrieve $bck_status

  if $skpi_dedicated_db  == "True"
    call rightscripts_utilities.run_rightscript_with_status( @server_array_bgp.current_instances()[0], 'config_db_ha_skpi_rahul_gupta_r9int_1', $script_inputs_skpidb) retrieve $$bgp_skpi_status
  end
  
  call rightscripts_utilities.run_rightscript_with_status( @server_array_fnt.current_instances()[0], 'ConfigDB_Frontend_HA_rahul_gupta_r9int_1', $script_inputs_db) retrieve $fnt_status

  call rightscripts_utilities.run_rightscript_with_status( @server_array_bck.current_instances()[0], 'ConfigDB_integrationdb_rahul_gupta_r9int_1', $script_inputs_intdb) retrieve $bck_int_status

  if $bck_status == "FAILED" || $fnt_status == "FAILED" || $bck_int_status == "FAILED"  || $$bgp_skpi_status == "FAILED"
    raise "Configure database failed... Check Audit logs"
  end
end

parameter "apigatway_ilb_node" do
  description "APIGateway ILB FQDN only, neither port nor http appended."
  label "APIGateway ILB Node FQDN"
  type "string"
  allowed_pattern /^(([a-z]{4}\d{2}-[a-z]{3}\d{2}-api-gtw\d{2}-app-ilb.+)|([a-z]{4}\d{2}-[a-z]{3}\d{2}-api-gtw\d{2}-app.+))/
end

operation 'boot_step_4__start_application' do
  definition 'start_application'
end

define start_application(@server_ilb, @server2_ilb, @server3_ilb, @server_array_fnt, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_bgp, @server_array_bgi, @server_array_api, @server_array_udm) return @server_ilb, @server2_ilb, @server3_ilb, @server_array_fnt, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_bgp, @server_array_bgi, @server_array_api, @server_array_udm do
    $input =
    {
        'PRODUCTION_STATE' => 'text:True'
    }
  call rightscripts_utilities.run_rightscript_by_name(@server_array_bck.current_instances()[0], 'create_users_wfm_rahul_gupta_r9int_1', $input)
  
  call deployment_operations.get_tag_from_deployment(@@deployment,  "custom_info:") retrieve $all_tags
  $hostname = split($all_tags["ppas_first_node"], ".")[0]
  call custom_operations.call_Create_PPAS_Pgbouncer_User(@server_array_bck, $hostname) retrieve @server_array_bck
  
  $hostname = split($all_tags["ppas_second_node"], ".")[0]
  call custom_operations.call_Create_PPAS_Pgbouncer_User(@server_array_bck, $hostname) retrieve @server_array_bck

  $hostname = split($all_tags["ppas_third_node"], ".")[0]
  call custom_operations.call_Create_PPAS_Pgbouncer_User(@server_array_bck, $hostname) retrieve @server_array_bck

  call custom_operations.start_application(@server_ilb, @server2_ilb, @server3_ilb, @server_array_fnt, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_bgp, @server_array_bgi, @server_array_api, @server_array_udm) retrieve @server_ilb, @server2_ilb, @server3_ilb, @server_array_fnt, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_bgp, @server_array_bgi, @server_array_api, @server_array_udm
end

operation 'boot_step_5__upgrade_templates' do
  definition 'upgrade_templates'
end
define upgrade_templates(@server_array_bck) return @server_array_bck do
  call config_generic.production_get_deployment_inputs() retrieve $inputs
  $input =
  {
    'MODE'           => 'text:upgrade',
    'DB_NAME'        => join(['text:', split($inputs['DB_NAME'], ';')[0]]),
    'DB_PASSWORD'    => join(['cred:', split($inputs['DB_PASSWORD'], ';')[0]]),
    'DB_SERVER_NAME' => join(['text:', split($inputs['DB_SERVER_NAME'], ';')[0]]),
    'DB_USERNAME'    => join(['cred:', split($inputs['DB_USERNAME'], ';')[0]])
  }
  call rightscripts_utilities.run_rightscript_by_name( @server_array_bck.current_instances()[0], 'process_templates_rahul_gupta_r9int_1', $input)
  call rightscripts_utilities.run_rightscript_by_name(@server_array_bck.current_instances()[0], 'cleanup_token_from_cred_rahul_gupta_r9int_1', { 'DUMMY_PARAM' => 'text:' })
  concurrent foreach @instance in @server_array_bck.current_instances() on_rollback:abort_task() do
     call rightscripts_utilities.run_rightscript_by_name( @instance, 'clean_tms_eligible_tenants_file_rahul_gupta_r9int_1', { 'DUMMY_PARAM' => 'text:' })
  end
end

operation 'boot_step_6__enable_as_production_service' do
  definition 'enable_as_production_service'
end

define enable_as_production_service(@server_array_bck, @server_array_fnt, @server_ilb, @server2_ilb, @server3_ilb) return @server_array_bck, @server_array_fnt, @server_ilb, @server2_ilb, @server3_ilb do
  call config_generic.production_get_deployment_inputs() retrieve $inputs
  $deployment_json = to_object(@@deployment)  
  $deployment_href = $deployment_json['hrefs'][0]
  
  $script_inputs1 =
  {
    'TARGET_FQDN'         => join(['text:', split($inputs['ILB_FQDN'], ';')[0]]),
    'CNAME'               => join(['text:', split($inputs['CNAME_FQDN'], ';')[0]]),
    'FORCE'               => join(['text:', 'true']),
    'ISROLLBACK'          => join(['text:', 'false']),
    'GOOGLE_MANAGED_ZONE' => join(['text:', split($inputs['GOOGLE_MANAGED_ZONE'], ';')[0]]),
    'DEPLOYMENT_HREF'     => join(['text:', $deployment_href])
  }
  $script_inputs2 =
  {
    'TARGET_FQDN'         => join(['text:', split($inputs['ILB_FQDN'], ';')[1]]),
    'CNAME'               => join(['text:', split($inputs['CNAME_FQDN'], ';')[5]]),
    'FORCE'               => join(['text:', 'true']),
    'ISROLLBACK'          => join(['text:', 'false']),
    'GOOGLE_MANAGED_ZONE' => join(['text:', split($inputs['GOOGLE_MANAGED_ZONE'], ';')[0]]),
    'DEPLOYMENT_HREF'     => join(['text:', $deployment_href])
  }

  concurrent do
  call rightscripts_utilities.run_rightscript_by_name( @server_array_bck.current_instances()[0], 'Register_CNAME_rahul_gupta_r9int_1', $script_inputs1)
  call rightscripts_utilities.run_rightscript_by_name( @server_array_fnt.current_instances()[0], 'Register_CNAME_rahul_gupta_r9int_1', $script_inputs2)
  end  

  $input_ha_ilb =
  {
    'PRODUCTION_STATE' => 'text:True',
    'DEPLOYMENT_HREF'     => join(['text:', $deployment_href])
  }

  $param_ha_ilb = split($inputs['DEPOY_HA_ILB'], ';')[0]
      if to_s($param_ha_ilb) == "False"
        call rightscripts_utilities.run_rightscript_by_name( @server_ilb.current_instance(), 'Start_HA_ILB_Master_Script_rahul_gupta_r9int_1', $input_ha_ilb)
      else
        concurrent do
          sub on_error:handle_error() do
            call rightscripts_utilities.run_rightscript_by_name( @server_ilb.current_instance(), 'Start_HA_ILB_Master_Script_rahul_gupta_r9int_1', $input_ha_ilb)
          end
          sub on_error:handle_error() do
            call rightscripts_utilities.run_rightscript_by_name( @server2_ilb.current_instance(), 'Start_HA_ILB_Master_Script_rahul_gupta_r9int_1', $input_ha_ilb)
          end
          sub on_error:handle_error() do
            call rightscripts_utilities.run_rightscript_by_name( @server3_ilb.current_instance(), 'Start_HA_ILB_Master_Script_rahul_gupta_r9int_1', $input_ha_ilb)
          end
        end
      end 
end

operation 'provision_wfm_on_cis' do
  definition 'provision_wfm_on_cis'
end

define provision_wfm_on_cis(@server_array_bck) return @server_array_bck do
  $rsinputs = 
  { 
    'REQUEST_TYPE'     => join(['text:', 'provision']),
    'DEFAULT_TENANT'   => 'text:krIntUsr'
  }
  call rightscripts_utilities.run_rightscript_by_name( @server_array_bck.current_instances()[0], 'cis_provision_wfm_rahul_gupta_r9int_1', $rsinputs)
end

operation 'upgrade_tenant_db_schemas' do
  definition 'upgrade_tenants'
end
define upgrade_tenants(@server_array_bck) return @server_array_bck do
     call config_generic.production_get_deployment_inputs() retrieve $inputs
     $deployment_json = to_object(@@deployment)
     $deployment_href = $deployment_json['hrefs'][0]	 

  $skpi_dedicated_db = split($inputs['SKPI_DEDICATED_DB'], ';')[0]
  if !($skpi_dedicated_db == "True")  
    $skpi_db_server_name = ''
    $skpi_db_name = ''	
  else
    $skpi_db_server_name = split($inputs['SKPI_DB_SERVER_NAME'], ';')[0]
    $skpi_db_name = split($inputs['SKPI_DB_NAME'], ';')[0]
  end

     $input = 
      { 
        "TMS_URL"             => join(["text:", split($inputs['TMS_URL'], ';')[0]]),
        "TENANT_SHORT_NAME"   => join(["text:", $inputs['TENANT_SHORT_NAME']]),
        'DB_NAME'             => join(['text:', split($inputs['DB_NAME'], ';')[0]]),
        'DB_PASSWORD'         => join(['cred:', split($inputs['DB_PASSWORD'], ';')[0]]),
        'DB_SERVER_NAME'      => join(['text:', split($inputs['DB_SERVER_NAME'], ';')[0]]),
        'DB_USERNAME'         => join(['cred:', split($inputs['DB_USERNAME'], ';')[0]]),
        'SKPI_DB_SERVER_NAME' => join(['text:', $skpi_db_server_name]),
        'SKPI_DB_NAME'        => join(['text:', $skpi_db_name]),
        'SKPI_DEDICATED_DB'   => join(['text:', split($inputs['SKPI_DEDICATED_DB'], ';')[0]]),
        'SUPER_USER_PPAS'     => join(['cred:', split($inputs['SUPER_USER_PPAS'], ';')[0]]),
        'SUPER_USER_PWD_PPAS' => join(['cred:', split($inputs['SUPER_USER_PWD_PPAS'], ';')[0]]),
        'UPGRADE_USER'        => join(['cred:', split($inputs['UPGRADE_USER'], ';')[0]]),
        'UPGRADE_USER_PWD'    => join(['cred:', split($inputs['UPGRADE_USER_PWD'], ';')[0]]),
        'DEFAULT_TENANT'      => 'text:krIntUsr',
        "DEPLOYMENT_HREF"     => join(["text:", $deployment_href]),
        'THREAD_POOL_SIZE'    =>  join(['cred:', split($inputs['THREAD_POOL_SIZE'], ';')[0]]),
        'TENANT_FAILURE_THRESHOLD' =>  join(['cred:', split($inputs['TENANT_FAILURE_THRESHOLD'], ';')[0]])  
      }
  call rightscripts_utilities.run_rightscript_by_name( @server_array_bck.current_instances()[0], 'upgrade_tenant_db_schemas_rahul_gupta_r9int_1', $input)
end

parameter "param_sqlpatch_release" do
  allowed_pattern /^\d{2}\.\d{2}\.\d{2}$|^[a-zA-Z].+$/
  description "Release version for wich sql patch needs to be applied.Example - 08.03.00"
  label "Release"
  constraint_description "Regex constraint violated. This field cannot be empty"
  type "string"
end

parameter "param_sqlpatch_patchname" do
  allowed_pattern /^[\w\.\-]+$/
  description "Sql Patch Name. Example - wfd-123456"
  label "Sql Patch Name"
  constraint_description "Regex constraint violated. This field cannot be empty"
  type "string"
end

parameter "param_sqlpatch_tenantlist" do
  description "Comma seperated list of tenants for which sql patch needs to be applied.Example - Tenant1,Tenant2"
  label "Tenant List"
  type "string"
end

parameter "param_sqlpatch_isrollback" do
  allowed_values "True","False"
  default "False"
  description "Select True for rollback sql patch."
  label "Is Rollback?"
  type "list"
end

parameter "param_sqlpatch_forcererun" do
  allowed_values "True","False"
  default "True"
  description "Select True for Force-Rerun."
  label "Force-Rerun?"
  type "list"
end

operation 'apply_sql_patch' do
  definition 'apply_sql_patch'
end

define apply_sql_patch(@server_array_bck, $param_sqlpatch_release, $param_sqlpatch_patchname, $param_sqlpatch_tenantlist, $param_sqlpatch_isrollback, $param_sqlpatch_forcererun) return @server_array_bck do
     #call config_generic.production_get_deployment_inputs() retrieve $inputs
     $deployment_json = to_object(@@deployment)
     $deployment_href = $deployment_json['hrefs'][0]
   
     $input = 
      { 
        'SERVICE_NAME'        => join(["text:", "wfm"]),
        'SERVICE_RELEASE'     => join(["text:", $param_sqlpatch_release]),
        'SQLPATCH_NAME'       => join(["text:", $param_sqlpatch_patchname]),
        'SQLPATCH_TLIST'      => join(["text:", $param_sqlpatch_tenantlist]),
        'SQLPATCH_ISROLLBACK' => join(["text:", $param_sqlpatch_isrollback]),
        'SQLPATCH_FORCERERUN' => join(["text:", $param_sqlpatch_forcererun])
      }

  call rightscripts_utilities.run_rightscript_by_name( @server_array_bck.current_instances()[0], 'sqlpatch_get_content_from_bucket_rahul_gupta_r9int_1', $input)
  call rightscripts_utilities.run_rightscript_by_name( @server_array_bck.current_instances()[0], 'sqlpatch_apply_rahul_gupta_r9int_1', $input)
end

operation 'init_wfm_services' do
  definition 'init_wfm_services'
end
define init_wfm_services(@server_array_bck) return @server_array_bck do
     call config_generic.production_get_deployment_inputs() retrieve $inputs
     $deployment_json = to_object(@@deployment)
     $deployment_href = $deployment_json['hrefs'][0]
   
     $input = 
     { 
        "DEPLOYMENT_HREF"   => join(["text:", $deployment_href]),
        "KRINTUSR_REALM"    => 'text:krIntUsr',  
        "UPGRADE_USER"      => join(['cred:', split($inputs['UPGRADE_USER'], ';')[0]]),
        "UPGRADE_USER_PWD"  => join(['cred:', split($inputs['UPGRADE_USER_PWD'], ';')[0]])
     }
  call rightscripts_utilities.run_rightscript_by_name( @server_array_bck.current_instances()[0], 'init_wfm_services_rahul_gupta_r9int_1', $input)
end

operation 'wfm_cutover' do
  definition 'wfm_cutover'
end
define wfm_cutover(@server_array_bck) return @server_array_bck do       
   call config_generic.production_get_deployment_inputs() retrieve $inputs  
   
   $input = 
    {
      "GOOGLE_MANAGED_ZONE" => join(['text:', split($inputs['GOOGLE_MANAGED_ZONE'], ';')[0]])
    }
  call rightscripts_utilities.run_rightscript_by_name( @server_array_bck.current_instances()[0], 'wfm_cutover_rahul_gupta_r9int_1', $input)
end

operation 'update_wfm_detail_in_services' do
  definition 'update_wfm_detail_in_services'
end

define update_wfm_detail_in_services(@server_array_bck) return @server_array_bck do       
   call config_generic.production_get_deployment_inputs() retrieve $inputs  
   
   $input = 
    { 
      'IDP_AUTH_URL'      => join(["text:", split($inputs['IDP_AUTH_URL'], ';')[0]]),
      'TMS_URL'           => join(["text:", split($inputs['TMS_URL'], ';')[0]]),
      "TENANT_SHORT_NAME" => join(["text:", $inputs['TENANT_SHORT_NAME']]),
      "UPGRADE_USER"      => join(['cred:', split($inputs['UPGRADE_USER'], ';')[0]]),
      "UPGRADE_USER_PWD"  => join(['cred:', split($inputs['UPGRADE_USER_PWD'], ';')[0]])
    }
  call rightscripts_utilities.run_rightscript_by_name( @server_array_bck.current_instances()[0], 'update_wfm_detail_in_services_rahul_gupta_r9int_1', $input)
end

parameter "param_process_timeout" do
   allowed_pattern /^\d{0,5}$/
   description "Enter value to update the process timeout, otherwise leave blank"
   label "Upgrade Provisioning Process Timeout"
   type "string"
end

parameter "param_failed_tenants_retry_count" do
   allowed_pattern /^\d{0,5}$/
   description "Enter value to update the failed tenants retry count, otherwise leave blank"
   label "Upgrade Provisioning Failed Tenants Retry Count"
   type "string"
end

parameter "param_inprogress_tenants_retry_count" do
   allowed_pattern /^\d{0,5}$/
   description "Enter value to update the inprogress tenants retry count, otherwise leave blank"
   label "Upgrade Provisioning Inprogress Tenants Retry Count"
   type "string"
end

parameter "param_inprogress_tenants_timeout" do
   allowed_pattern /^\d{0,5}$/
   description "Enter value to update the inprogress tenants timeout, otherwise leave blank"
   label "Upgrade Provisioning Inprogress Tenants Timeout"
   type "string"
end


parameter "param_throttling_count" do
   allowed_pattern /^\d{0,5}$/
   description "Enter value to update the throttling timeout, otherwise leave blank"
   label "Upgrade Provisioning Throttling Count"
   type "string"
end

parameter "param_forceful_execution" do
   allowed_pattern /^(()|(true)|(false))$/
   description "Enter true/false to update the forceful execution, otherwise leave blank"
   label "Upgrade Provisioning Forceful Execution"
   type "string"
end

parameter "param_dbpatcher_thread_pool_size" do
   allowed_pattern /^\d{0,5}$/
   description "Enter value to update the DBPatcher thread pool size, otherwise leave blank"
   label "DBPatcher Thread pool size"
   type "string"
end

operation 'update_default_properties_WFMRollingUpgrade' do
  definition 'update_default_tenant_rolling_properties'
end

define update_default_tenant_rolling_properties(@server_array_bck, $param_process_timeout, $param_failed_tenants_retry_count, $param_inprogress_tenants_retry_count, $param_inprogress_tenants_timeout, $param_throttling_count, $param_forceful_execution, $param_dbpatcher_thread_pool_size) return @server_array_bck, $param_process_timeout, $param_failed_tenants_retry_count, $param_inprogress_tenants_retry_count, $param_inprogress_tenants_timeout, $param_throttling_count, $param_forceful_execution, $param_dbpatcher_thread_pool_size do
   
   $input = 
   { 
    "PROCESS_TIMEOUT"                => join(["text:", $param_process_timeout]),
    "FAILED_TENANTS_RETRY_COUNT"     => join(["text:", $param_failed_tenants_retry_count]),
    "INPROGRESS_TENANTS_RETRY_COUNT" => join(["text:", $param_inprogress_tenants_retry_count]),
    "INPROGRESS_TENANTS_TIMEOUT"     => join(["text:", $param_inprogress_tenants_timeout]),
    "THROTTLING_COUNT"               => join(["text:", $param_throttling_count]),
    "FORCEFUL_EXECUTION"             => join(["text:", $param_forceful_execution]),
    "DBPATCHER_THREAD_POOL_SIZE"     => join(["text:", $param_dbpatcher_thread_pool_size])
   }
  
   concurrent foreach @instance in @server_array_bck.current_instances() on_rollback:abort_task() do
     call rightscripts_utilities.run_rightscript_by_name( @instance, 'update_default_tenant_rolling_properties_rahul_gupta_r9int_1', $input)
   end
end


operation 'stop_step_1__disable_application' do
  definition 'disable_application'
end
define disable_application(@server_ilb, @server2_ilb, @server3_ilb, @server_array_fnt, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_bgp, @server_array_bgi, @server_array_api, @server_array_udm) return @server_ilb, @server2_ilb, @server3_ilb, @server_array_fnt, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_bgp, @server_array_bgi, @server_array_api, @server_array_udm do
   call custom_operations.disable_application(@server_ilb, @server2_ilb, @server3_ilb, @server_array_fnt, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_bgp, @server_array_bgi, @server_array_api, @server_array_udm) retrieve @server_ilb, @server2_ilb, @server3_ilb, @server_array_fnt, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_bgp, @server_array_bgi, @server_array_api, @server_array_udm
end

operation 'stop_step_2__cleanup_references' do
  definition 'cleanup_references'
end
define cleanup_references(@server_array_bck) return @server_array_bck do
  call config_generic.production_get_deployment_inputs() retrieve $inputs
  $input =
  {
    'DB_NAME'                => join(['text:', split($inputs['DB_NAME'], ';')[0]]),
    'DB_PASSWORD'            => join(['cred:', split($inputs['DB_PASSWORD'], ';')[0]]),
    'DB_SERVER_NAME'         => join(['text:', split($inputs['DB_SERVER_NAME'], ';')[0]]),
    'DB_USERNAME'            => join(['cred:', split($inputs['DB_USERNAME'], ';')[0]]),
    'SUPER_USER_PPAS'        => join(['cred:', split($inputs['SUPER_USER_PPAS'], ';')[0]]),
    'SUPER_USER_PWD_PPAS'    => join(['cred:', split($inputs['SUPER_USER_PWD_PPAS'], ';')[0]])
  }
  # Clear Redis Cache
  call rightscripts_utilities.run_rightscript_by_name( @server_array_bck.current_instances()[0], 'flush_cache_rahul_gupta_r9int_1', $input)

  # DB Cleanup
  call rightscripts_utilities.run_rightscript_by_name( @server_array_bck.current_instances()[0], 'clean_db_rahul_gupta_r9int_1', $input)
end

parameter "param_confirm_from_user" do
   description "Are you sure your want to run this custom operation. This custom operation will drop versioned schemas associated with this WFM, flush redis cache, remove RabbitMQ user and Unregister this WFM from TMS. Please type the text 'confirm' in the text field to run this custom operation"
   allowed_pattern /^(confirm)$/
   label "Confirmation before running Custom Operation"
   type "string"
end

operation 'stop_step__decommission_wfm' do
  definition 'decommission_wfm'
end
define decommission_wfm(@server_array_bck, @server_array_fnt, $param_confirm_from_user) return @server_array_bck, @server_array_fnt, $param_confirm_from_user do
  call custom_operations.decommission_wfm(@server_array_bck, @server_array_fnt, $param_confirm_from_user) retrieve @server_array_fnt, @server_array_bck, $param_confirm_from_user
end

operation 'rollback_step_1__rollback_templates' do
  definition 'rollback_templates'
end
define rollback_templates(@server_array_bck) return @server_array_bck do
  call config_generic.production_get_deployment_inputs() retrieve $inputs
  
      $input =
      {
        'MODE'           => 'text:rollback',
        'DB_NAME'        => join(['text:', split($inputs['DB_NAME'], ';')[0]]),
        'DB_PASSWORD'    => join(['cred:', split($inputs['DB_PASSWORD'], ';')[0]]),
        'DB_SERVER_NAME' => join(['text:', split($inputs['DB_SERVER_NAME'], ';')[0]]),
        'DB_USERNAME'    => join(['cred:', split($inputs['DB_USERNAME'], ';')[0]])
      }
      call rightscripts_utilities.run_rightscript_by_name( @server_array_bck.current_instances()[0], 'process_templates_rahul_gupta_r9int_1', $input)
end

operation 'rollback_step_2__rollback_apis' do
  definition 'rollback_apis'
end
define rollback_apis(@server_array_bck) return @server_array_bck do
    call config_generic.production_get_deployment_inputs() retrieve $inputs
    $input = { 'SHARED_SERVICE' => 'text:wfm' }
    call rightscripts_utilities.run_rightscript_by_name( @server_array_bck.current_instances()[0], 'rollback_apis_rahul_gupta_r9int_1', $input)
end

operation 'rollback_wfm_cutover' do
  definition 'rollback_wfm_cutover'
end
define rollback_wfm_cutover(@server_array_bck) return @server_array_bck do
   call config_generic.production_get_deployment_inputs() retrieve $inputs  
  
   $input = 
   { 
     "GOOGLE_MANAGED_ZONE" => join(['text:', split($inputs['GOOGLE_MANAGED_ZONE'], ';')[0]])
   }
  call rightscripts_utilities.run_rightscript_by_name( @server_array_bck.current_instances()[0], 'rollback_wfm_cutover_rahul_gupta_r9int_1', $input)
end

operation 'move_rabbitmq_messages' do
  definition 'move_rabbitmq_messages'
end

define move_rabbitmq_messages(@server_array_bck) return @server_array_bck do
  call config_generic.production_get_deployment_inputs() retrieve $inputs
  $script_rabbit_shovel_inputs=
  {
    'IDP_AUTH_URL'      => join(["text:", split($inputs['IDP_AUTH_URL'], ';')[0]]),
    'TMS_URL'           => join(["text:", split($inputs['TMS_URL'], ';')[0]]),
    'TENANT_SHORT_NAME' => join(["text:", $inputs['TENANT_SHORT_NAME']]),
    'RABBIT_PASSWORD'        => join(['cred:', split($inputs['RABBIT_PASSWORD'], ';')[0]]),
    'RABBIT_USERNAME'    => join(['cred:', split($inputs['RABBIT_USERNAME'], ';')[0]]),
    'RABBIT_HOST'    => join(['text:', split($inputs['RABBIT_HOST'], ';')[0]]),
    'RABBIT_VHOST'  => join(['text:', split($inputs['RABBIT_VHOST'], ';')[0]]),
    'ENV_RABBIT_HOST'    => join(['text:', split($inputs['ENV_RABBIT_HOST'], ';')[0]]),
    'DB_NAME'        => join(['text:', split($inputs['DB_NAME'], ';')[0]])

  }
  call rightscripts_utilities.run_rightscript_by_name( @server_array_bck.current_instances()[0], 'Move_Rabbitmq_Messages_rahul_gupta_r9int_1', $script_rabbit_shovel_inputs)
end

parameter "param_server_array_to_restart" do
   allowed_values "BCK Servers Only","TMK Servers Only","SCH Servers Only","BGP and BGI Servers Only","API Servers Only","UDM Servers Only","ALL Servers"
   description "Default value is 'ALL Servers'.Select other value to restart specific server array instances"
   label "Select Server Array to restart"
   default "ALL Servers"
   type "list"
end

define restart_server_array(@server_array) return @server_array, $previous_datacenter_policy_list do

    #Disable the server-array
    call servers_utilities.server_array_update_state(@server_array, "disabled") retrieve @server_array

    #Fetch current datacenter policy of the server-array
    call servers_utilities.get_server_array_datacenter_policy(@server_array) retrieve $previous_datacenter_policy_list

    #Update DATACENTER POLICY to twice in each datacenter
    call servers_utilities.update_server_array_datacenter_policy(@server_array, $previous_datacenter_policy_list) retrieve @server_array, $back_tag_policy, $previous_datacenter_policy_list

    $current_instance_count = @server_array.instances_count

    #Launch 'n' new servers
    call servers_utilities.launch_instances_server_array(@server_array, $current_instance_count) retrieve @server_array

end

define server_array_state_change(@server_array, $previous_datacenter_policy_list) return @server_array, $unstable_node do

    $is_this_express_upgrade = false
    call servers_utilities.poll_instance_state_server_array_WFM(@server_array, $is_this_express_upgrade) retrieve $unstable_node

    call servers_utilities.server_array_update_state(@server_array, "enabled") retrieve @server_array

    #Reseting datacenter policy to original
      $array_inputs =  {
      datacenter_policy: $previous_datacenter_policy_list
      }

    @server_array.update(server_array: $array_inputs)

end

operation 'cluster_refresh' do
  definition 'cluster_refresh'
end

define cluster_refresh(@server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_api, @server_array_udm, $param_server_array_to_restart) return @server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_api, @server_array_udm do
  call custom_operations.cluster_refresh(@server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_api, @server_array_udm, $param_server_array_to_restart) retrieve @server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_api, @server_array_udm
end

operation 'express_upgrade_WFM_backend' do
  definition 'express_upgrade_WFM_backend'
  output_mappings do { $output_build_number_backend => $param_build_number_backend, $output_build_level_backend =>  $out_release} end
end
  
define express_upgrade_WFM_backend(@server_ilb, @server2_ilb, @server3_ilb, @server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_api, @server_array_udm, $param_build_number_backend) return @server_ilb, @server2_ilb, @server3_ilb, @server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_api, @server_array_udm, $param_build_number_backend,$out_release do
 call custom_operations.express_upgrade_WFM_backend(@server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_api, @server_array_udm, $param_build_number_backend,'wfm-backend') retrieve @server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_api, @server_array_udm, $param_build_number_backend,$out_release
 call custom_operations.update_nginx_ilb_state_file(@server_ilb, @server2_ilb, @server3_ilb) retrieve @server_ilb, @server2_ilb, @server3_ilb
end

operation 'rollback_express_upgrade_WFM_backend' do
  definition 'rollback_express_upgrade_WFM_backend'
  output_mappings do { $output_build_number_backend => $prev_backend_build_number , $output_build_level_backend => $previous_backend_build_level} end
end

define rollback_express_upgrade_WFM_backend(@server_ilb, @server2_ilb, @server3_ilb, @server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_api, @server_array_udm) return @server_ilb, @server2_ilb, @server3_ilb, @server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_api, @server_array_udm, $prev_backend_build_number,$previous_backend_build_level do
  call custom_operations.rollback_express_upgrade_WFM_backend(@server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_api, @server_array_udm) retrieve @server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_api, @server_array_udm, $prev_backend_build_number,$previous_backend_build_level 
  call custom_operations.update_nginx_ilb_state_file(@server_ilb, @server2_ilb, @server3_ilb) retrieve @server_ilb, @server2_ilb, @server3_ilb
end

operation 'express_upgrade_WFM_frontend' do
  definition 'express_upgrade_WFM_frontend'
  output_mappings do { $output_build_number_frontend => $param_build_number_frontend, $output_build_level_frontend =>  $out_release} end
end

define express_upgrade_WFM_frontend(@server_array_fnt, $param_build_number_frontend) return @server_array_fnt, $param_build_number_frontend,$out_release do
  call custom_operations.express_upgrade_WFM_frontend(@server_array_fnt, $param_build_number_frontend,'wfm-frontend') retrieve @server_array_fnt, $param_build_number_frontend,$out_release 
end

operation 'rollback_express_upgrade_WFM_frontend' do
  definition 'rollback_express_upgrade_WFM_frontend'
  output_mappings do { $output_build_number_frontend => $prev_frontend_build_number, $output_build_level_frontend => $previous_frontend_build_level} end
end

define rollback_express_upgrade_WFM_frontend(@server_array_fnt) return @server_array_fnt, $prev_frontend_build_number,$previous_frontend_build_level  do
  # below code is to check if the same custom operaton is already running on this deployment
  call custom_operations.rollback_express_upgrade_WFM_frontend(@server_array_fnt) retrieve @server_array_fnt, $prev_frontend_build_number,$previous_frontend_build_level 
end

operation 'disable_runtime_isolation_step1_reset_frontend' do
  definition 'disable_runtime_isolation_step1_reset_frontend'
end
  
define disable_runtime_isolation_step1_reset_frontend(@server_array_fnt, @server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_api, @server_array_udm) return @server_array_fnt, @server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_api, @server_array_udm do
   call config_generic.production_get_deployment_inputs() retrieve $inputs  
   $deployment_json = to_object(@@deployment)
   $deployment_href = $deployment_json['hrefs'][0]

   $input = 
   {
     "DEPLOYMENT_HREF"   => join(["text:", $deployment_href]),   
     "RUNTIME_ISOLATION" => join(['text:', split($inputs['RUNTIME_ISOLATION'], ';')[0]]),
     "PRODUCTION_STATE"  => 'text:True'
   }
   $is_runtime_isolation = split($inputs['RUNTIME_ISOLATION'], ';')[0]
   if $is_runtime_isolation == "true"
     foreach @instance in @server_array_fnt.current_instances() do
      if @instance.state == 'operational' 
        call rightscripts_utilities.run_rightscript_by_name(@instance, 'disable_runtime_isolation_rahul_gupta_r9int_1', $input)
      end
     end
	 $runtime_isolation_executed_tags = {}
	 #$runtime_isolation_executed_tags['RSINPUT_TMK_NODE_FOR_TERMINATION'] = split($inputs['TMK_NODE_NUM'], ';')[0]
	 #$runtime_isolation_executed_tags['RSINPUT_SCH_NODE_FOR_TERMINATION'] = split($inputs['SCH_NODE_NUM'], ';')[0]
     $runtime_isolation_executed_tags['RSINPUT_BCK_NODE_NUM'] = to_n(@server_array_bck.instances_count) + to_n(split($inputs['TMK_NODE_NUM'], ';')[0]) + to_n(split($inputs['SCH_NODE_NUM'], ';')[0])
     call tags_utilities.apply_tags($runtime_isolation_executed_tags, @@deployment)   
   end
end

operation 'disable_runtime_isolation_step2_optimizing_nodes' do
  definition 'disable_runtime_isolation_step2_optimizing_nodes'
end
  
define disable_runtime_isolation_step2_optimizing_nodes(@server_array_fnt, @server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_api, @server_array_udm, @server_ilb, @server2_ilb, @server3_ilb) return @server_array_fnt, @server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_api, @server_array_udm, @server_ilb, @server2_ilb, @server3_ilb do
   call config_generic.production_get_deployment_inputs() retrieve $inputs  
   $is_runtime_isolation = split($inputs['RUNTIME_ISOLATION'], ';')[0]
   $is_runtime_isolation_executed = split($inputs['IS_DISABLE_RUNTIME_ISOLATION_EXECUTED'], ';')[0]
   if ($is_runtime_isolation == "true" && $is_runtime_isolation_executed == "true")
     call custom_operations.disable_runtime_isolation(@server_array_bck, @server_array_tmk, @server_array_sch) retrieve @server_array_bck, @server_array_tmk, @server_array_sch
   end
   $latest_bck_instance_count = to_s(@server_array_bck.instances_count)
   if $latest_bck_instance_count == to_s(split($inputs['BCK_NODE_NUM'], ';')[0])
     $runtime_isolation_completed_tags = {}
     $runtime_isolation_completed_tags['RSINPUT_TMK_NODE_NUM'] = 0
     $runtime_isolation_completed_tags['RSINPUT_SCH_NODE_NUM'] = 0  
     call tags_utilities.apply_tags($runtime_isolation_completed_tags, @@deployment)     
   else
     raise "Failed... Required number of BACKEND instances could not be launched!!! Retry of this operation is REQUIRED."  
   end
   call custom_operations.update_nginx_ilb_state_file(@server_ilb, @server2_ilb, @server3_ilb) retrieve @server_ilb, @server2_ilb, @server3_ilb
end

operation 'enable_bgp_splitting' do
  definition 'enable_bgp_splitting'
end

define enable_bgp_splitting(@server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch) return @server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch do
  call config_generic.production_get_deployment_inputs() retrieve $inputs

  $latest_bgp_instance_count = to_n(@server_array_bgp.instances_count)
  $latest_bgi_instance_count = to_n(@server_array_bgi.instances_count)
  if ($latest_bgp_instance_count == 0 || $latest_bgi_instance_count == 0)
     raise "Failed... Splitting BGP requires at least 1 BGP and 1 BGI node"
  end

  $bgp_splitting_tag = {
    "RSINPUT_ENABLE_BGP_SPLITTING" => true
  }
  call tags_utilities.apply_tags($bgp_splitting_tag, @@deployment)

  $deployment_json = to_object(@@deployment)
  $deployment_href = $deployment_json['hrefs'][0]
  $input = {
    "DEPLOYMENT_HREF"   => join(["text:", $deployment_href])
  }

  foreach @instance in @server_array_bgp.current_instances() do
    if @instance.state == 'operational'
      call rightscripts_utilities.run_rightscript_by_name(@instance, 'enable_bgp_splitting_rahul_gupta_r9int_1', $input)
    end
  end
  foreach @instance in @server_array_bgi.current_instances() do
    if @instance.state == 'operational'
      call rightscripts_utilities.run_rightscript_by_name(@instance, 'enable_bgp_splitting_rahul_gupta_r9int_1', $input)
    end
  end
  foreach @instance in @server_array_bck.current_instances() do
    if @instance.state == 'operational'
      call rightscripts_utilities.run_rightscript_by_name(@instance, 'totalizer_remote_messaging_rahul_gupta_r9int_1', $input)
    end
  end
  foreach @instance in @server_array_tmk.current_instances() do
    if @instance.state == 'operational'
      call rightscripts_utilities.run_rightscript_by_name(@instance, 'totalizer_remote_messaging_rahul_gupta_r9int_1', $input)
    end
  end
  foreach @instance in @server_array_sch.current_instances() do
    if @instance.state == 'operational'
      call rightscripts_utilities.run_rightscript_by_name(@instance, 'totalizer_remote_messaging_rahul_gupta_r9int_1', $input)
    end
  end
end

operation 'disable_bgp_splitting_and_restart' do
  definition 'disable_bgp_splitting_and_restart'
end

define disable_bgp_splitting_and_restart(@server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_api, @server_array_udm) return @server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_api, @server_array_udm do
  call config_generic.production_get_deployment_inputs() retrieve $inputs

  $bgp_splitting_tag = {
    "RSINPUT_ENABLE_BGP_SPLITTING" => false
  }
  call tags_utilities.apply_tags($bgp_splitting_tag, @@deployment)

  # Restart BGP first to disable RabbitMQ queue publisher before listeners
  call custom_operations.cluster_refresh(@server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_api, @server_array_udm, 'BGP and BGI Servers Only') retrieve @server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_api, @server_array_udm

  call custom_operations.cluster_refresh(@server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_api, @server_array_udm, 'BCK Servers Only') retrieve @server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_api, @server_array_udm
  call custom_operations.cluster_refresh(@server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_api, @server_array_udm, 'TMK Servers Only') retrieve @server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_api, @server_array_udm
  call custom_operations.cluster_refresh(@server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_api, @server_array_udm, 'SCH Servers Only') retrieve @server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_api, @server_array_udm
end

operation 'enable_bgp_splitting_and_restart' do
  definition 'enable_bgp_splitting_and_restart'
end

define enable_bgp_splitting_and_restart(@server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_api, @server_array_udm) return @server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_api, @server_array_udm do
  call enable_bgp_splitting(@server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch) retrieve @server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch
  # Restart BCK,TMK,SCH nodes first to enable RabbitMQ listeners before publisher
  call custom_operations.cluster_refresh(@server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_api, @server_array_udm, 'BCK Servers Only') retrieve @server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_api, @server_array_udm
  call custom_operations.cluster_refresh(@server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_api, @server_array_udm, 'TMK Servers Only') retrieve @server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_api, @server_array_udm
  call custom_operations.cluster_refresh(@server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_api, @server_array_udm, 'SCH Servers Only') retrieve @server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_api, @server_array_udm

  call custom_operations.cluster_refresh(@server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_api, @server_array_udm, 'BGP and BGI Servers Only') retrieve @server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_api, @server_array_udm
end

operation 'ilb_express_upgrade' do
  definition 'ilb_express_upgrade'
  output_mappings do { 
                      $output_build_number_ilb => $param_build_number_ilb , 
                      $output_build_number_dfi => $param_build_number_dfi
                    } end
end

operation 'rollback_ilb_express_upgrade' do
  definition 'rollback_ilb_express_upgrade'
  output_mappings do { 
                       $output_build_number_ilb => $prev_docker_image_level ,
                       $output_build_number_dfi => $prev_dfi_build_number
                      } end
end

#ILB Express Upgarde HA
define ilb_express_upgrade(@server_ilb, @server2_ilb, @server3_ilb, $param_build_number_dfi, $param_build_number_ilb) return @server_ilb, @server2_ilb, @server3_ilb, $param_build_number_dfi, $param_build_number_ilb do
    # below code is to check if the same custom operaton is already running on this deployment
    sub task_name: 'check if operation already running', on_error:handle_error() do
      $counter = 0
      @execution_data = @@execution.get(view: "expanded")
      $execution_data = to_object(@execution_data)
      # get the list of running operations
      $running_operations = $execution_data['details'][0]['running_operations']
      foreach $operation in $running_operations do
        # check if this operation's name is present in Running Operations list   
        if $operation['name'] == 'ilb_express_upgrade' ||  $operation['name'] == 'rollback_ilb_express_upgrade'
          $counter = $counter + 1
          if $counter > 1  
            raise "Operation express_upgrade OR rollback_express_upgrade is already running on this deployment. Kindly wait and try again later."
          end
        end
      end    
    end
    call config_generic.production_get_deployment_inputs() retrieve $inputs
    $param_ha_ilb = split($inputs['DEPOY_HA_ILB'], ';')[0]
    #GET previous DFI's HREF  for ILB1 and save to deployment's tags
    call servers_utilities.get_server_resource_image_href(@server_ilb) retrieve $previous_image_href, $resource_uid
    $previous_dfi_build_number = split(split($resource_uid, '-')[-2], 'b')[1]
    if to_s($param_ha_ilb) == "True"
        #GET previous DFI's HREF  for ILB2 and save to deployment's tags
        call servers_utilities.get_server_resource_image_href(@server2_ilb) retrieve $previous_image_href_ilb2, $resource_uid_ilb2
        $previous_dfi_build_number_ilb2 = split(split($resource_uid_ilb2, '-')[-2], 'b')[1]
        #GET previous DFI's HREF  for ILB3 and save to deployment's tags
        call servers_utilities.get_server_resource_image_href(@server3_ilb) retrieve $previous_image_href_ilb3, $resource_uid_ilb3
        $previous_dfi_build_number_ilb3 = split(split($resource_uid_ilb3, '-')[-2], 'b')[1]
    end
    # GET previous docker image build level, update label tags
    $docker_images = $inputs['DOCKER_IMAGES']
    $current_docker_image_level = split($docker_images, ':')[1]
    $build_level_ilb = $inputs['BUILD_LEVEL_ILB']
    $label_tags = $inputs['LABEL_TAGS']
    $label_tags  = sub($label_tags,"/ilb_release_version=.*?,/",join(["ilb_release_version=",$build_level_ilb,"d",$param_build_number_ilb,","]))
    $tags = {}
    $tags['RSINPUT_LABEL_TAGS'] = $label_tags
    call tags_utilities.apply_tags($tags, @@deployment)
    $input_label_tags = {
        'LABEL_TAGS' => join(['text:', $label_tags])
    }
    $initial_docker_image_level = $inputs['PREVIOUS_DOCKER_IMAGE_LEVEL']
    $current_docker_image_level_ilb1 = $inputs['CURRENT_DOCKER_IMAGE_ILB1']
    $current_docker_image_level_ilb2 = $inputs['CURRENT_DOCKER_IMAGE_ILB2']
    $current_docker_image_level_ilb3 = $inputs['CURRENT_DOCKER_IMAGE_ILB3']
    if $current_docker_image_level_ilb1 == "" || $current_docker_image_level_ilb1 == "null" || $current_docker_image_level_ilb1 == null || size($current_docker_image_level_ilb1) == 0
        $initial_docker_image_level = $current_docker_image_level
        $current_docker_image_level_ilb1 = $initial_docker_image_level
    end
    if $current_docker_image_level_ilb2 == "" || $current_docker_image_level_ilb2 == "null" || $current_docker_image_level_ilb2 == null || size($current_docker_image_level_ilb2) == 0
        $current_docker_image_level_ilb2 = $initial_docker_image_level
    end
    if $current_docker_image_level_ilb3 == "" || $current_docker_image_level_ilb3 == "null" || $current_docker_image_level_ilb3 == null || size($current_docker_image_level_ilb3) == 0
        $current_docker_image_level_ilb3 = $initial_docker_image_level
    end
    if to_s($param_ha_ilb) == "True"
        if $param_build_number_dfi == $previous_dfi_build_number && $param_build_number_dfi == $previous_dfi_build_number_ilb2 && $param_build_number_dfi == $previous_dfi_build_number_ilb3 && $param_build_number_ilb == $initial_docker_image_level
            raise "Failed... Build number entered for express upgrade matches with the currently deployed build for all ILB Nodes. Kindly verify the build number and retry this custom operation. NO ROLLBACK REQUIRED after this."
        end 
    else
        if $param_build_number_dfi == $previous_dfi_build_number && $param_build_number_ilb == $initial_docker_image_level
            raise "Failed... Build number entered for express upgrade matches with the currently deployed build. Kindly verify the build number and retry this custom operation. NO ROLLBACK REQUIRED after this."
        end 
    end
    $ilb_input =
    {
        'Dummy' => 'text:dummy'
    }
    if to_s($param_ha_ilb) == "True"
        call rightscripts_utilities.run_rightscript_by_name(@server_ilb.current_instance(), 'Validate_Health_Check_WFMHA_rahul_gupta_r9int_1', $ilb_input)
        call rightscripts_utilities.run_rightscript_by_name(@server2_ilb.current_instance(), 'Validate_Health_Check_WFMHA_rahul_gupta_r9int_1', $ilb_input)
        call rightscripts_utilities.run_rightscript_by_name(@server3_ilb.current_instance(), 'Validate_Health_Check_WFMHA_rahul_gupta_r9int_1', $ilb_input)
    else
        call rightscripts_utilities.run_rightscript_by_name(@server_ilb.current_instance(), 'Validate_Health_Check_WFMHA_rahul_gupta_r9int_1', $ilb_input)
    end
    #GET deployment HREF
    $deployment_json = to_object(@@deployment)
    $deployment_href = $deployment_json['hrefs'][0]
    #Write previous image HREF  and build number to deployment tags
    $tags = {}
    $tags['RSINPUT_PREVIOUS_IMAGE_HREF'] = to_s($previous_image_href)
    $tags['RSINPUT_PREVIOUS_DFI_BUILD_NUMBER'] = to_s($previous_dfi_build_number)
    $tags['RSINPUT_PREVIOUS_DOCKER_IMAGE_LEVEL'] = to_s($current_docker_image_level)
    call tags_utilities.apply_tags($tags, @@deployment)
    #===================================DFI===============================================================
    #GET Current DFI HREF
    call builds_parameters.get_default_build_level_branch(split($inputs['DFI_BUILD_LEVEL'], ';')[0]) retrieve $build_level_dfi
    call google_cloud.get_google_image("docker-foundation-image-", $param_build_number_dfi, $build_level_dfi) retrieve $image_href, $image_name
    @ilb_instance = @server_ilb.current_instance()
    $current_instance_json = to_object(@ilb_instance)
    $csa = $current_instance_json['details'][0]['cloud_specific_attributes']      
    @server_ilb.next_instance().update(instance: { "image_href": $image_href, "cloud_specific_attributes": $csa})
    #==================================DFI ends here=======================================================
    #====================================Docker============================================================
    #Update docker image build level in instance inputs and deployment tags   
    $docker_images = gsub($docker_images, ":" + $current_docker_image_level, ":" + $param_build_number_ilb)
    $new_docker_image =   {'DOCKER_IMAGES'  => join(['text:',$docker_images]) }
    @server_ilb.next_instance().multi_update_inputs(inputs: $new_docker_image)
    @server_ilb.next_instance().multi_update_inputs(inputs: $input_label_tags)
    #===========================Docker ends here=============================================================
    if to_s($param_ha_ilb) == "True"
        $ilb2_started = all?(@server2_ilb.state[], "operational")
        $ilb3_started = all?(@server3_ilb.state[], "operational")
        if !$ilb2_started
            raise "Server ILB 2 is not operational. Aborting the operation. Please make sure all Server ILBs should be Operational ..."
        end
        if !$ilb3_started
            raise "Server ILB 3 is not operational. Aborting the operation. Please make sure all Server ILBs should be Operational ..."
        end
        if $param_build_number_dfi == $previous_dfi_build_number && $param_build_number_ilb == $current_docker_image_level_ilb1
            call rightscripts_utilities.run_rightscript_by_name(@server_ilb.current_instance(), 'ILB_HA_Register_CNAME_rahul_gupta_r9int_1', $ilb_input)
            call rightscripts_utilities.run_rightscript_by_name(@server_ilb.current_instance(), 'Validate_Live_ILB_rahul_gupta_r9int_1', $ilb_input)
            sleep(100)
        else 
            call rightscripts_utilities.run_rightscript_by_name(@server2_ilb.current_instance(), 'ILB_HA_Register_CNAME_rahul_gupta_r9int_1', $ilb_input)
            call rightscripts_utilities.run_rightscript_by_name(@server2_ilb.current_instance(), 'Validate_Live_ILB_rahul_gupta_r9int_1', $ilb_input)
            sleep(100)
        end
    end
    if $param_build_number_dfi != $previous_dfi_build_number || $param_build_number_ilb != $current_docker_image_level_ilb1
        sub task_label: "Terminate ILB", on_error: handle_error() do
            concurrent on_error: handle_error() do
              @server_ilb.terminate()
              call servers_utilities.poll_instance_state_server_resource_terminate(@server_ilb)
            end
        end
        sub task_label: "Launch ILB", on_error: handle_error() do
            concurrent on_error: handle_error() do
                @server_ilb.launch()
                call servers_utilities.poll_instance_state_server_resource(@server_ilb)
            end
         end
         $ilb_started = all?(@server_ilb.state[], "operational")
         if $ilb_started
             call rightscripts_utilities.run_rightscript_by_name(@server_ilb.current_instance(), 'Validate_Health_Check_WFMHA_rahul_gupta_r9int_1', $ilb_input)
             sleep(100)
             call rightscripts_utilities.run_rightscript_by_name(@server_ilb.current_instance(), 'ILB_HA_Register_CNAME_rahul_gupta_r9int_1', $ilb_input)
             call rightscripts_utilities.run_rightscript_by_name(@server_ilb.current_instance(), 'Validate_Live_ILB_rahul_gupta_r9int_1', $ilb_input)
         else
             raise "Failed to launch ilb server. Aborting the operation."
         end
         $tags = {}
         $tags['RSINPUT_CURRENT_DOCKER_IMAGE_ILB1'] = to_s($param_build_number_ilb)
         call tags_utilities.apply_tags($tags, @@deployment)
    end
    if to_s($param_ha_ilb) == "True"
        $tags = {}
        $tags['RSINPUT_PREVIOUS_IMAGE_HREF_ILB2'] = to_s($previous_image_href_ilb2)
        $tags['RSINPUT_PREVIOUS_DFI_BUILD_NUMBER_ILB2'] = to_s($previous_dfi_build_number_ilb2)
        $tags['RSINPUT_PREVIOUS_DOCKER_IMAGE_LEVEL_ILB2'] = to_s($current_docker_image_level)
        call tags_utilities.apply_tags($tags, @@deployment)
        $tags = {}
        $tags['RSINPUT_PREVIOUS_IMAGE_HREF_ILB3'] = to_s($previous_image_href_ilb3)
        $tags['RSINPUT_PREVIOUS_DFI_BUILD_NUMBER_ILB3'] = to_s($previous_dfi_build_number_ilb3)
        $tags['RSINPUT_PREVIOUS_DOCKER_IMAGE_LEVEL_ILB3'] = to_s($current_docker_image_level)
        call tags_utilities.apply_tags($tags, @@deployment)
        #===================================DFI===============================================================
        #GET Current DFI HREF for ILB 2
        call builds_parameters.get_default_build_level_branch(split($inputs['DFI_BUILD_LEVEL'], ';')[0]) retrieve $build_level_dfi
        call google_cloud.get_google_image("docker-foundation-image-", $param_build_number_dfi, $build_level_dfi) retrieve $image_href, $image_name
        @ilb2_instance = @server2_ilb.current_instance()
        $current_instance_json_ilb2 = to_object(@ilb2_instance)
        $csa_ilb2 = $current_instance_json_ilb2['details'][0]['cloud_specific_attributes']      
        @server2_ilb.next_instance().update(instance: { "image_href": $image_href, "cloud_specific_attributes": $csa_ilb2})
        #==================================DFI ends here=======================================================
        #===================================DFI===============================================================
        #GET Current DFI HREF for ILB 3
        call builds_parameters.get_default_build_level_branch(split($inputs['DFI_BUILD_LEVEL'], ';')[0]) retrieve $build_level_dfi
        call google_cloud.get_google_image("docker-foundation-image-", $param_build_number_dfi, $build_level_dfi) retrieve $image_href, $image_name
        @ilb3_instance = @server3_ilb.current_instance()
        $current_instance_json_ilb3 = to_object(@ilb3_instance)
        $csa_ilb3 = $current_instance_json_ilb3['details'][0]['cloud_specific_attributes']      
        @server3_ilb.next_instance().update(instance: { "image_href": $image_href, "cloud_specific_attributes": $csa_ilb3})
        #==================================DFI ends here=======================================================
        #Update docker image build level in instance inputs and deployment tags   
        $docker_images = gsub($docker_images, ":" + $current_docker_image_level, ":" + $param_build_number_ilb)
        $new_docker_image =   {'DOCKER_IMAGES'  => join(['text:',$docker_images]) }
        @server2_ilb.next_instance().multi_update_inputs(inputs: $new_docker_image)
        @server2_ilb.next_instance().multi_update_inputs(inputs: $input_label_tags)
        $tags = {}
        $tags['RSINPUT_DOCKER_IMAGES_ILB2'] = to_s($docker_images)
        call tags_utilities.apply_tags($tags, @@deployment)
        #===========================Docker ends here=============================================================
        #Update docker image build level in instance inputs and deployment tags   
        $docker_images = gsub($docker_images, ":" + $current_docker_image_level, ":" + $param_build_number_ilb)
        $new_docker_image =   {'DOCKER_IMAGES'  => join(['text:',$docker_images]) }
        @server3_ilb.next_instance().multi_update_inputs(inputs: $new_docker_image)
        @server3_ilb.next_instance().multi_update_inputs(inputs: $input_label_tags)
        $tags = {}
        $tags['RSINPUT_DOCKER_IMAGES_ILB3'] = to_s($docker_images)
        call tags_utilities.apply_tags($tags, @@deployment)
        #===========================Docker ends here=============================================================
        if $param_build_number_dfi != $previous_dfi_build_number_ilb2 || $param_build_number_ilb != $current_docker_image_level_ilb2
            sub task_label: "Terminate ILB2", on_error: handle_error() do
                concurrent on_error: handle_error() do
                  @server2_ilb.terminate()
                  call servers_utilities.poll_instance_state_server_resource_terminate(@server2_ilb)
                end
            end
            sub task_label: "Launch ILB2", on_error: handle_error() do
                concurrent on_error: handle_error() do
                    @server2_ilb.launch()
                    call servers_utilities.poll_instance_state_server_resource(@server2_ilb)
                end
             end
             $is_ilb2_started = all?(@server2_ilb.state[], "operational")
             if $is_ilb2_started
                 call rightscripts_utilities.run_rightscript_by_name(@server2_ilb.current_instance(), 'Validate_Health_Check_WFMHA_rahul_gupta_r9int_1', $ilb_input)
                 else
                 raise "Failed to launch ilb 2 server. Aborting the operation."
             end
             $tags = {}
             $tags['RSINPUT_CURRENT_DOCKER_IMAGE_ILB2'] = to_s($param_build_number_ilb)
             call tags_utilities.apply_tags($tags, @@deployment)
        end
        if $param_build_number_dfi != $previous_dfi_build_number_ilb3 || $param_build_number_ilb != $current_docker_image_level_ilb3
            sub task_label: "Terminate ILB3", on_error: handle_error() do
                concurrent on_error: handle_error() do
                  @server3_ilb.terminate()
                  call servers_utilities.poll_instance_state_server_resource_terminate(@server3_ilb)
                end
            end
            sub task_label: "Launch ILB3", on_error: handle_error() do
                concurrent on_error: handle_error() do
                    @server3_ilb.launch()
                    call servers_utilities.poll_instance_state_server_resource(@server3_ilb)
                end
             end
             $is_ilb3_started = all?(@server3_ilb.state[], "operational")
             if $is_ilb3_started
                 call rightscripts_utilities.run_rightscript_by_name(@server3_ilb.current_instance(), 'Validate_Health_Check_WFMHA_rahul_gupta_r9int_1', $ilb_input)
                 else
                 raise "Failed to launch ilb 2 server. Aborting the operation."
             end
             $tags = {}
             $tags['RSINPUT_CURRENT_DOCKER_IMAGE_ILB3'] = to_s($param_build_number_ilb)
             call tags_utilities.apply_tags($tags, @@deployment)
        end
    end
    #=================Updating Docker_Images tag after successful completion of ILB EU=================
    $tags = {}
    $tags['RSINPUT_DOCKER_IMAGES'] = to_s($docker_images)
    call tags_utilities.apply_tags($tags, @@deployment)
end


#ILB Express RollBack HA
define rollback_ilb_express_upgrade(@server_ilb, @server2_ilb, @server3_ilb) return @server_ilb, @server2_ilb, @server3_ilb, $prev_docker_image_level, $prev_dfi_build_number do
    # below code is to check if the same custom operaiton is already running on this deployment
     sub task_name:'check if operation already running', on_error:handle_error() do
       $counter = 0
       @execution_data = @@execution.get(view: "expanded")
       $execution_data = to_object(@execution_data)
       # get the list of running operations
       $running_operations = $execution_data['details'][0]['running_operations']
       foreach $operation in $running_operations do
       # check if this operation's name is present in Running Operations list   
         if $operation['name'] == 'ilb_express_upgrade' ||  $operation['name'] == 'rollback_ilb_express_upgrade'
           $counter = $counter + 1
           if $counter > 1  
             raise "Operation ilb_express_upgrade OR rollback_ilb_express_upgrade is already running on this deployment. Kindly wait and try again later."
           end
         end
       end  
     end
     call config_generic.production_get_deployment_inputs() retrieve $inputs
     $param_ha_ilb = split($inputs['DEPOY_HA_ILB'], ';')[0]
     $prev_image_href = $inputs['PREVIOUS_IMAGE_HREF']
     $prev_docker_image_level = $inputs['PREVIOUS_DOCKER_IMAGE_LEVEL']
     $prev_dfi_build_number = $inputs['PREVIOUS_DFI_BUILD_NUMBER']
    #GET previous DFI's HREF  for ILB1 and save to deployment's tags 
    call servers_utilities.get_server_resource_image_href(@server_ilb) retrieve $current_image_href, $resource_uid
    $current_dfi_build_number = split(split($resource_uid, '-')[-2], 'b')[1]
    if to_s($param_ha_ilb) == "True"
        #GET previous DFI's HREF  for ILB2 and save to deployment's tags
        call servers_utilities.get_server_resource_image_href(@server2_ilb) retrieve $current_image_href_ilb2, $resource_uid_ilb2
        $current_dfi_build_number_ilb2 = split(split($resource_uid_ilb2, '-')[-2], 'b')[1]
        #GET previous DFI's HREF  for ILB3 and save to deployment's tags
        call servers_utilities.get_server_resource_image_href(@server3_ilb) retrieve $current_image_href_ilb3, $resource_uid_ilb3
        $current_dfi_build_number_ilb3 = split(split($resource_uid_ilb3, '-')[-2], 'b')[1]
    end
    $ilb_input =
    {
        'Dummy' => 'text:dummy'
    }
    if to_s($param_ha_ilb) == "True"
        call rightscripts_utilities.run_rightscript_by_name(@server_ilb.current_instance(), 'Validate_Health_Check_WFMHA_rahul_gupta_r9int_1', $ilb_input)
        call rightscripts_utilities.run_rightscript_by_name(@server2_ilb.current_instance(), 'Validate_Health_Check_WFMHA_rahul_gupta_r9int_1', $ilb_input)
        call rightscripts_utilities.run_rightscript_by_name(@server3_ilb.current_instance(), 'Validate_Health_Check_WFMHA_rahul_gupta_r9int_1', $ilb_input)
    else
        call rightscripts_utilities.run_rightscript_by_name(@server_ilb.current_instance(), 'Validate_Health_Check_WFMHA_rahul_gupta_r9int_1', $ilb_input)
    end
     if to_s($param_ha_ilb) == "True"
        $prev_image_href_ilb2 = $inputs['PREVIOUS_IMAGE_HREF_ILB2']
        $prev_docker_image_level_ilb2 = $inputs['PREVIOUS_DOCKER_IMAGE_LEVEL_ILB2']
        $prev_dfi_build_number_ilb2 = $inputs['PREVIOUS_DFI_BUILD_NUMBER_ILB2']
        $prev_image_href_ilb3 = $inputs['PREVIOUS_IMAGE_HREF_ILB3']
        $prev_docker_image_level_ilb3 = $inputs['PREVIOUS_DOCKER_IMAGE_LEVEL_ILB3']
        $prev_dfi_build_number_ilb3 = $inputs['PREVIOUS_DFI_BUILD_NUMBER_ILB3']
     end
     #Update HREF of previous image
     call config_generic.is_tag_exist('PREVIOUS_IMAGE_HREF') retrieve $is_exist
     if $is_exist
        @ilb_instance = @server_ilb.current_instance()
        $current_instance_json = to_object(@ilb_instance)
        $csa = $current_instance_json['details'][0]['cloud_specific_attributes']      
        @server_ilb.next_instance().update(instance: { "image_href": $prev_image_href, "cloud_specific_attributes": $csa})
     end
     if to_s($param_ha_ilb) == "True"
        #Update HREF of previous image ILB2
        call config_generic.is_tag_exist('PREVIOUS_IMAGE_HREF_ILB2') retrieve $is_exist
        if $is_exist
            @ilb2_instance = @server2_ilb.current_instance()
            $current_instance_json_ilb2 = to_object(@ilb2_instance)
            $csa_ilb2 = $current_instance_json_ilb2['details'][0]['cloud_specific_attributes']      
            @server2_ilb.next_instance().update(instance: { "image_href": $prev_image_href_ilb2, "cloud_specific_attributes": $csa_ilb2})
        end
        #Update HREF of previous image ILB3
        call config_generic.is_tag_exist('PREVIOUS_IMAGE_HREF_ILB3') retrieve $is_exist
        if $is_exist
            @ilb3_instance = @server3_ilb.current_instance()
            $current_instance_json_ilb3 = to_object(@ilb3_instance)
            $csa_ilb3 = $current_instance_json_ilb3['details'][0]['cloud_specific_attributes']      
            @server3_ilb.next_instance().update(instance: { "image_href": $prev_image_href_ilb3, "cloud_specific_attributes": $csa_ilb3})
        end
     end
     $docker_images = $inputs['DOCKER_IMAGES']
     $current_docker_image_level = split($docker_images, ':')[1]
     $docker_images = gsub($docker_images, ":" + $current_docker_image_level, ":" + $prev_docker_image_level)
     $old_docker_image =   { 'DOCKER_IMAGES'  => join(['text:',$docker_images]) }
     @server_ilb.next_instance().multi_update_inputs(inputs: $old_docker_image)
     $build_level_ilb = $inputs['BUILD_LEVEL_ILB']
     $label_tags = $inputs['LABEL_TAGS']
     $label_tags  = sub($label_tags,"/ilb_release_version=.*?,/",join(["ilb_release_version=",$build_level_ilb,"d",$prev_docker_image_level,","]))
     $input_label_tags = {
        'LABEL_TAGS' => join(['text:', $label_tags])
     }
     @server_ilb.next_instance().multi_update_inputs(inputs: $input_label_tags)
     $current_docker_image_level_ilb1 = $inputs['CURRENT_DOCKER_IMAGE_ILB1']
     $current_docker_image_level_ilb2 = $inputs['CURRENT_DOCKER_IMAGE_ILB2']
     $current_docker_image_level_ilb3 = $inputs['CURRENT_DOCKER_IMAGE_ILB3']
     if $current_docker_image_level_ilb1 == "" || $current_docker_image_level_ilb1 == "null" || $current_docker_image_level_ilb1 == null || size($current_docker_image_level_ilb1) == 0
         $current_docker_image_level_ilb1 = $current_docker_image_level
     end
     if $current_docker_image_level_ilb2 == "" || $current_docker_image_level_ilb2 == "null" || $current_docker_image_level_ilb2 == null || size($current_docker_image_level_ilb2) == 0
         $current_docker_image_level_ilb2 = $current_docker_image_level
     end
     if $current_docker_image_level_ilb3 == "" || $current_docker_image_level_ilb3 == "null" || $current_docker_image_level_ilb3 == null || size($current_docker_image_level_ilb3) == 0
         $current_docker_image_level_ilb3 = $current_docker_image_level
     end
     $tags = {}
     $tags['RSINPUT_DOCKER_IMAGES'] = to_s($docker_images)
     $tags['RSINPUT_LABEL_TAGS'] = $label_tags
     #Write previous image HREF  and build number to deployment tags
     $tags['RSINPUT_PREVIOUS_IMAGE_HREF'] = to_s($current_image_href)
     $tags['RSINPUT_PREVIOUS_DFI_BUILD_NUMBER'] = to_s($current_dfi_build_number)
     $tags['RSINPUT_PREVIOUS_DOCKER_IMAGE_LEVEL'] = to_s($current_docker_image_level)
     call tags_utilities.apply_tags($tags, @@deployment)
     if to_s($param_ha_ilb) == "True"
        $ilb2_started = all?(@server2_ilb.state[], "operational")
        $ilb3_started = all?(@server3_ilb.state[], "operational")
        if !$ilb2_started
            raise "Server ILB 2 is not operational. Aborting the operation. Please make sure all Server ILBs should be Operational ..."
        end
        if !$ilb3_started
            raise "Server ILB 3 is not operational. Aborting the operation. Please make sure all Server ILBs should be Operational ..."
        end
        if $current_dfi_build_number == $prev_dfi_build_number && $prev_docker_image_level == $current_docker_image_level_ilb1
            call rightscripts_utilities.run_rightscript_by_name(@server_ilb.current_instance(), 'ILB_HA_Register_CNAME_rahul_gupta_r9int_1', $ilb_input)
            call rightscripts_utilities.run_rightscript_by_name(@server_ilb.current_instance(), 'Validate_Live_ILB_rahul_gupta_r9int_1', $ilb_input)
            sleep(100)
        else 
            call rightscripts_utilities.run_rightscript_by_name(@server2_ilb.current_instance(), 'ILB_HA_Register_CNAME_rahul_gupta_r9int_1', $ilb_input)
            call rightscripts_utilities.run_rightscript_by_name(@server2_ilb.current_instance(), 'Validate_Live_ILB_rahul_gupta_r9int_1', $ilb_input)
            sleep(100)
        end
     end
    if $current_dfi_build_number != $prev_dfi_build_number || $prev_docker_image_level != $current_docker_image_level_ilb1
      sub task_label: "Terminate ILB", on_error: handle_error() do
        concurrent on_error: handle_error() do
          @server_ilb.terminate()
          call servers_utilities.poll_instance_state_server_resource_terminate(@server_ilb)
        end
      end
      sub task_label: "Launch ILB", on_error: handle_error() do
        concurrent on_error: handle_error() do
         @server_ilb.launch()
         call servers_utilities.poll_instance_state_server_resource(@server_ilb)
       end
      end
       $ilb_input =
       {
       'DUMMY'  => 'text:dummy'
       }
      $rollback_ilb_started = all?(@server_ilb.state[], "operational")
      if $rollback_ilb_started
          call rightscripts_utilities.run_rightscript_by_name(@server_ilb.current_instance(), 'Validate_Health_Check_WFMHA_rahul_gupta_r9int_1', $ilb_input)
          sleep(100)
          call rightscripts_utilities.run_rightscript_by_name(@server_ilb.current_instance(), 'ILB_HA_Register_CNAME_rahul_gupta_r9int_1', $ilb_input)
          call rightscripts_utilities.run_rightscript_by_name(@server_ilb.current_instance(), 'Validate_Live_ILB_rahul_gupta_r9int_1', $ilb_input)
          $tags = {}
          $tags['RSINPUT_CURRENT_DOCKER_IMAGE_ILB1'] = to_s($prev_docker_image_level)
          call tags_utilities.apply_tags($tags, @@deployment)
      end
    end
    if to_s($param_ha_ilb) == "True"
        $docker_images = $inputs['DOCKER_IMAGES_ILB2']
        $current_docker_image_level = split($docker_images, ':')[1]
        $docker_images = gsub($docker_images, ":" + $current_docker_image_level, ":" + $prev_docker_image_level_ilb2)
        $old_docker_image =   { 'DOCKER_IMAGES'  => join(['text:',$docker_images]) }
        @server2_ilb.next_instance().multi_update_inputs(inputs: $old_docker_image)
        @server2_ilb.next_instance().multi_update_inputs(inputs: $input_label_tags)
        $tags = {}
        $tags['RSINPUT_DOCKER_IMAGES_ILB2'] = to_s($docker_images)
        call tags_utilities.apply_tags($tags, @@deployment)
        $docker_images = $inputs['DOCKER_IMAGES_ILB3']
        $current_docker_image_level = split($docker_images, ':')[1]
        $docker_images = gsub($docker_images, ":" + $current_docker_image_level, ":" + $prev_docker_image_level_ilb3)
        $old_docker_image =   { 'DOCKER_IMAGES'  => join(['text:',$docker_images]) }
        @server3_ilb.next_instance().multi_update_inputs(inputs: $old_docker_image)
        @server3_ilb.next_instance().multi_update_inputs(inputs: $input_label_tags)
        $tags = {}
        $tags['RSINPUT_DOCKER_IMAGES_ILB3'] = to_s($docker_images)
        call tags_utilities.apply_tags($tags, @@deployment)
        if $current_dfi_build_number_ilb2 != $prev_dfi_build_number_ilb2 || $prev_docker_image_level_ilb2 != $current_docker_image_level_ilb2
            sub task_label: "Terminate ILB 2", on_error: handle_error() do
                concurrent on_error: handle_error() do
                  @server2_ilb.terminate()
                  call servers_utilities.poll_instance_state_server_resource_terminate(@server2_ilb)
                end
              end
              sub task_label: "Launch ILB 2", on_error: handle_error() do
                concurrent on_error: handle_error() do
                 @server2_ilb.launch()
                 call servers_utilities.poll_instance_state_server_resource(@server2_ilb)
               end
              end
               $ilb_input =
               {
               'DUMMY'  => 'text:dummy'
               }
              $rollback_ilb2_started = all?(@server2_ilb.state[], "operational")
              if $rollback_ilb2_started
                  call rightscripts_utilities.run_rightscript_by_name(@server2_ilb.current_instance(), 'Validate_Health_Check_WFMHA_rahul_gupta_r9int_1', $ilb_input)
                  $tags = {}
                  $tags['RSINPUT_CURRENT_DOCKER_IMAGE_ILB2'] = to_s($prev_docker_image_level_ilb2)
                  $tags['RSINPUT_PREVIOUS_DFI_BUILD_NUMBER_ILB2'] = to_s($current_dfi_build_number_ilb2)
                  $tags['RSINPUT_PREVIOUS_DOCKER_IMAGE_LEVEL_ILB2'] = to_s($current_docker_image_level_ilb2)
                  call tags_utilities.apply_tags($tags, @@deployment)
              end
        end
        if $current_dfi_build_number_ilb3 != $prev_dfi_build_number_ilb3 || $prev_docker_image_level_ilb3 != $current_docker_image_level_ilb3
            sub task_label: "Terminate ILB 3", on_error: handle_error() do
                concurrent on_error: handle_error() do
                  @server3_ilb.terminate()
                  call servers_utilities.poll_instance_state_server_resource_terminate(@server3_ilb)
                end
              end
              sub task_label: "Launch ILB 2", on_error: handle_error() do
                concurrent on_error: handle_error() do
                 @server3_ilb.launch()
                 call servers_utilities.poll_instance_state_server_resource(@server3_ilb)
               end
              end
               $ilb_input =
               {
               'DUMMY'  => 'text:dummy'
               }
              $rollback_ilb3_started = all?(@server3_ilb.state[], "operational")
              if $rollback_ilb3_started
                  call rightscripts_utilities.run_rightscript_by_name(@server3_ilb.current_instance(), 'Validate_Health_Check_WFMHA_rahul_gupta_r9int_1', $ilb_input)
                  $tags = {}
                  $tags['RSINPUT_CURRENT_DOCKER_IMAGE_ILB3'] = to_s($prev_docker_image_level_ilb3)
                  $tags['RSINPUT_PREVIOUS_DFI_BUILD_NUMBER_ILB3'] = to_s($current_dfi_build_number_ilb3)
                  $tags['RSINPUT_PREVIOUS_DOCKER_IMAGE_LEVEL_ILB3'] = to_s($current_docker_image_level_ilb3)
                  call tags_utilities.apply_tags($tags, @@deployment)
              end
        end
    end
end


#======================================================================================================


  operation 'custom_action_set_label' do
    definition 'set_label'
  end
  parameter "param_tag_label_state" do
    allowed_values "ready", "live", "test" ,"readyToTerminate", "keep"
    description "select tag and label to apply i.e ready, live, test, readyToTerminate, keep"
    label "select tag and lable to apply i.e ready, live, test, readyToTerminate, keep"
    type "list"
  end
  define set_label($param_tag_label_state) do
      sub on_error:handle_error() do
        call config_generic.production_get_deployment_inputs() retrieve $inputs
        call log_utilities.audit_log('LABEL_TAGS', to_s($inputs['LABEL_TAGS']))
        $deployment_json = to_object(@@deployment)
        $deployment_href = $deployment_json['hrefs'][0]
        $input_tag = join(['kronos:', 'deployment_state'])
        $is_exist = false
        $tags_response = rs_cm.tags.by_resource(resource_hrefs: $deployment_json['hrefs'])
        $tags = first(first($tags_response))["tags"]
        foreach $raw_tag in $tags do
          $tag =$raw_tag['name']
          if include?($tag, $input_tag)
            $is_exist = true
          end
        end
        if $is_exist
          $tags_to_add = []
          $tags_to_add << join(["kronos:", "deployment_state", "=", $param_tag_label_state])
          rs_cm.tags.multi_add( resource_hrefs: [@@deployment], tags: $tags_to_add )
        end
        $label_tag_str = ""
        $label_tag_arr = split(to_s($inputs['LABEL_TAGS']), ',')
        foreach $item in $label_tag_arr do
          if $item == "state=ready" | $item == "state=live" | $item == "state=readyToTerminate" | $item == "state=keep" | $item == "state=test"
            #skip to add state tag value
          else
            $label_tag_str = join([$label_tag_str, $item, ","])
          end
        end
        $label_tag_str = join([$label_tag_str, "state=",$param_tag_label_state])
        $label_tag_input = { 'LABEL_TAGS' => join(['text:', to_s($label_tag_str)]) }
        $script_inputs=
        {
          'LABEL_TAGS' => join(['text:',"state=",$param_tag_label_state]),
          "DEPLOYMENT_HREF" => join(["text:", $deployment_href])
        }
        if size(@@deployment.servers()) > 0
          concurrent foreach @server in @@deployment.servers() on_rollback:abort_task() do
              if @server.state == "operational" 
                @server.current_instance().multi_update_inputs(inputs: $label_tag_input)
                @server.next_instance().multi_update_inputs(inputs: $label_tag_input)
                call rightscripts_utilities.run_rightscript_by_name(@server.current_instance(), 'Tag_Label_Instance_rahul_gupta_r9int_1', $script_inputs)
              end
          end
        end
        if size(@@deployment.server_arrays()) > 0 
          concurrent foreach @server_array in @@deployment.server_arrays() on_rollback:abort_task() do
            @server_array.next_instance().multi_update_inputs(inputs: $label_tag_input)
            if to_n(@server_array.instances_count) > 0 
              @server_array.current_instances().multi_update_inputs(inputs: $label_tag_input)
              concurrent foreach @instance in @server_array.current_instances() on_rollback:abort_task() do
                if @instance.state == "operational" 
                  call rightscripts_utilities.run_rightscript_by_name(@instance, 'Tag_Label_Instance_rahul_gupta_r9int_1', $script_inputs)
                end
              end   
            end
          end 
        end
      end
  end


parameter "param_enable_wfm_startup" do
   allowed_values "TRUE","FALSE"
   description "Default value is 'FALSE'.Select 'TRUE' to allow failed tenant during WFM startup"
   label "Enable/Disable WFM Startup Flag"
   default "FALSE"
   type "list"
end

operation 'allow_failed_tenant_at_wfm_startup' do
  definition 'allow_failed_tenant_at_wfm_startup'
end
define allow_failed_tenant_at_wfm_startup(@server_array_bck, $param_enable_wfm_startup) return @server_array_bck, $param_enable_wfm_startup do
 call config_generic.production_get_deployment_inputs() retrieve $inputs
   
     $input = 
  { 
    'DB_NAME'        => join(['text:', split($inputs['DB_NAME'], ';')[0]]),
    'DB_PASSWORD'    => join(['cred:', split($inputs['DB_PASSWORD'], ';')[0]]),
    'DB_SERVER_NAME' => join(['text:', split($inputs['DB_SERVER_NAME'], ';')[0]]),
    'DB_USERNAME'    => join(['cred:', split($inputs['DB_USERNAME'], ';')[0]]),
    'IS_FEATURE_FLAG_ENABLE'    => join(['text:', downcase($param_enable_wfm_startup)])
  }
  call rightscripts_utilities.run_rightscript_by_name( @server_array_bck.current_instances()[0], 'WFMStartup_FeatureFlag_DBPatch_rahul_gupta_r9int_1', $input)
end

operation 'test_action_pass' do
  definition 'test_action_pass'
end
define test_action_pass(@server_array_bck) do
  $input = { 'foo'=> 'text:bar' }
  call rightscripts_utilities.run_rightscript_by_name(@server_array_bck.current_instances()[0], 'test_action_pass_rahul_gupta_r9int_1', $input)
end
operation 'test_action_fail' do
  definition 'test_action_fail'
end
define test_action_fail(@server_array_bck) do
  $input = { 'foo'=> 'text:bar' }
  call rightscripts_utilities.run_rightscript_by_name(@server_array_bck.current_instances()[0], 'test_action_fail_rahul_gupta_r9int_1', $input)
end


operation 'check_rabbitmq_vhost' do
  definition 'check_rabbitmq_vhost'
end
define check_rabbitmq_vhost(@server_array_bck) return @server_array_bck do
  $script_inputs =
  {
    "test"  => "text:dummy"
  }
  call rightscripts_utilities.run_rightscript_by_name(@server_array_bck.current_instances()[0], 'rs_check_rabbitmq_vhost_rahul_gupta_r9int_1', $script_inputs)
end

define getResourcehref($input_json,$resource_data) return $input_json do 
$field_names = keys($resource_data)
  foreach $field in $field_names do
    $field_name = join([$field, '_href'])
    $field_value = $resource_data[$field]
    $resource_type_name = join([$field, 's'])
    if type($field_value) == 'array'
      $results = []
      $field_name = join([$field_name, 's'])
      foreach $value in $field_value do
        @find_result = first(find($resource_type_name, $value))
        $results << @find_result.href
      end
      $input_json['fields'][$field_name] = $results
    else
      @find_result = first(find($resource_type_name, $field_value))
      $input_json['fields'][$field_name] = @find_result.href
    end
  end
end
define launch(@server_array_api, @server_array_udm, @server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_fnt, @server_ilb, @server2_ilb, @server3_ilb, $param_atmcld_internal_use,$param_atmcld_name,$param_atmcld_proxy_host,$param_atmcld_url,$param_auth_url,$param_auth_url_idp,$param_is_icu,$param_is_rolling_upgrade,$param_build_level_backend,$param_build_level_dfi,$param_build_level_frontend,$param_build_number_backend,$param_build_number_dfi,$param_build_number_frontend,$param_cluster_id,$param_datastx_analytic_nodes,$param_forecasting_cassandra_nodes,$param_datastx_batch_cluster,$param_datastx_realtime_cluster,$param_bcc_cluster_name,$param_bcc_cassandra_cluster_nodes,$param_dbserver_and_dbname,$param_skpi_dbserver_and_dbname,$param_deployment_datacenter,$param_deployment_purpose,$param_deployment_region,$param_deployment_size,$param_boot_disk_size,$param_deployment_type,$param_devportal_fqdn,$param_docker_build_level_ilb,$param_build_number_ilb,$param_elb_fqdn,$param_env_rabbit_host,$param_environment_id,$param_environment_name,$param_gateway_host,$param_help_url,$param_idp_elb_url,$param_instance_id,$param_integration_dbserver_and_dbname,$param_integration_hub_account,$param_openam_idp_proxy_url,$param_rabbit_host,$param_redis_cluster,$param_redis_hosts,$param_redis_master,$param_reporting_designer_url,$param_reporting_host,$param_sa_num,$param_scanning_service_enabled,$param_scanning_service_url_and_port,$param_sdm_host,$param_ecs_host,$param_hca_url,$param_smtp_enable,$param_stack_id,$param_subnet,$param_tms_url,$param_tr_host,$param_udm_url,$param_ums_host,$param_use_vanity_url,$param_wfladmin_url,$param_wflapp_url,$param_das_prv_url,$param_dsaas_url,$param_enable_monitoring,$param_ha_ilb,$param_pes_prv_url,$param_wit_host,$param_pge_url,$param_astra_db_name,$param_astra_zdm_nodes, $map_clouds, $map_security_tags, $map_default_locations, $map_tf_choice, $auth_url_default, $auth_url_idp_default, $openam_idp_proxy_url_default, $redis_master_default, $redis_hosts_default, $rabbit_host_default,$rabbit_env_host_default, $udm_url_default, $ums_host_default, $wflapp_url_default, $wfladmin_url_default, $atmcld_name_default, $atmcld_url_default, $reporting_host_default, $reporting_designer_url_default, $datastx_cluster_default, $datastx_batch_cluster_default, $datastx_realtime_cluster_default, $datastx_analytic_nodes_default, $datastx_master_default, $datastx_nodes_default, $gateway_host_default, $gateway_url_default, $help_url_default, $sdm_host_default, $ecs_host_default, $tms_url_default, $devportal_fqdn_default, $hca_url_default, $fcs_url_default, $das_prv_url_default, $pes_prv_url_default, $dsaas_url_default, $wit_host_default, $pge_url_default) return @server_array_api, @server_array_udm, @server_array_bgp, @server_array_bgi, @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_fnt, @server_ilb, @server2_ilb, @server3_ilb, $local_atmcld_internal_use,$local_atmcld_name,$local_atmcld_proxy_host,$local_atmcld_url,$local_auth_host,$local_build_level_backend,$local_build_level_dfi,$local_build_level_frontend,$local_build_number_backend,$local_build_number_dfi,$local_build_number_frontend,$local_cname_elb,$local_cname_idp_elb,$local_cname_ilb_be,$local_cname_ilb_fe,$local_datacenter,$local_datastx_analytic_nodes,$local_forecasting_cassandra_nodes,$local_datastx_batch_cluster,$local_datastx_eventengine,$local_datastx_realtime_cluster,$local_devportal_fqdn,$local_docker_build_level_ilb,$local_build_number_ilb,$local_env_rabbit_host,$local_fqdn_elb,$local_fqdn_idp_elb,$local_ha_fqdn_ilb1,$local_ha_fqdn_ilb2,$local_ha_fqdn_ilb3,$local_fqdn_ilb_fe,$local_gateway_url,$local_integration_hub_account,$local_openam_idp_proxy_url,$local_private_ip_ilb_be,$local_private_ip_ilb_fe,$local_private_ip_server1,$local_private_ip_server2,$local_rabbit_host,$local_redis_cluster,$local_redis_hosts,$local_redis_master,$local_reporting_designer_url,$local_reporting_host,$local_scanning_service_port,$local_scanning_service_url,$local_sdm_host,$local_smtp_fqdn,$local_subnetwork,$local_tms_url,$local_tr_host,$local_udm_url,$local_ums_host,$local_ecs_host,$local_hca_url,$local_usage,$local_wfladmin_url,$local_wflapp_url,$local_bgp_fqdn,$local_das_prv_url,$local_dsaas_url,$local_pes_prv_url,$local_pge_url do
  $param_owner = "Self"
  $param_cloud = 'Google'
  $param_service_account = ''
  $param_env = cred("WFM_ENV_NAME")
  $param_org = cred("WFM_ORG_NAME")
  $size_map = { 'wfm_backend-large' => { 'instance_type' => 'n2-highmem-8', 'volume_size' => '200' }, 'wfm_backend-medium' => { 'instance_type' => 'n2-highmem-8', 'volume_size' => '100' }, 'wfm_backend-small' => { 'instance_type' => 'n2-standard-4', 'volume_size' => '50' }, 'wfm_bgp-large' => { 'instance_type' => 'n2-highmem-8', 'volume_size' => '200' }, 'wfm_bgp-medium' => { 'instance_type' => 'n2-highmem-8', 'volume_size' => '100' }, 'wfm_bgp-small' => { 'instance_type' => 'n2-standard-4', 'volume_size' => '50' }, 'wfm_frontend-large' => { 'instance_type' => 'n2-highmem-4', 'volume_size' => '200' }, 'wfm_frontend-medium' => { 'instance_type' => 'n2-highmem-4', 'volume_size' => '100' }, 'wfm_frontend-small' => { 'instance_type' => 'n2-highmem-2', 'volume_size' => '50' } }


  sub on_error: handle_error() do

    $time= to_s(to_n(now()))
    $time= $time[1,size($time)-1]
    $cat_version= split("dummy_rahul_gupta_r9int_1", "_")[1]

    concurrent return $name_data_fnt, $env_code_fnt, $network_configuration_map_fnt, $subnet_code_fnt, $continent_code_fnt, $selected_region_sector_fnt, $LDAP_OPENDJ_ENDPOINT_fnt, $ldap_prefix_fnt, $ldap_app_name_fnt,$param_service_account, $param_build_number_backend, $param_build_level_backend, $image_href_backend, $image_name_backend, $param_build_number_frontend, $param_build_level_frontend, $image_href_frontend, $image_name_frontend, $name_data_bck, $name_data_tmk, $name_data_sch, $name_data_fnt, $name_data_bgp, $name_data_bgi, $name_data_api, $name_data_udm, $name_data_ilb, $env_code, $network_configuration_map, $subnet_code, $continent_code, $selected_region_sector, $LDAP_OPENDJ_ENDPOINT, $ldap_prefix, $ldap_app_name, $unique_zones, $max_server_array_size, $all_zones do
      sub task_label: 'Retrieving backend image', on_error: handle_error() do
        $build_level = ""
        if $param_build_number_backend != 'latest'
          call google_cloud.get_build_level_and_number($param_build_number_backend) retrieve $local_build_level_backend,$local_build_number_backend
          if $local_build_level_backend != "" && $local_build_level_backend != null
            $param_build_number_backend = $local_build_number_backend
            $build_level = join([$local_build_level_backend,"tested"])
            $param_build_level_backend = $local_build_level_backend
          else
            call builds_wfm_parameters.get_wfm_backend_build_level_branch($param_build_level_backend) retrieve $build_level
          end
        else
          call builds_wfm_parameters.get_wfm_backend_build_level_branch($param_build_level_backend) retrieve $build_level
        end
        call google_cloud.get_google_image("wfm-backend-", $param_build_number_backend, $build_level) retrieve $image_href_backend, $image_name_backend
      end
      sub task_label: 'Retrieving frontend image', on_error: handle_error() do
        $build_level = ""
        if $param_build_number_frontend != 'latest' 
          call google_cloud.get_build_level_and_number($param_build_number_frontend) retrieve $local_build_level_frontend,$local_build_number_frontend
          if $local_build_level_frontend != "" && $local_build_level_frontend != null
            $param_build_number_frontend = $local_build_number_frontend
            $build_level = join([$local_build_level_frontend,"tested"])
            $param_build_level_frontend = $local_build_level_frontend
          else
            call builds_wfm_parameters.get_wfm_frontend_build_level_branch($param_build_level_frontend) retrieve $build_level
          end
        else
          call builds_wfm_parameters.get_wfm_frontend_build_level_branch($param_build_level_frontend) retrieve $build_level
        end
        call google_cloud.get_google_image("wfm-frontend-", $param_build_number_frontend, $build_level) retrieve $image_href_frontend, $image_name_frontend
      end
      sub task_label: 'Retrieve name data for bck', on_error: handle_error() do
        call config_inputs.production_name_data($name_data_bck, 'keng', $param_stack_id, $param_subnet, $param_environment_name, $param_environment_id, "wfm", $param_cluster_id, "bck", '', $param_instance_id, $param_deployment_purpose, $time) retrieve $name_data_bck, $env_code_bck, $network_configuration_map_bck , $subnet_code_bck, $continent_code_bck, $selected_region_sector_bck, $LDAP_OPENDJ_ENDPOINT_bck, $ldap_prefix_bck, $ldap_app_name_bck
      end
      sub task_label: 'Retrieve name data for fnt', on_error: handle_error() do
        call config_inputs.production_name_data($name_data_fnt, 'keng', $param_stack_id, $param_subnet, $param_environment_name, $param_environment_id, "wfm", $param_cluster_id, "fnt", '', $param_instance_id, $param_deployment_purpose, $time) retrieve $name_data_fnt, $env_code_fnt, $network_configuration_map_fnt, $subnet_code_fnt, $continent_code_fnt, $selected_region_sector_fnt, $LDAP_OPENDJ_ENDPOINT_fnt, $ldap_prefix_fnt, $ldap_app_name_fnt
      end
      sub task_label: 'Retrieve name data for ilb', on_error: handle_error() do
        call config_inputs.production_name_data($name_data_ilb, 'keng', $param_stack_id, $param_subnet, $param_environment_name, $param_environment_id, "wfm", $param_cluster_id, "ilb", '', $param_instance_id, $param_deployment_purpose, $time) retrieve $name_data_ilb, $env_code, $network_configuration_map, $subnet_code, $continent_code, $selected_region_sector, $LDAP_OPENDJ_ENDPOINT, $ldap_prefix, $ldap_app_name
      end
      sub task_label: 'Get zones based on deployment datacenter', on_error: handle_error() do
        call config_generic.getzones() retrieve $unique_zones, $max_server_array_size, $all_zones
      end    
    end

    concurrent return $cred_full_names, $gce_proj_id_docker, $kpitimeseries_emp_sync_enabled, $ia_dataview_issupported, $out_instance_tags, @server_ilb, @server2_ilb, @server3_ilb, $instance_tags_backend, $instance_tags_tmk, $instance_tags_sch, $instance_tags_api, $instance_tags_udm, $instance_tags_bgp, $instance_tags_bgi, $instance_tags_ilb, $instance_tags_frontend do
      sub task_label: 'Retrieving Credentials of an environment', on_error: handle_error() do
        $cred_names = [
          'GTM_KEY',
          'WFM_RABBITMQ_PWD',
          'TP_USER_PASS',
          'UMS_USER_PASS',
          'IHUB_ENCRYP_KEY',
          'MOBILE_PUSH_FCM_SENDERID',
          'MOBILE_PUSH_FCM_SERVICE_ACCT_KEYFILE',
          'HCA_RABBITMQ_USER',
          'HCA_RABBITMQ_PASS',
          'SEARCH_HELP_INFO',
          'AMC_USER',
          'AMC_USER_PASSWORD',
          'QUALTRICS_SURVEY_INFO',
          'KPI_SYSTEM_USER_USERNAME',
          'KPI_SYSTEM_USER_PASS',
          'KPI_ANALYTICDATA_USER_USERNAME',
          'KPI_ANALYTICDATA_USER_PASS',
          'RPT_SYSTEM_PASS',
          'RPT_PG_PASS',
          'RABBITMQ_USER',
          'RABBITMQ_PASSWD',
          'SUPER_USER_PPAS',
          'SUPER_USER_PWD_PPAS',
          'APIG_ADMIN_EMAIL',
          'APIG_ADMIN_PASSWORD',
          'UPGRADE_USER',
          'UPGRADE_USER_PWD',
          'AUTH_TEMPLATE_UPGRADE_USER_WFM',
          'AUTH_TEMPLATE_UPGRADE_USER_PWD_WFM',
          'CCF_DSE_WFM_USER',
          'CCF_DSE_WFM_PASS',
          'CCF_RABBITMQ_CREDS',
          'THREAD_POOL_SIZE',
          'TENANT_FAILURE_THRESHOLD',
          'OPENAM_KEY_PASS',
          'OPENAM_ADMIN_PASS',
          'OSCARCLARK_PASS',
          'IA_CONFIG',
          'GENERIC_SERVICE_ACCOUNT',
          'WFM_DB_USER',
          'WFM_DB_PASS',
          'PPAS_ENVINTEGRATIONDB_USER_WFM',
          'PPAS_ENVINTEGRATIONDB_PWD_WFM',
          'AUTH_IDP_TMS_APIUSER_USER_WFM',
          'AUTH_IDP_TMS_APIUSER_PWD_WFM',
          'AUTH_TPUSER_USER_WFM',
          'AUTH_TPUSER_PWD_WFM',
          'AUTH_IDP_CALLBACKUSER_USER_TMS',
          'AUTH_IDP_CALLBACKUSER_PWD_TMS',
          'ENABLE_CONCURRENT_SESSIONS_LIMIT',
          'PRO_INTEGRATION_JWKS_URI',
          'AUTH_DSSMSA_USER_WFM',
          'AUTH_DSSMSA_USER_PWD_WFM',
          'AUTH_WFLAPP_TPUSER_WFM',
          'AUTH_WFLAPP_TPUSER_PWD_WFM',
          'AUTH_WFLADMIN_TPUSER_WFM',
          'AUTH_WFLADMIN_TPUSER_PWD_WFM',
          'AUTH_RPT_USER_WFM',
          'AUTH_RPT_USER_PWD_WFM',
          'PPAS_USER_WFM',
          'PPAS_USER_PWD_WFM',
          'PPAS_USER_SKPI',
          'PPAS_USER_PWD_SKPI',
          'FCS_USER_WFM',
          'FCS_USER_PWD_WFM'
        ]
        call credentials_utilities.get_credential_full_names($cred_names, $name_data_bck, $param_deployment_type) retrieve $cred_full_names
        call credentials_utilities.getCredentialValue('GOOGLE_PROJ_ID_DOCKER') retrieve $gce_proj_id_docker
      end

      sub task_label: 'Prepare label tags', on_error: handle_error() do
        call config_generic.prep_tag_config($param_instance_id,$param_cluster_id,$param_build_number,"wfm","bck",'Yes','No','No',$param_deployment_purpose,$param_deployment_type, $name_data_bck) retrieve $instance_tags_label
        $instance_tags_label["state"] = 'ready'
        $instance_tags_label["frontend_release_version"] = join([gsub($param_build_level_frontend,".","d"),"d",$param_build_number_frontend])
        $instance_tags_label["backend_release_version"] = join([gsub($param_build_level_backend,".","d"),"d",$param_build_number_backend])
        $instance_tags_label["ilb_release_version"] = join([gsub($param_docker_build_level_ilb,".","d"),"d",$param_build_number_ilb])
        call config_generic.config_instance_tags($instance_tags_label, $out_instance_tags) retrieve $out_instance_tags
      end
      sub task_label: 'Backend ILB setup launch and prelaunch', on_error: handle_error() do
        $name_data_ilb = $name_data_ilb
    # Translate the image type to something legitimate. This unfortunately needs to be a separate step.
    call builds_parameters.get_default_build_level_branch($param_build_level_dfi) retrieve $build_level_dfi
    call google_cloud.get_google_image("docker-foundation-image", $param_build_number_dfi, $build_level_dfi) retrieve  $image_href_ilb, $image_number_ilb
    $name_data_ilb["service_name"] = "wfm-bck"
    $name_data_ilb["subfunction_name"] = join(["ilb", '-', $param_cluster_id])
    # Are we an instance? If so, we need to add in the number
    if $param_deployment_type == "Instance"
      $name_data_ilb["ins_id"]= $param_instance_id
    end
    # placeholder for getting some data back in macro below
    $resource_data_ilb_i =
    {
      "dummy_value" => "dummy_value"
    }
    call config_generic.getzones() retrieve $unique_zones, $max_server_array_size, $all_zones
    $zone_string = ""
    $zone2_string = ""
    $zone3_string = ""
    $random_number = rand(14)
    if $random_number <= 4
      $zone_string = $unique_zones[0]  
      $zone2_string = $unique_zones[1]
      $zone3_string = $unique_zones[2]
    elsif $random_number >= 5 && $random_number < 10
      $zone_string = $unique_zones[1]
      $zone2_string = $unique_zones[2]
      $zone3_string = $unique_zones[0]
    else
      $zone_string = $unique_zones[2]
      $zone2_string = $unique_zones[0]
      $zone3_string = $unique_zones[1]
    end
    # Setup configuration data map.
    $configuration_data_ilb_i =
    {
      "resource_data"   => $resource_data_ilb_i,
      "name_data"       => $name_data_ilb,
      "datacenter"      => $param_deployment_datacenter,
      "region"          => $param_deployment_region,
      "zone"            => $zone_string,
      "subnet"          => $param_subnet
    }
    $configuration_data_ilb_2 =
    {
      "resource_data"   => $resource_data_ilb_i,
      "name_data"       => $name_data_ilb,
      "datacenter"      => $param_deployment_datacenter,
      "region"          => $param_deployment_region,
      "zone"            => $zone2_string,
      "subnet"          => $param_subnet
    }
    $configuration_data_ilb_3 =
    {
      "resource_data"   => $resource_data_ilb_i,
      "name_data"       => $name_data_ilb,
      "datacenter"      => $param_deployment_datacenter,
      "region"          => $param_deployment_region,
      "zone"            => $zone3_string,
      "subnet"          => $param_subnet
    }
    concurrent return @server_ilb, @server2_ilb, @server3_ilb, $configuration_data_ilb_i, $configuration_data_ilb_2, $configuration_data_ilb_3 do
      sub task_label: 'Configuring json for ilb1', on_error: handle_error() do
        $json_ilb_i = to_object(@server_ilb)
        $temp_val = $configuration_data_ilb_i['datacenter']
  call locations_datacenters.get_datacenter_code($temp_val) retrieve $dc_code
  $temp_val = $configuration_data_ilb_i['region']
  call locations_regions.get_region_code($temp_val) retrieve $rg_code
  $dr_code = join([$dc_code, '-', $rg_code])
  # check if the last character is digit or not. If yes then remove it
  if to_n($dr_code[size($dr_code)-1]) != 0
    $region = $dr_code[0,size($dr_code)-2]
    $drz_code = join([$region, $configuration_data_ilb_i['zone']])
  else
    $drz_code = join([$dr_code, $configuration_data_ilb_i['zone']])
  end
  if $dc_code == 'asia'
    $network_region_qualifier = join(['-ase1 (', $dr_code, '1)'])
  else
    if to_n($dr_code[size($dr_code)-1]) != 0
     $network_region_qualifier = join([' (', $dr_code, ')'])
    else
    $network_region_qualifier = join([' (', $dr_code, '1)'])
    end
  end
  $configuration_data_ilb_i['resource_data']['datacenter'] = $drz_code
  # pass the key for location defaults as an input to rightscripts (v1-us-east1-b)
  $json_ilb_i['fields']['inputs']['LOC_DEF_KEY'] = join(['text:', 'v1', '-', $drz_code])
  $json_ilb_i['fields']['inputs']['LDAP_USER_PREFIX'] = join(['text:',$ldap_prefix])
  $json_ilb_i['fields']['inputs']['LDAP_APP_NAME'] = join(['text:',$ldap_app_name])
  $json_ilb_i['fields']['inputs']['OPENDJ_FQDN'] = join(['text:',$LDAP_OPENDJ_ENDPOINT])
  $json_ilb_i['fields']['inputs']['DT_CLASSIC_ENDPOINT'] = join(['text:',$classic])
  $json_ilb_i['fields']['inputs']['DT_ONEAGENT_ENDPOINT'] = join(['text:',$oneagent])
  $json_ilb_i['fields']['inputs']['LDAP_USER_PREFIX'] = join(['text:',$ldap_prefix])
  $json_ilb_i['fields']['inputs']['SPLUNK_CONFIG'] = 'cred:SPLUNK_CONF'
  $json_ilb_i['fields']['inputs']['DATACENTER_DETAILS'] = 'env:DATACENTER'
  $json_ilb_i['fields']['inputs']['SPLUNK_DEPLOYMENT_DETAILS'] = join(['text:','keng','_',$param_stack_id,',',$env_code,',',$param_environment_id])
  $json_ilb_i['fields']['inputs']['BUCKET_CONFIG'] = 'cred:BUCKET_CONFIG'
  $json_ilb_i['fields']['inputs']['BUCKET_CONFIG_NODES'] = join(['text:','keng','_',$param_stack_id,',',$env_code,',',$param_environment_id])
  $json_ilb_i['fields']['inputs']['ENABLE_ROLLBAR_API'] = join(['text:', $param_enable_rollbar_api])
  $json_ilb_i['fields']['inputs']['ROLLBAR_CLIENT_TOKEN']    = join(['cred:','ROLLBAR_CLIENT_TOKEN',':',upcase('keng'),'03','_DEV','01'])
  $json_ilb_i['fields']['inputs']['ROLLBAR_SERVER_TOKEN']    = join(['cred:','ROLLBAR_SERVER_TOKEN',':',upcase('keng'),'03','_DEV','01'])


        $json_ilb_i['fields']['inputs']['ENABLE_MONITORING']      = join(['text:', $param_enable_monitoring])
        @server_ilb = $json_ilb_i
      end
      sub task_label: 'Configuring json for ilb2', on_error: handle_error() do
        $json2_ilb_i = to_object(@server2_ilb)
        $temp_val = $configuration_data_ilb_2['datacenter']
  call locations_datacenters.get_datacenter_code($temp_val) retrieve $dc_code
  $temp_val = $configuration_data_ilb_2['region']
  call locations_regions.get_region_code($temp_val) retrieve $rg_code
  $dr_code = join([$dc_code, '-', $rg_code])
  # check if the last character is digit or not. If yes then remove it
  if to_n($dr_code[size($dr_code)-1]) != 0
    $region = $dr_code[0,size($dr_code)-2]
    $drz_code = join([$region, $configuration_data_ilb_2['zone']])
  else
    $drz_code = join([$dr_code, $configuration_data_ilb_2['zone']])
  end
  if $dc_code == 'asia'
    $network_region_qualifier = join(['-ase1 (', $dr_code, '1)'])
  else
    if to_n($dr_code[size($dr_code)-1]) != 0
     $network_region_qualifier = join([' (', $dr_code, ')'])
    else
    $network_region_qualifier = join([' (', $dr_code, '1)'])
    end
  end
  $configuration_data_ilb_2['resource_data']['datacenter'] = $drz_code
  # pass the key for location defaults as an input to rightscripts (v1-us-east1-b)
  $json2_ilb_i['fields']['inputs']['LOC_DEF_KEY'] = join(['text:', 'v1', '-', $drz_code])
  $json2_ilb_i['fields']['inputs']['LDAP_USER_PREFIX'] = join(['text:',$ldap_prefix])
  $json2_ilb_i['fields']['inputs']['LDAP_APP_NAME'] = join(['text:',$ldap_app_name])
  $json2_ilb_i['fields']['inputs']['OPENDJ_FQDN'] = join(['text:',$LDAP_OPENDJ_ENDPOINT])
  $json2_ilb_i['fields']['inputs']['DT_CLASSIC_ENDPOINT'] = join(['text:',$classic])
  $json2_ilb_i['fields']['inputs']['DT_ONEAGENT_ENDPOINT'] = join(['text:',$oneagent])
  $json2_ilb_i['fields']['inputs']['LDAP_USER_PREFIX'] = join(['text:',$ldap_prefix])
  $json2_ilb_i['fields']['inputs']['SPLUNK_CONFIG'] = 'cred:SPLUNK_CONF'
  $json2_ilb_i['fields']['inputs']['DATACENTER_DETAILS'] = 'env:DATACENTER'
  $json2_ilb_i['fields']['inputs']['SPLUNK_DEPLOYMENT_DETAILS'] = join(['text:','keng','_',$param_stack_id,',',$env_code,',',$param_environment_id])
  $json2_ilb_i['fields']['inputs']['BUCKET_CONFIG'] = 'cred:BUCKET_CONFIG'
  $json2_ilb_i['fields']['inputs']['BUCKET_CONFIG_NODES'] = join(['text:','keng','_',$param_stack_id,',',$env_code,',',$param_environment_id])
  $json2_ilb_i['fields']['inputs']['ENABLE_ROLLBAR_API'] = join(['text:', $param_enable_rollbar_api])
  $json2_ilb_i['fields']['inputs']['ROLLBAR_CLIENT_TOKEN']    = join(['cred:','ROLLBAR_CLIENT_TOKEN',':',upcase('keng'),'03','_DEV','01'])
  $json2_ilb_i['fields']['inputs']['ROLLBAR_SERVER_TOKEN']    = join(['cred:','ROLLBAR_SERVER_TOKEN',':',upcase('keng'),'03','_DEV','01'])


        $json2_ilb_i['fields']['inputs']['ENABLE_MONITORING']      = join(['text:', $param_enable_monitoring])
        @server2_ilb = $json2_ilb_i
      end
      sub task_label: 'Configuring json for ilb3', on_error: handle_error() do
        $json3_ilb_i = to_object(@server3_ilb)
        $temp_val = $configuration_data_ilb_3['datacenter']
  call locations_datacenters.get_datacenter_code($temp_val) retrieve $dc_code
  $temp_val = $configuration_data_ilb_3['region']
  call locations_regions.get_region_code($temp_val) retrieve $rg_code
  $dr_code = join([$dc_code, '-', $rg_code])
  # check if the last character is digit or not. If yes then remove it
  if to_n($dr_code[size($dr_code)-1]) != 0
    $region = $dr_code[0,size($dr_code)-2]
    $drz_code = join([$region, $configuration_data_ilb_3['zone']])
  else
    $drz_code = join([$dr_code, $configuration_data_ilb_3['zone']])
  end
  if $dc_code == 'asia'
    $network_region_qualifier = join(['-ase1 (', $dr_code, '1)'])
  else
    if to_n($dr_code[size($dr_code)-1]) != 0
     $network_region_qualifier = join([' (', $dr_code, ')'])
    else
    $network_region_qualifier = join([' (', $dr_code, '1)'])
    end
  end
  $configuration_data_ilb_3['resource_data']['datacenter'] = $drz_code
  # pass the key for location defaults as an input to rightscripts (v1-us-east1-b)
  $json3_ilb_i['fields']['inputs']['LOC_DEF_KEY'] = join(['text:', 'v1', '-', $drz_code])
  $json3_ilb_i['fields']['inputs']['LDAP_USER_PREFIX'] = join(['text:',$ldap_prefix])
  $json3_ilb_i['fields']['inputs']['LDAP_APP_NAME'] = join(['text:',$ldap_app_name])
  $json3_ilb_i['fields']['inputs']['OPENDJ_FQDN'] = join(['text:',$LDAP_OPENDJ_ENDPOINT])
  $json3_ilb_i['fields']['inputs']['DT_CLASSIC_ENDPOINT'] = join(['text:',$classic])
  $json3_ilb_i['fields']['inputs']['DT_ONEAGENT_ENDPOINT'] = join(['text:',$oneagent])
  $json3_ilb_i['fields']['inputs']['LDAP_USER_PREFIX'] = join(['text:',$ldap_prefix])
  $json3_ilb_i['fields']['inputs']['SPLUNK_CONFIG'] = 'cred:SPLUNK_CONF'
  $json3_ilb_i['fields']['inputs']['DATACENTER_DETAILS'] = 'env:DATACENTER'
  $json3_ilb_i['fields']['inputs']['SPLUNK_DEPLOYMENT_DETAILS'] = join(['text:','keng','_',$param_stack_id,',',$env_code,',',$param_environment_id])
  $json3_ilb_i['fields']['inputs']['BUCKET_CONFIG'] = 'cred:BUCKET_CONFIG'
  $json3_ilb_i['fields']['inputs']['BUCKET_CONFIG_NODES'] = join(['text:','keng','_',$param_stack_id,',',$env_code,',',$param_environment_id])
  $json3_ilb_i['fields']['inputs']['ENABLE_ROLLBAR_API'] = join(['text:', $param_enable_rollbar_api])
  $json3_ilb_i['fields']['inputs']['ROLLBAR_CLIENT_TOKEN']    = join(['cred:','ROLLBAR_CLIENT_TOKEN',':',upcase('keng'),'03','_DEV','01'])
  $json3_ilb_i['fields']['inputs']['ROLLBAR_SERVER_TOKEN']    = join(['cred:','ROLLBAR_SERVER_TOKEN',':',upcase('keng'),'03','_DEV','01'])


        $json3_ilb_i['fields']['inputs']['ENABLE_MONITORING']      = join(['text:', $param_enable_monitoring])
        @server3_ilb = $json3_ilb_i
      end
    end

        $resource_data_ilb = {
    "cloud"           => 'Google',
    "instance_type"   => 'n2-standard-4',
    "server_template" => "st-kronos-docker-nginx-ilb-wfmha_rahul_gupta_r9int_1"
  }
  if ($param_deployment_size == "Small" || $param_deployment_size_new == "Small") && downcase('keng') == "keng"
    $resource_data_ilb["instance_type"] = 'n2-standard-2'
  end  
  $configuration_data_ilb = {
    "name_data"       => $name_data_ilb,
    "resource_data"   => $resource_data_ilb,
    "image_href"      => $image_href_ilb,
    "datacenter"      => $param_deployment_datacenter,
    "region"          => $param_deployment_region,
    "zone"            => $zone_string,
    "subnet"          => $param_subnet,
    "node_id"         => $param_cluster_id   # TODO: this might want to be its own node param
  }
  $configuration_data_ilb2 = {
    "name_data"       => $name_data_ilb,
    "resource_data"   => $resource_data_ilb,
    "image_href"      => $image_href_ilb,
    "datacenter"      => $param_deployment_datacenter,
    "region"          => $param_deployment_region,
    "zone"            => $zone2_string,
    "subnet"          => $param_subnet,
    "node_id"         => $param_cluster_id   # TODO: this might want to be its own node param
  }
  $configuration_data_ilb3 = {
    "name_data"       => $name_data_ilb,
    "resource_data"   => $resource_data_ilb,
    "image_href"      => $image_href_ilb,
    "datacenter"      => $param_deployment_datacenter,
    "region"          => $param_deployment_region,
    "zone"            => $zone3_string,
    "subnet"          => $param_subnet,
    "node_id"         => $param_cluster_id   # TODO: this might want to be its own node param
  }
  $configuration_data_ilb['resource_data']['security_group'] = split($network_configuration_map[$configuration_data_ilb['subnet']]['security_groups'], ',')
  $configuration_data_ilb2['resource_data']['security_group'] = split($network_configuration_map[$configuration_data_ilb2['subnet']]['security_groups'], ',')
  $configuration_data_ilb3['resource_data']['security_group'] = split($network_configuration_map[$configuration_data_ilb3['subnet']]['security_groups'], ',')

        call server_operations.pre(@server_ilb, $configuration_data_ilb) retrieve @server_ilb, $ilb_fqdn
    if to_s($param_ha_ilb) == "True"
      call server_operations.pre(@server2_ilb, $configuration_data_ilb2) retrieve @server2_ilb, $ilb_fqdn2
      call server_operations.pre(@server3_ilb, $configuration_data_ilb3) retrieve @server3_ilb, $ilb_fqdn3
    end

      end 

      sub task_label: 'Creating instance tags for backend', on_error: handle_error() do
        call tags_utilities.create_instance_tags($param_subnet, $param_environment_name, $param_environment_id, $param_deployment_type, "wfm", "bck") retrieve $instance_tags_backend
      end
      sub task_label: 'Creating instance tags for tmk', on_error: handle_error() do
        call tags_utilities.create_instance_tags($param_subnet, $param_environment_name, $param_environment_id, $param_deployment_type, "wfm", "tmk") retrieve $instance_tags_tmk
      end
      sub task_label: 'Creating instance tags for sch', on_error: handle_error() do
        call tags_utilities.create_instance_tags($param_subnet, $param_environment_name, $param_environment_id, $param_deployment_type, "wfm", "sch") retrieve $instance_tags_sch
      end
      sub task_label: 'Creating instance tags for api', on_error: handle_error() do
        call tags_utilities.create_instance_tags($param_subnet, $param_environment_name, $param_environment_id, $param_deployment_type, "wfm", "api") retrieve $instance_tags_api
      end
      sub task_label: 'Creating instance tags for udm', on_error: handle_error() do
        call tags_utilities.create_instance_tags($param_subnet, $param_environment_name, $param_environment_id, $param_deployment_type, "wfm", "udm") retrieve $instance_tags_udm
      end
      sub task_label: 'Creating instance tags for bgp', on_error: handle_error() do
        call tags_utilities.create_instance_tags($param_subnet, $param_environment_name, $param_environment_id, $param_deployment_type, "wfm", "bgp") retrieve $instance_tags_bgp
      end
      sub task_label: 'Creating instance tags for bgi', on_error: handle_error() do
        call tags_utilities.create_instance_tags($param_subnet, $param_environment_name, $param_environment_id, $param_deployment_type, "wfm", "bgi") retrieve $instance_tags_bgi
      end
      sub task_label: 'Creating instance tags for ilb', on_error: handle_error() do
        call tags_utilities.create_instance_tags($param_subnet, $param_environment_name, $param_environment_id, $param_deployment_type, "wfm-bck", "ilb") retrieve $instance_tags_ilb
      end
      sub task_label: 'Creating instance tags for frontend', on_error: handle_error() do
        call tags_utilities.create_instance_tags($param_subnet, $param_environment_name, $param_environment_id, $param_deployment_type, "wfm", "fnt") retrieve $instance_tags_frontend
      end
    end

  sub on_error: handle_error() do
    $service_account = from_json(cred($cred_full_names['GENERIC_SERVICE_ACCOUNT']))
    $param_service_account = $service_account["wfm_level_env"][$env_code]
  end

    task_label('Setting inputs, resource, and configuration data')
    $param_dbserver_and_dbname = split(strip($param_dbserver_and_dbname),",")
    $param_integration_dbserver_and_dbname=split(strip($param_integration_dbserver_and_dbname),",")
    $param_scanning_service_url_and_port=split(downcase(strip($param_scanning_service_url_and_port)),",")
    $param_dbserver = strip($param_dbserver_and_dbname[0])
    $param_dbname = strip($param_dbserver_and_dbname[1])
    $param_integration_db_server = strip($param_integration_dbserver_and_dbname[0])
    $param_integration_db_name = strip($param_integration_dbserver_and_dbname[1])
    if $param_skpi_dbserver_and_dbname != "" && $param_skpi_dbserver_and_dbname != null
      $param_skpi_dbserver_and_dbname=split(strip($param_skpi_dbserver_and_dbname),",")
      $param_skpi_dbserver =strip($param_skpi_dbserver_and_dbname[0])
      $param_skpi_dbname =strip($param_skpi_dbserver_and_dbname[1])
    else
      $param_skpi_dbserver=""
      $param_skpi_dbname =""

    end
    $param_scanning_service_url =strip($param_scanning_service_url_and_port[0])
    $param_scanning_service_port = strip($param_scanning_service_url_and_port[1])
    $param_gateway_host =  switch($gateway_host_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_gateway_host'), $param_gateway_host)
    $param_gateway_url = "http://" + $param_gateway_host
    $param_sa_back_num = 1
    $param_sa_tmk_num = 0
    $param_sa_sch_num = 0
    $param_sa_bgp_num = 1
    $param_sa_bgi_num = 0
    $param_sa_front_num = 1
    $param_sa_api_num = 0
    $param_sa_udm_num = 0
    $param_sa_num = split(downcase(strip($param_sa_num)), ',')
    foreach $sa_num in $param_sa_num do
      if include?($sa_num, "bck")
        $param_sa_back_num = to_n(strip(split($sa_num, "=")[1]))
      
      elsif include?($sa_num, "tmk")
        $param_sa_tmk_num = to_n(strip(split($sa_num, "=")[1]))
      
      elsif include?($sa_num, "sch")
        $param_sa_sch_num = to_n(strip(split($sa_num, "=")[1]))
      
      elsif include?($sa_num, "bgp")
        $param_sa_bgp_num = to_n(strip(split($sa_num, "=")[1]))
      
      elsif include?($sa_num, "bgi")
        $param_sa_bgi_num = to_n(strip(split($sa_num, "=")[1]))
      
      elsif include?($sa_num, "fnt")
        $param_sa_front_num = to_n(strip(split($sa_num, "=")[1]))
      
      elsif include?($sa_num, "api")
        $param_sa_api_num = to_n(strip(split($sa_num, "=")[1]))
      
      elsif include?($sa_num, "udm")
        $param_sa_udm_num = to_n(strip(split($sa_num, "=")[1]))
      else
        raise "ERROR!!! provided server array code " + $sa_num+ " does not matches to any of the following: bck,tmk,sch,bgp,bgi,fnt,api,udm"
      end
    end
    ## Check Isolation required
    $param_runtime_isolation = "false"
    if $param_sa_tmk_num > 0 || $param_sa_sch_num > 0
        $param_runtime_isolation = "true"
    end
    
    $inputs =
    {
      'APIGW_URL'                      => join(['text:',$param_gateway_host]),
      'AUTH_HOST'                      => join(['text:', switch($auth_url_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_auth_url'), $param_auth_url)]),
      'AUTH_SERVER_USER'               => 'text:AgentAdministrator',
      'AUTH_SERVER_USER_PASSWRD'       => 'text:Kr0n0s@Cloud',
      'AUTH_TPUSER_USER_WFM'           => join(['cred:', $cred_full_names['AUTH_TPUSER_USER_WFM']]),
      'AUTH_TPUSER_PWD_WFM'            => join(['cred:', $cred_full_names['AUTH_TPUSER_PWD_WFM']]),
      'AUTH_URL'                       => join(['text:', switch($auth_url_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_auth_url'), $param_auth_url)]),
      'BACK_MOUNT_CODE_VOLUMES'        => join(['text:', 'true']),
      'BACK_PERSIST_CODE'              => join(['text:', 'true']),
      'BACK_PROPS_DIR'                 => join(['text:', '']),
      'RUNTIME_ISOLATION'              => join(['text:', $param_runtime_isolation]),
	  'IS_DISABLE_RUNTIME_ISOLATION_EXECUTED'              => join(['text:', 'false']),
      'TMK_NODE_NUM'                   => join(['text:', $param_sa_tmk_num]),
      'SCH_NODE_NUM'                   => join(['text:', $param_sa_sch_num]),
      'BGP_NODE_NUM'                   => join(['text:', $param_sa_bgp_num]),
      'BGI_NODE_NUM'                   => join(['text:', $param_sa_bgi_num]),
      'API_NODE_NUM'                   => join(['text:', $param_sa_api_num]),
      'UDM_NODE_NUM'                   => join(['text:', $param_sa_udm_num]),
      'CASSANDRA_NODES_FQDNS'          => join(['text:', $param_bcc_cassandra_cluster_nodes]),
      'CLUSTER_NAME'                   => join(['text:', $param_bcc_cluster_name]),
      'CCF_RABBITMQ_CREDS'             => join(['cred:', $cred_full_names['CCF_RABBITMQ_CREDS']]),
      'CCF_DSE_WFM_USER'               => join(['cred:', $cred_full_names['CCF_DSE_WFM_USER']]),
      'CCF_DSE_WFM_PASS'               => join(['cred:', $cred_full_names['CCF_DSE_WFM_PASS']]),
      'COVEO_API_KEY'                  => join(['cred:', 'COVEO_API_KEY']),
      'DATASTAX_ANALYTIC_NODES'        => join(['text:', switch($datastx_analytic_nodes_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_datastx_analytic_nodes'), $param_datastx_analytic_nodes)]),
      'DATASTAX_BATCH_CLUSTER'         => join(['text:', switch($datastx_batch_cluster_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_datastx_batch_cluster'), $param_datastx_batch_cluster)]),
      'DATASTAX_CLUSTER_MODE'          => join(['text:', $param_datastx_cluster_mode]),
      'DATASTAX_CLUSTER_NAME'          => join(['text:', switch($datastx_cluster_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_datastx_cluster'), $param_datastx_cluster)]),
      'DATASTAX_MASTER'                => join(['text:', switch($datastx_master_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_datastx_master'), $param_datastx_master)]),
      'DATASTAX_MASTER_NODES'          => join(['text:', switch($datastx_master_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_datastx_master'), $param_datastx_master)]),
      'DATASTAX_NODES'                 => join(['text:', switch($datastx_nodes_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_datastx_nodes'), $param_datastx_nodes)]),
      'DATASTAX_REALTIME_CLUSTER'      => join(['text:', switch($datastx_realtime_cluster_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_datastx_realtime_cluster'), $param_datastx_realtime_cluster)]),
      'DBNAME'                         => join(['text:', $param_dbname]),
      'DB_COMMON_COLLECTION_DIR'       => join(['text:', '/usr/local/kronos/dbpatcher/scripts/common_sql/DBBuild185/edb']),
      'DB_COMMON_DIRS'                 => join(['text:',
                                                '/usr/local/kronos/dbpatcher/scripts/common_sql/DBBuild185/edb,',
                                                '/usr/local/kronos/deployments/release/wfp_staging/common_sql,',
                                                '/usr/local/kronos/deployments/release/wtk_staging/common_sql,',
                                                '/usr/local/kronos/deployments/release/ngui_staging/common_sql,',
                                                '/usr/local/kronos/deployments/release/wat_staging/common_sql,',
                                                '/usr/local/kronos/deployments/release/wfl_staging/common_sql,',
                                                '/usr/local/kronos/deployments/release/wfa_staging/common_sql,',
                                                '/usr/local/kronos/translationmgr/output/common_sql']),
      'DB_NAME'                        => join(['text:', $param_dbname]),
      'DB_PASSWORD'                    => join(['cred:', $cred_full_names['WFM_DB_PASS']]),
      'DEVPORTAL_ADP_URL'              => join(['cred:', 'DEVPORTAL_ADP_URL']),
      'DEVPORTAL_DIMENSIONS_URL'       => join(['cred:', 'DEVPORTAL_DIMENSIONS_URL']),
      'SKPI_DB_SERVER_NAME'            => join(['text:', $param_skpi_dbserver]),
      'SKPI_DB_NAME'                   => join(['text:', $param_skpi_dbname]),
      'SKPI_DB_USERNAME'               => join(['cred:', $cred_full_names['WFM_DB_USER']]),
      'SKPI_DB_PASSWORD'               => join(['cred:', $cred_full_names['WFM_DB_PASS']]),
      'DB_PATCHER_IMAGE'               => join(['text:', $gce_proj_id_docker, '/wfm-backend-tomcat-', $build_level_backend, ':', downcase($param_build_number_backend)]),
      'DB_PATCH_COLLECTION_DIR'        => join(['text:', '/usr/local/kronos/dbpatcher/scripts/DBBuild185/edb']),
      'DB_PATCH_DIRS'                  => join(['text:',
                                                '/usr/local/kronos/dbpatcher/scripts/DBBuild185/edb,',
                                                '/usr/local/kronos/deployments/release/ngui_staging/db_patches/patches/edb/patches,',
                                                '/usr/local/kronos/deployments/release/wat_staging/db_patches/patches/edb/patches,',
                                                '/usr/local/kronos/deployments/release/wfa_staging/db_patches/patches/edb/patches,',
                                                '/usr/local/kronos/deployments/release/wfl_staging/db_patches/patches/edb/patches,',
                                                '/usr/local/kronos/deployments/release/wfop_staging/db_patches/patches/edb/patches,',
                                                '/usr/local/kronos/deployments/release/wfp_staging/db_patches/patches/edb/patches,',
                                                '/usr/local/kronos/deployments/release/wfso_staging/db_patches/patches/edb/patches,',
                                                '/usr/local/kronos/deployments/release/wfs_staging/db_patches/patches/edb/patches,',
                                                '/usr/local/kronos/deployments/release/wtk_staging/db_patches/patches/edb/patches,',
                                                '/usr/local/kronos/translationmgr/output']),
      'DB_PORT'                        => join(['text:', '5444']),
      'DB_SERVER_HOST'                 => join(['text:', $param_dbserver]),
      'DB_SERVER_NAME'                 => join(['text:', $param_dbserver]),
      'DB_SQL_COMMANDS'                => join(["text:",
                                                "CREATE SCHEMA if not exists common AUTHORIZATION {DB_USERNAME};`",
                                                "CREATE TABLE if not exists common.KCSUPGRADEHISTORY (PRODUCTSHORTNAME varchar2(10) NOT NULL, PRODUCTVERSION char(10) NOT NULL, DBMAJORVERSION NUMBER(5) NOT NULL, DBMINORVERSION NUMBER(5) NOT NULL, DBPATCHVERSION NUMBER(5) NOT NULL, UPGRADESCRIPTNAME varchar2(255) NOT NULL, UPGRADE_DTM DATE NOT NULL, SUBSUMEDSW NUMBER(12) DEFAULT 0 NOT NULL, SPVERSION varchar2(10) NULL);`",
                        "INSERT INTO common.KCSUPGRADEHISTORY (PRODUCTSHORTNAME,PRODUCTVERSION,DBMAJORVERSION,DBMINORVERSION,DBPATCHVERSION,UPGRADESCRIPTNAME,UPGRADE_DTM,SUBSUMEDSW) select'WTK','8.0.0',185,0,0,'00_KCSUPGRADEHISTORY.sql',SYSDATE,0 from dual where not exists (select 'x' from common.KCSUPGRADEHISTORY where upgradescriptname                                                                                                           = '00_KCSUPGRADEHISTORY.sql');"]),
      'DB_USERNAME'                    => join(['cred:', $cred_full_names['WFM_DB_USER']]),
      'DSAAS_REPOSITORY'               => join(['cred:', 'GOOGLE_PROJ_ID_K8S']),
      'DSAAS_URL'                      => join(['text:', switch($dsaas_url_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_dsaas_url'), $param_dsaas_url)]),
      'SUPER_USER_PPAS'                => join(['cred:', $cred_full_names['SUPER_USER_PPAS']]),
      'SUPER_USER_PWD_PPAS'            => join(['cred:', $cred_full_names['SUPER_USER_PWD_PPAS']]),
      'DEVPORTAL_FQDN'                 => join(['text:', switch($devportal_fqdn_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_devportal_fqdn'), $param_devportal_fqdn)]),
      'ENABLE_ZING_JDK'                => join(["text:", "true"]),
      'ENABLE_CONCURRENT_SESSIONS_LIMIT'     => join(['cred:', $cred_full_names['ENABLE_CONCURRENT_SESSIONS_LIMIT']]),
      'FORCE'                          => join(['text:', 'true']),
      'GATEWAY_URL'                    => join(['text:', $param_gateway_url]),
      'GENERAL_GCE_IMAGES'             => join(['text:', $image_name_backend, ',', $image_name_frontend]),
      'HELP_URL'                       => join(['text:', switch($help_url_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_help_url'), $param_help_url)]),
      'IDP_AUTH_URL'                   => join(['text:', switch($openam_idp_proxy_url_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_openam_idp_proxy_url'), $param_openam_idp_proxy_url)]),
      'IDP_ELB_URL'                    => join(['text:', $param_idp_elb_url]),
      'IDP_PROXY_ELB_URL'              => join(['text:', switch($openam_idp_proxy_url_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_openam_idp_proxy_url'), $param_openam_idp_proxy_url)]),
      'IHUB_ACCOUNT'                   => join(["text:", $param_integration_hub_account]),
      'IHUB_ATOM_CLOUD_NAME'           => join(['text:', switch($atmcld_name_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_atmcld_name'), $param_atmcld_name)]),
      'IHUB_ATOM_CLOUD_URL'            => join(['text:', switch($atmcld_url_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_atmcld_url'), $param_atmcld_url)]),
      'IHUB_INTERNAL_USE_FLAG'         => join(['text:', map($map_tf_choice, $param_atmcld_internal_use, 'choice_lc')]),
      'IHUB_PROXY_SERVER_HOST'         => join(['text:', $param_atmcld_proxy_host]),
      'INSTANCE_TYPE'                  => join(['text:', 'n1-highmem-8']),
      'LABEL_TAGS'                     => join(["text:", $out_instance_tags]),
      'BUILD_LEVEL_ILB'                => join(["text:", gsub($param_docker_build_level_ilb,".","d")]),
      'OPENAM_ELB_URL'                 => join(['text:', $param_elb_fqdn]),
      'OPENAM_IDP_PROXY_URL'           => join(['text:', switch($openam_idp_proxy_url_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_openam_idp_proxy_url'), $param_openam_idp_proxy_url)]),
      'OSCARCLARK_PASS'                => join(['cred:', $cred_full_names['OSCARCLARK_PASS']]),
      'PARAM_SCANNING_SERVICE_ENABLED' => join(["text:", $param_scanning_service_enabled]),
      'PARAM_SCANNING_SERVICE_PORT'    => join(["text:", $param_scanning_service_port]),
      'PARAM_SCANNING_SERVICE_URL'     => join(["text:", $param_scanning_service_url]),
      'POSTGRES_PASSWORD'              => join(['cred:', $cred_full_names['RPT_PG_PASS']]),
      'PUBLISH_ENV'                    => join(['text:', $param_env]),
      'PUBLISH_ORG'                    => join(['text:', $param_org]),
      'PUBLISH_USER'                   => join(['cred:', $cred_full_names['APIG_ADMIN_EMAIL']]),
      'PUBLISH_PASS'                   => join(['cred:', $cred_full_names['APIG_ADMIN_PASSWORD']]),
      'UPGRADE_USER'                   => join(['cred:', $cred_full_names['UPGRADE_USER']]),
      'UPGRADE_USER_PWD'               => join(['cred:', $cred_full_names['UPGRADE_USER_PWD']]),
      'AUTH_TEMPLATE_UPGRADE_USER_WFM' => join(['cred:', $cred_full_names['AUTH_TEMPLATE_UPGRADE_USER_WFM']]),
      'AUTH_TEMPLATE_UPGRADE_USER_PWD_WFM' => join(['cred:', $cred_full_names['AUTH_TEMPLATE_UPGRADE_USER_PWD_WFM']]),
      'THREAD_POOL_SIZE'               => join(['cred:', $cred_full_names['THREAD_POOL_SIZE']]),
      'TENANT_FAILURE_THRESHOLD'       => join(['cred:', $cred_full_names['TENANT_FAILURE_THRESHOLD']]),    
      'RABBIT_HOST'                    => join(['text:', switch($rabbit_host_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_rabbit_host'), $param_rabbit_host)]),
      'ENV_RABBIT_HOST'                => join(["text:", switch($rabbit_env_host_default, map($map_default_locations, join([$param_deployment_datacenter, " ", $param_subnet]), "mapping_env_rabbit_host"), $param_env_rabbit_host)]),
      'RABBIT_USERNAME'                => join(["cred:", $cred_full_names['RABBITMQ_USER']]),
      'RABBIT_PASSWORD'                => join(["cred:", $cred_full_names['RABBITMQ_PASSWD']]),
      'RABBIT_USER_PWD'                => join(["cred:", $cred_full_names['WFM_RABBITMQ_PWD']]),
      'TP_USER_PASS'                   => join(["cred:", $cred_full_names['TP_USER_PASS']]),
      'AUTH_IDP_TMS_APIUSER_USER_WFM'   => join(["cred:", $cred_full_names['AUTH_IDP_TMS_APIUSER_USER_WFM']]),
      'AUTH_IDP_TMS_APIUSER_PWD_WFM'    => join(["cred:", $cred_full_names['AUTH_IDP_TMS_APIUSER_PWD_WFM']]),
      'UMS_USER_PASS'                  => join(["cred:", $cred_full_names['UMS_USER_PASS']]),
      'AMC_USER'                       => join(["cred:", $cred_full_names['AMC_USER']]),
      'AMC_USER_PWD'                   => join(["cred:", $cred_full_names['AMC_USER_PASSWORD']]),
      'GTM_KEY'                        => join(["cred:", $cred_full_names['GTM_KEY']]),
      'FCM_MOBILE_PUSH_SENDERID'       => join(["cred:", $cred_full_names['MOBILE_PUSH_FCM_SENDERID']]),
      'AUTH_WFLAPP_TPUSER_WFM'         => join(["cred:", $cred_full_names['AUTH_WFLAPP_TPUSER_WFM']]),
      'AUTH_WFLAPP_TPUSER_PWD_WFM'     => join(["cred:", $cred_full_names['AUTH_WFLAPP_TPUSER_PWD_WFM']]),
      'AUTH_WFLADMIN_TPUSER_WFM'       => join(["cred:", $cred_full_names['AUTH_WFLADMIN_TPUSER_WFM']]),
      'AUTH_WFLADMIN_TPUSER_PWD_WFM'   => join(["cred:", $cred_full_names['AUTH_WFLADMIN_TPUSER_PWD_WFM']]),
      'FCM_MOBILE_PUSH_SERVICE_ACCT_KEYFILE'       => join(["cred:", $cred_full_names['MOBILE_PUSH_FCM_SERVICE_ACCT_KEYFILE']]),      
      'RPT_SYSTEM_PASSWORD'            => join(['cred:', $cred_full_names['RPT_SYSTEM_PASS']]),
      'SCCUSER_RABBIT_CREDS'           => join(['text:', 'sccuser']),
      'REDIS_HOSTS'                    => join(['text:', switch($redis_hosts_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_redis_hosts_2'), $param_redis_hosts)]),
      'REDIS_MASTER'                   => join(['text:', switch($redis_master_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_redis_master_2'), $param_redis_master)]),
      'REDIS_SENINEL_NODES_AND_PORTS'  => join(['text:', switch($redis_master_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_redis_master_2'), $param_redis_master)]),
      'REDIS_SENTINEL_CLUSTER_ID'      => join(['text:', $param_redis_cluster]),
      'REDIS_SENTINEL_MASTER_HOST'     => join(['text:', switch($redis_master_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_redis_master_2'), $param_redis_master)]),
      'REDIS_SENTINEL_NODES_AND_PORTS' => join(['text:', switch($redis_master_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_redis_master_2'), $param_redis_master)]),
      'REDIS_URL'                      => join(['text:', switch($redis_hosts_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_redis_hosts_2'), $param_redis_hosts)]),
      'REPORTING_DESIGNER_HOST'        => join(['text:', switch($reporting_designer_url_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_reporting_designer_url'), $param_reporting_designer_url)]),
      'REPORTING_DESIGNER_HOST'        => join(['text:', switch($reporting_designer_url_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_reporting_designer_url'), $param_reporting_designer_url)]),
      'REPORTING_DESIGNER_URL'         => join(['text:', switch($reporting_designer_url_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_reporting_designer_url'), $param_reporting_designer_url)]),
      'REPORTING_DESIGNER_URL'         => join(['text:', switch($reporting_designer_url_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_reporting_designer_url'), $param_reporting_designer_url)]),
      'REPORTING_SERVER_HOST'          => join(['text:', switch($reporting_host_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_reporting_host'), $param_reporting_host)]),
      'REPORTING_SERVER_NAME'          => join(['text:', switch($reporting_host_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_reporting_host'), $param_reporting_host)]),
      'SDM_HOST'                       => join(['text:', switch($sdm_host_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_sdm_host'), $param_sdm_host)]),
      'SDM_URL'                        => join(['text:', switch($sdm_host_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_sdm_host'), $param_sdm_host)]),
      'ECS_URL_WITH_PORT'              => join(['text:', switch($ecs_host_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_ecs_host'), $param_ecs_host)]),
      'SMTP_ENABLE'                    => join(['text:', map($map_tf_choice, $param_smtp_enable, 'choice_lc')]),
      'HCA_URL'                        => join(['text:', switch($hca_url_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_hca_url'), $param_hca_url)]),
      'RABBIT_VHOST_HCA'       	       => join(['text:', split(switch($hca_url_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_hca_url'), $param_hca_url), '.')[0]]),
      'TMS_URL'                        => join(['text:', switch($tms_url_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_tms_url'), $param_tms_url)]),
      'TR_HOST'                        => join(['text:', $param_tr_host]),
      'UDM_HOST'                       => join(['text:', switch($udm_url_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_udm_url'), $param_udm_url)]),
      'UDM_URL'                        => join(['text:', switch($udm_url_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_udm_url'), $param_udm_url)]),
      'UMS_HOST'                       => join(['text:', switch($ums_host_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_ums_host'), $param_ums_host)]),
      'UMS_SERVER_NAME'                => join(['text:', switch($ums_host_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_ums_host'), $param_ums_host)]),
      'USEVANITYURL'                   => join(['text:', $param_use_vanity_url]),
      'WORKFLOW_ADMIN_HOST'            => join(['text:', switch($wfladmin_url_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_wfladmin_url'), $param_wfladmin_url)]),
      'WORKFLOW_ADMIN_URL'             => join(['text:', switch($wfladmin_url_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_wfladmin_url'), $param_wfladmin_url)]),
      'WORKFLOW_APP_HOST'              => join(['text:', switch($wflapp_url_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_wflapp_url'), $param_wflapp_url)]),
      'WORKFLOW_APP_URL'               => join(['text:', switch($wflapp_url_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_wflapp_url'), $param_wflapp_url)]),
      'IHUB_ACCOUNT'                   => join(["text:", $param_integration_hub_account]),
      'PARAM_SCANNING_SERVICE_ENABLED' => join(["text:", $param_scanning_service_enabled]),
      'INTEGRATIONDB_DBNAME'           => join(['text:', $param_integration_db_name]),
      'INTEGRATIONDB_USERNAME'         => join(['cred:', $cred_full_names['PPAS_ENVINTEGRATIONDB_USER_WFM']]),
      'INTEGRATIONDB_PASSWORD'         => join(['cred:', $cred_full_names['PPAS_ENVINTEGRATIONDB_PWD_WFM']]),
      'INTEGRATIONDB_SERVER_NAME'      => join(['text:', $param_integration_db_server]),
      'ENABLE_MONITORING'              => join(["text:", $param_enable_monitoring]),
      'KPI_SYSTEM_USER_USERNAME'       => join(['cred:', $cred_full_names['KPI_SYSTEM_USER_USERNAME']]),
      'KPI_SYSTEM_USER_PASS'           => join(['cred:', $cred_full_names['KPI_SYSTEM_USER_PASS']]),
      'ANALYTICDATA_USER_USERNAME'     => join(['cred:', $cred_full_names['KPI_ANALYTICDATA_USER_USERNAME']]),
      'ANALYTICDATA_USER_PASS'         => join(['cred:', $cred_full_names['KPI_ANALYTICDATA_USER_PASS']]),
      'OPENAM_KEY_PASS'                => join(["cred:", $cred_full_names['OPENAM_KEY_PASS']]),
      "AMADMIN_PASSWORD"               => join(["cred:", $cred_full_names['OPENAM_ADMIN_PASS']]),
      'FCS_CASSANDRA_NODES_FQDNS'      => join(['text:', switch($fcs_url_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_fcs_url'), $param_forecasting_cassandra_nodes)]),
      'FORECASTINGDATA_USER_USERNAME'  => join(['cred:', $cred_full_names['FCS_USER_WFM']]),
      'FORECASTINGDATA_USER_PASS'      => join(['cred:', $cred_full_names['FCS_USER_PWD_WFM']]),
      'IHUB_ENCRYP_KEY'                => join(['cred:', $cred_full_names['IHUB_ENCRYP_KEY']]),
      'BOOMI_USER'                     => join(['cred:', 'BOOMI_USER_WFM']),
      'BOOMI_USER_PWD'                 => join(['cred:', 'BOOMI_USER_PWD_WFM']),
      'IS_ICU'                         => join(["text:", $param_is_icu]),
      'IS_ROLLING_UPGRADE'             => join(["text:", $param_is_rolling_upgrade]),
      'BACKEND_BUILD_LEVEL'            => join(["text:", $param_build_level_backend]),
      'FRONTEND_BUILD_LEVEL'           => join(["text:", $param_build_level_frontend]),
      'DEPLOYMENT_SIZE'                => join(['text:', $param_deployment_size]),
      'HCA_RABBITMQ_USER'              => join(['cred:', $cred_full_names['HCA_RABBITMQ_USER']]),
      'HCA_RABBITMQ_PASS'              => join(['cred:', $cred_full_names['HCA_RABBITMQ_PASS']]),
      'BUCKET_VERSION'                 => join(['text:', $cat_version]),
      'SEARCH_HELP_DETAILS'            => join(['cred:', $cred_full_names['SEARCH_HELP_INFO']]),
      'QUALTRICS_SURVEY_DETAILS'       => join(['cred:', $cred_full_names['QUALTRICS_SURVEY_INFO']]),
      'IA_DATAVIEW_CONFIG'             => join(['cred:', $cred_full_names['IA_CONFIG']]),
      'DEPOY_HA_ILB'                   => join(['text:', $param_ha_ilb]),
      'DAS_PRV_URL'                    => join(['text:', switch($das_prv_url_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_das_prv_url'), $param_das_prv_url)]),
      'PES_API_PRV_URL'                => join(['text:', switch($pes_prv_url_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_pes_prv_url'), $param_pes_prv_url)]),
      'IDPAUTH_CALLBACKUSER_USER_TMS'  => join(['cred:', $cred_full_names['AUTH_IDP_CALLBACKUSER_USER_TMS']]),
      'IDPAUTH_CALLBACKUSER_PWD_TMS'   => join(['cred:', $cred_full_names['AUTH_IDP_CALLBACKUSER_PWD_TMS']]),
      'WIT_HOST'                       => join(['text:', switch($wit_host_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_wit_host'), $param_wit_host)]),
      'PRO_INTEGRATION_JWKS_URI'       => join(['cred:', $cred_full_names['PRO_INTEGRATION_JWKS_URI']]),
      'AUTH_DSSMSA_USER_WFM'           => join(['cred:', $cred_full_names['AUTH_DSSMSA_USER_WFM']]),
      'AUTH_DSSMSA_USER_PWD_WFM'       => join(['cred:', $cred_full_names['AUTH_DSSMSA_USER_PWD_WFM']]),
      'AUTH_RPT_USER_WFM'              => join(['cred:', $cred_full_names['AUTH_RPT_USER_WFM']]),
      'AUTH_RPT_USER_PWD_WFM'          => join(['cred:', $cred_full_names['AUTH_RPT_USER_PWD_WFM']]),
      'DSAAS_PGE_API_CNAME'            => join(['text:', switch($pge_url_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_pge_url'), $param_pge_url)]),
      'DFI_BUILD_LEVEL'                => join(["text:", $param_build_level_dfi]),
      'PPAS_USER_WFM'                  => join(['cred:', $cred_full_names['PPAS_USER_WFM']]),
      'PPAS_USER_PWD_WFM'              => join(['cred:', $cred_full_names['PPAS_USER_PWD_WFM']]),
      'PPAS_USER_SKPI'                 => join(['cred:', $cred_full_names['PPAS_USER_SKPI']]),
      'PPAS_USER_PWD_SKPI'             => join(['cred:', $cred_full_names['PPAS_USER_PWD_SKPI']]),
      'ZDM_DB_CNAME'                   => join(['text:', $param_astra_zdm_nodes]),
      'ASTRA_DB_NAME'                  => join(['text:', $param_astra_db_name])
    }

    if (($param_skpi_dbname != $param_dbname || $param_skpi_dbserver != $param_dbserver) && (($param_skpi_dbserver != "" && $param_skpi_dbname != "") && ($param_skpi_dbserver != null && $param_skpi_dbname != null)))
      $inputs["SKPI_DEDICATED_DB"] = join(["text:", "True"])
    else
      $inputs["SKPI_DEDICATED_DB"] = join(["text:", "False"])
    end
    
    $resource_data_bck =
    {
        "cloud"           => 'Google',
        "instance_type"   => 'n1-highmem-8',
        "server_template" => "st-kronos-production-ins-wfmbck_rahul_gupta_r9int_1"
    }
 $resource_data_fnt =
    {
        "cloud"           => 'Google',
        "instance_type"   => 'n1-highmem-4',
        "server_template" => "st-kronos-production-ins-wfmfnt_rahul_gupta_r9int_1"
    }

$configuration_data_fnt =
    {
      "name_data"       => $name_data_fnt,
      "resource_data"   => $resource_data_fnt,
      "image_href"      => $image_href_frontend,
      "datacenter"      => $param_deployment_datacenter,
      "region"          => $param_deployment_region,
      "zone"            => $unique_zones[0],
      "subnet"          => $param_subnet,
      "ilb"             => 'Google',
      "inputs"          => $inputs
    }


    $configuration_data_bck =
    {
      "name_data"       => $name_data_bck,
      "resource_data"   => $resource_data_bck,
      "image_href"      => $image_href_backend,
      "datacenter"      => $param_deployment_datacenter,
      "region"          => $param_deployment_region,
      "zone"            => $unique_zones[0],
      "subnet"          => $param_subnet,
      "inputs"          => $inputs
    }

    call log_utilities.audit_log("@server_array_bck",to_s(@server_array_bck))


    $bck_json = to_object(@server_array_bck)

    call log_utilities.audit_log("$bck_json",to_s($bck_json))


      sub task_label: 'Retrieving server array bck', on_error: handle_error() do
        call config_prelaunch.production_pre_config(@server_array_bck, $configuration_data_bck) retrieve @server_array_bck
    end
    sub task_label: 'Retrieving server array fnt', on_error: handle_error() do
        call config_prelaunch.production_pre_config(@server_array_fnt, $configuration_data_fnt) retrieve @server_array_fnt
    end

      $bck_json = to_object(@server_array_bck)
      $fnt_json = to_object(@server_array_fnt)

      $frontend_fqdn_ilb =  $fnt_json['fields']['inputs']['ILB_FQDN']

      call log_utilities.audit_log("$frontend_fqdn_ilb",$frontend_fqdn_ilb)

    $ha_fqdn_ilb = $bck_json['fields']['inputs']['ILB_FQDN']
    $wfm_bck_fqdn_ilb1= gsub($ha_fqdn_ilb, /ilb/, 'ilb1')
    $wfm_bck_fqdn_ilb2= gsub($ha_fqdn_ilb, /ilb/, 'ilb2')
    $wfm_bck_fqdn_ilb3= gsub($ha_fqdn_ilb, /ilb/, 'ilb3')
    $bck_json['fields']['inputs']['ILB_FQDN'] = $wfm_bck_fqdn_ilb1

    $ilb_name_production = $bck_json['fields']['inputs']['ILB_HOSTNAME']
    $wfm_ilb_host_1 = gsub($ilb_name_production, /ilb/, 'ilb1')
    $wfm_ilb_host_2 = gsub($ilb_name_production, /ilb/, 'ilb2')
    $wfm_ilb_host_3 = gsub($ilb_name_production, /ilb/, 'ilb3')

    $deployment_json = to_object(@@deployment)
    $deployment_href = $deployment_json['hrefs'][0]

    $health_check_back =
    {
      "type": "HTTP",
      "checkIntervalSec": 5,
      "timeoutSec": 5,
      "unhealthyThreshold": 2,
      "healthyThreshold": 2,
      "httpHealthCheck": {
        "port": 80,
        "requestPath": "/wfc/restcall/v1/platform/healthCheck"
      }
    }

    $forwarding_rule_back =
    {
      "ports": ["80","8080"],
      "IPProtocol": "TCP"
    }

    $health_check_front =
    {
      "type": "HTTP",
      "checkIntervalSec": 5,
      "timeoutSec": 5,
      "unhealthyThreshold": 2,
      "healthyThreshold": 2,
      "httpHealthCheck": {
        "port": 80,
        "requestPath": "/healthCheck"
      }
    }

    $forwarding_rule_front =
    {
      "ports": ["80","8080"],
      "IPProtocol": "TCP"
    }

        call config_generic.datacenter_policy($param_sa_back_num, $datacenter_policy_list) retrieve $datacenter_policy_list, $max_server_array_size, $unique_zones, $all_zones
$fnt_json={}
$tmk_json={}
$sch_json={}
$bgp_json={}
$bgi_json={}
$api_json={}
$udm_json={}
  sub task_label: 'Updating common json', on_error: handle_error() do
    $frontend_fqdn = gsub($bck_json['fields']['inputs']["CNAME_FQDN"],"-bck","-"+"fnt")        
        $bck_json['fields']['datacenter_policy']              = $datacenter_policy_list

        $bck_json["fields"]["inputs"]["ENABLE_ZING_JDK"]      = join(["text:", "true"])
        $bck_json['fields']['inputs']['ILB_HC_BODY']          = join(['text:', to_s($health_check_back)])
        $bck_json['fields']['inputs']['ILB_FR_BODY']          = join(['text:', to_s($forwarding_rule_back)])
        $bck_json['fields']['inputs']['ILB_SESSION_AFFINITY'] = 'text:CLIENT_IP'
        $bck_json['fields']['inputs']['APP_SERVER']           = $bck_json['fields']['inputs']['CNAME_FQDN']
        $bck_json['fields']['inputs']['BACKEND_IP']           = $bck_json['fields']['inputs']['ILB_FQDN']
        if to_s($param_ha_ilb) == "True"
          $bck_json['fields']['inputs']['HA_ILB1']              = $wfm_bck_fqdn_ilb1
          $bck_json['fields']['inputs']['HA_ILB2']              = $wfm_bck_fqdn_ilb2
          $bck_json['fields']['inputs']['HA_ILB3']              = $wfm_bck_fqdn_ilb3
        end
    $bck_json['fields']['inputs']['FRONTEND_FQDN']        = $frontend_fqdn
    $bck_json['fields']['inputs']['BACKEND_FQDN']         = $bck_json['fields']['inputs']['CNAME_FQDN']
    $bck_json['fields']['inputs']['RABBIT_CREDS']         = $frontend_fqdn
    $bck_json['fields']['inputs']['RABBIT_VHOST']         = $frontend_fqdn
    $bck_json['fields']['inputs']['REDIS_CLUSTER']        = $frontend_fqdn
    $bck_json['fields']['cloud_specific_attributes']['service_account'] = $param_service_account
    $tmk_json = $bck_json
    $sch_json = $bck_json
    $fnt_json = $bck_json
    $bgp_json = $bck_json
    $bgi_json = $bck_json
    $api_json = $bck_json
    $udm_json = $bck_json
  end
  concurrent return @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_api, @server_array_udm, @server_array_fnt, @server_array_bgp, @server_array_bgi, @server_ilb, @server2_ilb, @server3_ilb, $bck_json, $tmk_json, $sch_json, $api_json, $udm_json, $fnt_json, $bgp_json, $bgi_json, $ilb_server_json, $ilb2_server_json, $ilb3_server_json do
      sub task_label: 'Updating frontend json', on_error: handle_error() do
        $resource_data_fnt =
            {
                "cloud"           => 'Google',
                "instance_type"   => 'n1-highmem-4',
                "server_template" => "st-kronos-production-ins-wfmfnt_rahul_gupta_r9int_1"
            }
        call getResourcehref($fnt_json,$resource_data_fnt) retrieve $fnt_json
        $region_identifier = join([$continent_code, $selected_region_sector])
        $ilb_hostname = gsub($bck_json['fields']['inputs']["ILB_HOSTNAME"],"/^[a-z]{4}[0-9]{2}/",$region_identifier)
        $ilb_fqdn = gsub($bck_json['fields']['inputs']["ILB_HOSTNAME"],"/^[a-z]{4}[0-9]{2}/",$region_identifier)
        call config_generic.datacenter_policy_calc($param_sa_front_num,$datacenter_policy_list,$unique_zones) retrieve $datacenter_policy_list, $max_server_array_size
        $fnt_json['fields']['datacenter_policy']              = $datacenter_policy_list
        $fnt_json['fields']['elasticity_params']['bounds']['min_count'] = $param_sa_front_num
        $fnt_json['fields']['elasticity_params']['bounds']['max_count'] = $max_server_array_size
        $fnt_json['fields']['elasticity_params']['alert_specific_params']['voters_tag_predicate'] = "server_array_"+"fnt"
        $fnt_json['fields']['image_href']                     = $image_href_frontend
        $fnt_json['fields']['inputs']['ILB_SESSION_AFFINITY'] = 'text:None'
        $fnt_json['fields']['inputs']['ILB_HC_BODY']          = join(['text:', to_s($health_check_front)])
        $fnt_json['fields']['inputs']['ILB_FR_BODY']          = join(['text:', to_s($forwarding_rule_front)])
        $fnt_json['fields']['inputs']['TAGS']                 = join(['text:', $instance_tags_frontend])
        $fnt_json['fields']['name'] = gsub($bck_json['fields']['name'], "-bck-", "-fnt-")
        $fnt_json['fields']['inputs']["HOST"] = gsub($bck_json['fields']['inputs']["HOST"] ,"-bck","-"+"fnt")
        $fnt_json['fields']['inputs']["HOST_FQDN"] = gsub($bck_json['fields']['inputs']["HOST_FQDN"],"-bck","-"+"fnt")
        $fnt_json['fields']['inputs']["ILB_HOSTNAME"] = gsub($ilb_hostname,"-bck","-"+"fnt")
        $fnt_json['fields']['inputs']["ILB_FQDN"] = $frontend_fqdn_ilb
        $fnt_json['fields']['inputs']["CNAME_HOSTNAME"] = gsub($bck_json['fields']['inputs']["CNAME_HOSTNAME"],"-bck","-"+"fnt")
        $fnt_json['fields']['inputs']["CNAME_FQDN"] = gsub($bck_json['fields']['inputs']["CNAME_FQDN"],"-bck","-"+"fnt")
        $fnt_json['fields']['inputs']['WFM_UNIQUENESS'] = $fnt_json['fields']['inputs']['CNAME_FQDN']
        $fnt_json['fields']['inputs']["HOST_URL"] = gsub($bck_json['fields']['inputs']["HOST_URL"],"-bck","-"+"fnt")
        $fnt_json['fields']['inputs']["GOOGLE_MANAGED_ZONE"] = gsub($bck_json['fields']['inputs']["GOOGLE_MANAGED_ZONE"],"-bck","-"+"fnt")
        $fnt_json['fields']['inputs']["BUCKET_SUBFOLDER_NAME"] = gsub($bck_json['fields']['inputs']["BUCKET_SUBFOLDER_NAME"],"-bck","-"+"fnt")
		$fnt_json['fields']['inputs']['DEPLOYMENT_HREF']     = join(["text:", $deployment_href])
        call servers_utilities.get_size_info_key($size_map, 'wfm_frontend', $param_deployment_size) retrieve $size_key
    $instance_type_fe = map($size_map,$size_key,'instance_type')
    $volume_size_fe = map($size_map,$size_key,'volume_size')

    $fnt_json['fields']['inputs']['VOLUME_SIZE']   = join(['text:', $volume_size_fe])
    $fnt_json['fields']['inputs']['INSTANCE_TYPE'] = join(['text:', $instance_type_fe])
    call servers_utilities.get_instancetype_href($instance_type_fe) retrieve $instance_type_href
    $fnt_json['fields']['instance_type_href'] = $instance_type_href
    if $param_deployment_preemptible == 'True'
    $fnt_json['fields']['cloud_specific_attributes']['preemptible'] = true
    end

        @server_array_fnt = $fnt_json
      end      
      sub task_label: 'Updating bck json', on_error: handle_error() do
        call config_generic.datacenter_policy_calc($param_sa_back_num,$datacenter_policy_list,$unique_zones) retrieve $datacenter_policy_list, $max_server_array_size
        $bck_json['fields']['datacenter_policy']              = $datacenter_policy_list
        $bck_json['fields']['elasticity_params']['bounds']['min_count'] = $param_sa_back_num
        $bck_json['fields']['elasticity_params']['bounds']['max_count'] = $max_server_array_size
        $bck_json['fields']['elasticity_params']['alert_specific_params']['voters_tag_predicate'] = "server_array_"+"bck"
        $bck_json['fields']['inputs']['TAGS']                 = join(['text:', $instance_tags_backend])
        $bck_json['fields']['cloud_specific_attributes']['service_account'] = $param_service_account
        $bck_json['fields']['inputs']['IS_FRONTEND']          = 'text:False'
        $bck_json['fields']['inputs']['DEPLOYMENT_HREF']     = join(["text:", $deployment_href])
        call servers_utilities.get_size_info_key($size_map, 'wfm_backend', $param_deployment_size) retrieve $size_key
    $instance_type_be = map($size_map,$size_key,'instance_type')
    $volume_sz_be = map($size_map,$size_key,'volume_size')

    $bck_json['fields']['inputs']['VOLUME_SIZE']   = join(['text:', $volume_sz_be])
    $bck_json['fields']['inputs']['INSTANCE_TYPE'] = join(['text:', $instance_type_be])
    call servers_utilities.get_instancetype_href($instance_type_be) retrieve $instance_type_href
    $bck_json['fields']['instance_type_href'] = $instance_type_href
    if $param_deployment_preemptible == 'True'
    $bck_json['fields']['cloud_specific_attributes']['preemptible'] = true
    end

        if $param_sa_bgp_num > 0
          $bck_json['fields']['inputs']['WFMBACK_BGP_BOOL']     = join(['text:', 'false'])
        end
        if $param_sa_tmk_num > 0
          $bck_json['fields']['inputs']['TMK_SERVERS_EXIST']     = join(['text:', 'true'])
        else
          $bck_json['fields']['inputs']['TMK_SERVERS_EXIST']     = join(['text:', 'false'])
        end
        if $param_sa_sch_num > 0
          $bck_json['fields']['inputs']['SCH_SERVERS_EXIST']     = join(['text:', 'true'])
        else
          $bck_json['fields']['inputs']['SCH_SERVERS_EXIST']     = join(['text:', 'false'])
        end
        if $param_sa_api_num > 0
          $bck_json['fields']['inputs']['API_SERVERS_EXIST']     = join(['text:', 'true'])
        else
          $bck_json['fields']['inputs']['API_SERVERS_EXIST']     = join(['text:', 'false'])
        end
        if $param_sa_udm_num > 0
          $bck_json['fields']['inputs']['UDM_SERVERS_EXIST']     = join(['text:', 'true'])
        else
          $bck_json['fields']['inputs']['UDM_SERVERS_EXIST']     = join(['text:', 'false'])
        end
        @server_array_bck = $bck_json
      end
      
      sub task_label: 'Updating tmk json', on_error: handle_error() do
         $resource_data_tmk = {"server_template" => "st-kronos-production-ins-wfmtmk_rahul_gupta_r9int_1"} 
         call getResourcehref($tmk_json,$resource_data_tmk) retrieve $tmk_json
        call config_generic.datacenter_policy_calc($param_sa_tmk_num,$datacenter_policy_list,$unique_zones) retrieve $datacenter_policy_list, $max_server_array_size
        $tmk_json['fields']['datacenter_policy'] = $datacenter_policy_list
        $tmk_json['fields']['elasticity_params']['bounds']['min_count'] = $param_sa_tmk_num
        $tmk_json['fields']['elasticity_params']['bounds']['max_count'] = $max_server_array_size
        $tmk_json['fields']['elasticity_params']['alert_specific_params']['voters_tag_predicate'] = "server_array_"+"tmk"
        $tmk_json['fields']['inputs']['TAGS'] = join(['text:', $instance_tags_tmk])
        $tmk_json['fields']['cloud_specific_attributes']['service_account'] = $param_service_account
        $tmk_json['fields']['name'] = gsub($bck_json['fields']['name'], "-bck-", "-tmk-") 
        $tmk_json['fields']['inputs']["HOST"] = gsub($bck_json['fields']['inputs']["HOST"] ,"-bck","-"+"tmk")
        $tmk_json['fields']['inputs']["HOST_FQDN"] = gsub($bck_json['fields']['inputs']["HOST_FQDN"],"-bck","-"+"tmk")
        $tmk_json['fields']['inputs']["CNAME_HOSTNAME"] = gsub($bck_json['fields']['inputs']["CNAME_HOSTNAME"],"-bck","-"+"tmk")
        $tmk_json['fields']['inputs']["CNAME_FQDN"] = gsub($bck_json['fields']['inputs']["CNAME_FQDN"],"-bck","-"+"tmk")
        $tmk_json['fields']['inputs']["HOST_URL"] = gsub($bck_json['fields']['inputs']["HOST_URL"],"-bck","-"+"tmk")
        $tmk_json['fields']['inputs']["GOOGLE_MANAGED_ZONE"] = gsub($bck_json['fields']['inputs']["GOOGLE_MANAGED_ZONE"],"-bck","-"+"tmk")
        $tmk_json['fields']['inputs']["BUCKET_SUBFOLDER_NAME"] = gsub($bck_json['fields']['inputs']["BUCKET_SUBFOLDER_NAME"],"-bck","-"+"tmk")
        $tmk_json['fields']['inputs']['IS_FRONTEND'] = 'text:False'
        $tmk_json['fields']['inputs']['DEPLOYMENT_HREF']     = join(["text:", $deployment_href])
        if $param_sa_bgp_num > 0
          $tmk_json['fields']['inputs']['WFMBACK_BGP_BOOL'] = join(['text:', 'false'])
        end
        call servers_utilities.get_size_info_key($size_map, 'wfm_backend', $param_deployment_size) retrieve $size_key
    $instance_type_be = map($size_map,$size_key,'instance_type')
    $volume_sz_be = map($size_map,$size_key,'volume_size')

    $tmk_json['fields']['inputs']['VOLUME_SIZE']   = join(['text:', $volume_sz_be])
    $tmk_json['fields']['inputs']['INSTANCE_TYPE'] = join(['text:', $instance_type_be])
    call servers_utilities.get_instancetype_href($instance_type_be) retrieve $instance_type_href
    $tmk_json['fields']['instance_type_href'] = $instance_type_href
    if $param_deployment_preemptible == 'True'
    $tmk_json['fields']['cloud_specific_attributes']['preemptible'] = true
    end

        @server_array_tmk = $tmk_json
      end
      
      sub task_label: 'Updating sch json', on_error: handle_error() do
         $resource_data_sch = {"server_template" => "st-kronos-production-ins-wfmsch_rahul_gupta_r9int_1"} 
         call getResourcehref($sch_json,$resource_data_sch) retrieve $sch_json
        call config_generic.datacenter_policy_calc($param_sa_sch_num,$datacenter_policy_list,$unique_zones) retrieve $datacenter_policy_list, $max_server_array_size
        $sch_json['fields']['datacenter_policy'] = $datacenter_policy_list
        $sch_json['fields']['elasticity_params']['bounds']['min_count'] = $param_sa_sch_num
        $sch_json['fields']['elasticity_params']['bounds']['max_count'] = $max_server_array_size
        $sch_json['fields']['elasticity_params']['alert_specific_params']['voters_tag_predicate'] = "server_array_"+"sch"
        $sch_json['fields']['inputs']['TAGS'] = join(['text:', $instance_tags_sch])
        $sch_json['fields']['cloud_specific_attributes']['service_account'] = $param_service_account
        $sch_json['fields']['name'] = gsub($bck_json['fields']['name'], "-bck-", "-sch-") 
        $sch_json['fields']['inputs']["HOST"] = gsub($bck_json['fields']['inputs']["HOST"] ,"-bck","-"+"sch")
        $sch_json['fields']['inputs']["HOST_FQDN"] = gsub($bck_json['fields']['inputs']["HOST_FQDN"],"-bck","-"+"sch")
        $sch_json['fields']['inputs']["CNAME_HOSTNAME"] = gsub($bck_json['fields']['inputs']["CNAME_HOSTNAME"],"-bck","-"+"sch")
        $sch_json['fields']['inputs']["CNAME_FQDN"] = gsub($bck_json['fields']['inputs']["CNAME_FQDN"],"-bck","-"+"sch")
        $sch_json['fields']['inputs']["HOST_URL"] = gsub($bck_json['fields']['inputs']["HOST_URL"],"-bck","-"+"sch")
        $sch_json['fields']['inputs']["GOOGLE_MANAGED_ZONE"] = gsub($bck_json['fields']['inputs']["GOOGLE_MANAGED_ZONE"],"-bck","-"+"sch")
        $sch_json['fields']['inputs']["BUCKET_SUBFOLDER_NAME"] = gsub($bck_json['fields']['inputs']["BUCKET_SUBFOLDER_NAME"],"-bck","-"+"sch")
        $sch_json['fields']['inputs']['IS_FRONTEND'] = 'text:False'
        $sch_json['fields']['inputs']['DEPLOYMENT_HREF']     = join(["text:", $deployment_href])
        if $param_sa_bgp_num > 0
          $sch_json['fields']['inputs']['WFMBACK_BGP_BOOL'] = join(['text:', 'false'])
        end
        call servers_utilities.get_size_info_key($size_map, 'wfm_backend', $param_deployment_size) retrieve $size_key
    $instance_type_be = map($size_map,$size_key,'instance_type')
    $volume_sz_be = map($size_map,$size_key,'volume_size')

    $sch_json['fields']['inputs']['VOLUME_SIZE']   = join(['text:', $volume_sz_be])
    $sch_json['fields']['inputs']['INSTANCE_TYPE'] = join(['text:', $instance_type_be])
    call servers_utilities.get_instancetype_href($instance_type_be) retrieve $instance_type_href
    $sch_json['fields']['instance_type_href'] = $instance_type_href
    if $param_deployment_preemptible == 'True'
    $sch_json['fields']['cloud_specific_attributes']['preemptible'] = true
    end

        @server_array_sch = $sch_json
      end
      
      sub task_label: 'Updating bgp json', on_error: handle_error() do
         $resource_data_bgp = {"server_template" => "st-kronos-production-ins-wfmbgp_rahul_gupta_r9int_1"} 
         call getResourcehref($bgp_json,$resource_data_bgp) retrieve $bgp_json
        call config_generic.datacenter_policy_calc($param_sa_bgp_num,$datacenter_policy_list,$unique_zones) retrieve $datacenter_policy_list, $max_server_array_size
        $bgp_json['fields']['datacenter_policy']              = $datacenter_policy_list
        $bgp_json['fields']['elasticity_params']['bounds']['min_count'] = $param_sa_bgp_num
        $bgp_json['fields']['elasticity_params']['bounds']['max_count'] = $max_server_array_size
        $bgp_json['fields']['elasticity_params']['alert_specific_params']['voters_tag_predicate'] = "server_array_"+"bgp"
        $bgp_json['fields']['inputs']['TAGS']                 = join(['text:', $instance_tags_bgp])
        $bgp_json['fields']['cloud_specific_attributes']['service_account'] = $param_service_account
        $bgp_json['fields']['name'] = gsub($bck_json['fields']['name'], "-bck-", "-bgp-") 
        $bgp_json['fields']['inputs']["HOST"] = gsub($bck_json['fields']['inputs']["HOST"] ,"-bck","-"+"bgp")
        $bgp_json['fields']['inputs']["HOST_FQDN"] = gsub($bck_json['fields']['inputs']["HOST_FQDN"],"-bck","-"+"bgp")
        $bgp_json['fields']['inputs']["CNAME_HOSTNAME"] = gsub($bck_json['fields']['inputs']["CNAME_HOSTNAME"],"-bck","-"+"bgp")
        $bgp_json['fields']['inputs']["CNAME_FQDN"] = gsub($bck_json['fields']['inputs']["CNAME_FQDN"],"-bck","-"+"bgp")
        $bgp_json['fields']['inputs']["HOST_URL"] = gsub($bck_json['fields']['inputs']["HOST_URL"],"-bck","-"+"bgp")
        $bgp_json['fields']['inputs']["GOOGLE_MANAGED_ZONE"] = gsub($bck_json['fields']['inputs']["GOOGLE_MANAGED_ZONE"],"-bck","-"+"bgp")
        $bgp_json['fields']['inputs']["BUCKET_SUBFOLDER_NAME"] = gsub($bck_json['fields']['inputs']["BUCKET_SUBFOLDER_NAME"],"-bck","-"+"bgp")
        $bgp_json['fields']['inputs']['IS_FRONTEND']          = 'text:False'
        $bgp_json['fields']['inputs']['DEPLOYMENT_HREF']     = join(["text:", $deployment_href])
        call servers_utilities.get_size_info_key($size_map, 'wfm_bgp', $param_deployment_size) retrieve $size_key
    $instance_type_bgp = map($size_map,$size_key,'instance_type')
    $volume_sz_bgp = map($size_map,$size_key,'volume_size')

    $bgp_json['fields']['inputs']['VOLUME_SIZE']   = join(['text:', $volume_sz_bgp])
    $bgp_json['fields']['inputs']['INSTANCE_TYPE'] = join(['text:', $instance_type_bgp])
    call servers_utilities.get_instancetype_href($instance_type_bgp) retrieve $instance_type_href
    $bgp_json['fields']['instance_type_href'] = $instance_type_href
    if $param_deployment_preemptible == 'True'
    $bgp_json['fields']['cloud_specific_attributes']['preemptible'] = true
    end

        @server_array_bgp = $bgp_json
      end
      sub task_label: 'Updating bgi json', on_error: handle_error() do
         $resource_data_bgi = {"server_template" => "st-kronos-production-ins-wfmbgi_rahul_gupta_r9int_1"} 
         call getResourcehref($bgi_json,$resource_data_bgi) retrieve $bgi_json
        call config_generic.datacenter_policy_calc($param_sa_bgi_num,$datacenter_policy_list,$unique_zones) retrieve $datacenter_policy_list, $max_server_array_size
        $bgi_json['fields']['datacenter_policy']              = $datacenter_policy_list
        $bgi_json['fields']['elasticity_params']['bounds']['min_count'] = $param_sa_bgi_num
        $bgi_json['fields']['elasticity_params']['bounds']['max_count'] = $max_server_array_size
        $bgi_json['fields']['elasticity_params']['alert_specific_params']['voters_tag_predicate'] = "server_array_"+"bgi"
        $bgi_json['fields']['inputs']['TAGS']                 = join(['text:', $instance_tags_bgi])
        $bgi_json['fields']['cloud_specific_attributes']['service_account'] = $param_service_account
        $bgi_json['fields']['name'] = gsub($bck_json['fields']['name'], "-bck-", "-bgi-") 
        $bgi_json['fields']['inputs']["HOST"] = gsub($bck_json['fields']['inputs']["HOST"] ,"-bck","-"+"bgi")
        $bgi_json['fields']['inputs']["HOST_FQDN"] = gsub($bck_json['fields']['inputs']["HOST_FQDN"],"-bck","-"+"bgi")
        $bgi_json['fields']['inputs']["CNAME_HOSTNAME"] = gsub($bck_json['fields']['inputs']["CNAME_HOSTNAME"],"-bck","-"+"bgi")
        $bgi_json['fields']['inputs']["CNAME_FQDN"] = gsub($bck_json['fields']['inputs']["CNAME_FQDN"],"-bck","-"+"bgi")
        $bgi_json['fields']['inputs']["HOST_URL"] = gsub($bck_json['fields']['inputs']["HOST_URL"],"-bck","-"+"bgi")
        $bgi_json['fields']['inputs']["GOOGLE_MANAGED_ZONE"] = gsub($bck_json['fields']['inputs']["GOOGLE_MANAGED_ZONE"],"-bck","-"+"bgi")
        $bgi_json['fields']['inputs']["BUCKET_SUBFOLDER_NAME"] = gsub($bck_json['fields']['inputs']["BUCKET_SUBFOLDER_NAME"],"-bck","-"+"bgi")
        $bgi_json['fields']['inputs']['IS_FRONTEND']          = 'text:False'
        call servers_utilities.get_size_info_key($size_map, 'wfm_bgp', $param_deployment_size) retrieve $size_key
    $instance_type_bgi = map($size_map,$size_key,'instance_type')
    $volume_sz_bgi = map($size_map,$size_key,'volume_size')

    $bgi_json['fields']['inputs']['VOLUME_SIZE']   = join(['text:', $volume_sz_bgi])
    $bgi_json['fields']['inputs']['INSTANCE_TYPE'] = join(['text:', $instance_type_bgi])
    call servers_utilities.get_instancetype_href($instance_type_bgi) retrieve $instance_type_href
    $bgi_json['fields']['instance_type_href'] = $instance_type_href
    if $param_deployment_preemptible == 'True'
    $bgi_json['fields']['cloud_specific_attributes']['preemptible'] = true
    end

        if $param_sa_bgi_num > 0
          $bgi_json['fields']['inputs']['WFMBACK_BGP_BOOL']     = join(['text:', 'true'])
        end
        $bgi_json['fields']['inputs']['DEPLOYMENT_HREF']     = join(["text:", $deployment_href])
        @server_array_bgi = $bgi_json
      end
      sub task_label: 'Updating api json', on_error: handle_error() do
        $resource_data_api = {"server_template" => "st-kronos-production-ins-wfmapi_rahul_gupta_r9int_1"} 
        call getResourcehref($api_json,$resource_data_api) retrieve $api_json
        call config_generic.datacenter_policy_calc($param_sa_api_num,$datacenter_policy_list,$unique_zones) retrieve $datacenter_policy_list, $max_server_array_size
        $api_json['fields']['datacenter_policy']              = $datacenter_policy_list
        $api_json['fields']['elasticity_params']['bounds']['min_count'] = $param_sa_api_num
        $api_json['fields']['elasticity_params']['bounds']['max_count'] = $max_server_array_size
        $api_json['fields']['elasticity_params']['alert_specific_params']['voters_tag_predicate'] = "server_array_"+"api"
        $api_json['fields']['inputs']['TAGS']                 = join(['text:', $instance_tags_api])
        $api_json['fields']['cloud_specific_attributes']['service_account'] = $param_service_account
        $api_json['fields']['name'] = gsub($bck_json['fields']['name'], "-bck-", "-api-") 
        $api_json['fields']['inputs']["HOST"] = gsub($bck_json['fields']['inputs']["HOST"] ,"-bck","-"+"api")
        $api_json['fields']['inputs']["HOST_FQDN"] = gsub($bck_json['fields']['inputs']["HOST_FQDN"],"-bck","-"+"api")
        $api_json['fields']['inputs']["CNAME_HOSTNAME"] = gsub($bck_json['fields']['inputs']["CNAME_HOSTNAME"],"-bck","-"+"api")
        $api_json['fields']['inputs']["CNAME_FQDN"] = gsub($bck_json['fields']['inputs']["CNAME_FQDN"],"-bck","-"+"api")
        $api_json['fields']['inputs']["HOST_URL"] = gsub($bck_json['fields']['inputs']["HOST_URL"],"-bck","-"+"api")
        $api_json['fields']['inputs']["GOOGLE_MANAGED_ZONE"] = gsub($bck_json['fields']['inputs']["GOOGLE_MANAGED_ZONE"],"-bck","-"+"api")
        $api_json['fields']['inputs']["BUCKET_SUBFOLDER_NAME"] = gsub($bck_json['fields']['inputs']["BUCKET_SUBFOLDER_NAME"],"-bck","-"+"api")
        $api_json['fields']['inputs']['IS_FRONTEND']          = 'text:False'
        if $param_sa_bgp_num > 0
          $api_json['fields']['inputs']['WFMBACK_BGP_BOOL']     = join(['text:', 'false'])
        end
        call servers_utilities.get_size_info_key($size_map, 'wfm_backend', $param_deployment_size) retrieve $size_key
    $instance_type_be = map($size_map,$size_key,'instance_type')
    $volume_sz_be = map($size_map,$size_key,'volume_size')

    $api_json['fields']['inputs']['VOLUME_SIZE']   = join(['text:', $volume_sz_be])
    $api_json['fields']['inputs']['INSTANCE_TYPE'] = join(['text:', $instance_type_be])
    call servers_utilities.get_instancetype_href($instance_type_be) retrieve $instance_type_href
    $api_json['fields']['instance_type_href'] = $instance_type_href
    if $param_deployment_preemptible == 'True'
    $api_json['fields']['cloud_specific_attributes']['preemptible'] = true
    end

        @server_array_api = $api_json
      end
      sub task_label: 'Updating udm json', on_error: handle_error() do
        $resource_data_udm = {"server_template" => "st-kronos-production-ins-wfmudm_rahul_gupta_r9int_1"} 
         call getResourcehref($udm_json,$resource_data_udm) retrieve $udm_json
        call config_generic.datacenter_policy_calc($param_sa_udm_num,$datacenter_policy_list,$unique_zones) retrieve $datacenter_policy_list, $max_server_array_size
        $udm_json['fields']['datacenter_policy']              = $datacenter_policy_list
        $udm_json['fields']['elasticity_params']['bounds']['min_count'] = $param_sa_udm_num
        $udm_json['fields']['elasticity_params']['bounds']['max_count'] = $max_server_array_size
        $udm_json['fields']['elasticity_params']['alert_specific_params']['voters_tag_predicate'] = "server_array_"+"udm"
        $udm_json['fields']['inputs']['TAGS']                 = join(['text:', $instance_tags_udm])
        $udm_json['fields']['name'] = gsub($bck_json['fields']['name'], "-bck-", "-udm-")
        $udm_json['fields']['inputs']["HOST"] = gsub($bck_json['fields']['inputs']["HOST"] ,"-bck","-"+"udm")
        $udm_json['fields']['inputs']["HOST_FQDN"] = gsub($bck_json['fields']['inputs']["HOST_FQDN"],"-bck","-"+"udm")
        $udm_json['fields']['inputs']["CNAME_HOSTNAME"] = gsub($bck_json['fields']['inputs']["CNAME_HOSTNAME"],"-bck","-"+"udm")
        $udm_json['fields']['inputs']["CNAME_FQDN"] = gsub($bck_json['fields']['inputs']["CNAME_FQDN"],"-bck","-"+"udm")
        $udm_json['fields']['inputs']["HOST_URL"] = gsub($bck_json['fields']['inputs']["HOST_URL"],"-bck","-"+"udm")
        $udm_json['fields']['inputs']["GOOGLE_MANAGED_ZONE"] = gsub($bck_json['fields']['inputs']["GOOGLE_MANAGED_ZONE"],"-bck","-"+"udm")
        $udm_json['fields']['inputs']["BUCKET_SUBFOLDER_NAME"] = gsub($bck_json['fields']['inputs']["BUCKET_SUBFOLDER_NAME"],"-bck","-"+"udm") 
        $udm_json['fields']['inputs']['IS_FRONTEND']          = 'text:False'
        if $param_sa_bgp_num > 0
          $udm_json['fields']['inputs']['WFMBACK_BGP_BOOL']     = join(['text:', 'false'])
        end
        call servers_utilities.get_size_info_key($size_map, 'wfm_backend', $param_deployment_size) retrieve $size_key
    $instance_type_be = map($size_map,$size_key,'instance_type')
    $volume_sz_be = map($size_map,$size_key,'volume_size')

    $udm_json['fields']['inputs']['VOLUME_SIZE']   = join(['text:', $volume_sz_be])
    $udm_json['fields']['inputs']['INSTANCE_TYPE'] = join(['text:', $instance_type_be])
    call servers_utilities.get_instancetype_href($instance_type_be) retrieve $instance_type_href
    $udm_json['fields']['instance_type_href'] = $instance_type_href
    if $param_deployment_preemptible == 'True'
    $udm_json['fields']['cloud_specific_attributes']['preemptible'] = true
    end

        @server_array_udm = $udm_json
      end
   
      sub task_label: 'Updating ilb1 json', on_error: handle_error() do
        $ilb_server_json = to_object(@server_ilb)
        $ilb_server_json['fields']['name']                    = gsub($wfm_ilb_host_1, /text:/, '')
        $ilb_server_json['fields']['inputs']['HOST']          = $wfm_ilb_host_1
        $ilb_server_json['fields']['inputs']['HOST_FQDN']     = $bck_json['fields']['inputs']['ILB_FQDN']
        $ilb_server_json['fields']['inputs']['TAGS']          = join(['text:', $instance_tags_ilb])
        $ilb_server_json['fields']['inputs']['CNAME']         = $bck_json['fields']['inputs']['CNAME_FQDN']
        $ilb_server_json['fields']['inputs']['TARGET_FQDN']   = $bck_json['fields']['inputs']['ILB_FQDN']
        $ilb_server_json['fields']['inputs']['DEPLOYMENT_HREF']     = join(["text:", $deployment_href])
        $ilb_server_json['fields']['inputs']['FORCE']         = join(['text:', 'true'])
        $ilb_server_json['fields']['inputs']['LABEL_TAGS']    = join(["text:", $out_instance_tags])
        $ilb_server_json["fields"]["inputs"]["DOCKER_IMAGES"] = join(['text:', $gce_proj_id_docker, '/kronos-nginx-ilb-r25-',$param_docker_build_level_ilb,':',$param_build_number_ilb])
        @server_ilb = $ilb_server_json
      end
      sub task_label: 'Updating ilb2 json', on_error: handle_error() do
        $ilb2_server_json = to_object(@server2_ilb)
        $ilb2_server_json['fields']['name']                     = gsub($wfm_ilb_host_2, /text:/, '')
        $ilb2_server_json['fields']['inputs']['HOST']           = $wfm_ilb_host_2
        $ilb2_server_json['fields']['inputs']['HOST_FQDN']      = $wfm_bck_fqdn_ilb2
        $ilb2_server_json['fields']['inputs']['TAGS']           = join(['text:', $instance_tags_ilb])
        $ilb2_server_json['fields']['inputs']['CNAME']          = $bck_json['fields']['inputs']['CNAME_FQDN']
        $ilb2_server_json['fields']['inputs']['TARGET_FQDN']    = $wfm_bck_fqdn_ilb2
        $ilb2_server_json['fields']['inputs']['DEPLOYMENT_HREF']     = join(["text:", $deployment_href])
        $ilb2_server_json['fields']['inputs']['FORCE']          = join(['text:', 'true'])
        $ilb2_server_json['fields']['inputs']['LABEL_TAGS']     = join(["text:", $out_instance_tags])
        $ilb2_server_json["fields"]["inputs"]["DOCKER_IMAGES"]  = join(['text:', $gce_proj_id_docker, '/kronos-nginx-ilb-r25-',$param_docker_build_level_ilb,':',$param_build_number_ilb])
        @server2_ilb = $ilb2_server_json
      end
      sub task_label: 'Updating ilb3 json', on_error: handle_error() do
        $ilb3_server_json = to_object(@server3_ilb)
        $ilb3_server_json['fields']['name']                     = gsub($wfm_ilb_host_3, /text:/, '')
        $ilb3_server_json['fields']['inputs']['HOST']           = $wfm_ilb_host_3
        $ilb3_server_json['fields']['inputs']['HOST_FQDN']      = $wfm_bck_fqdn_ilb3
        $ilb3_server_json['fields']['inputs']['TAGS']           = join(['text:', $instance_tags_ilb])
        $ilb3_server_json['fields']['inputs']['CNAME']          = $bck_json['fields']['inputs']['CNAME_FQDN']
        $ilb3_server_json['fields']['inputs']['TARGET_FQDN']    = $wfm_bck_fqdn_ilb3
        $ilb3_server_json['fields']['inputs']['DEPLOYMENT_HREF']     = join(["text:", $deployment_href])
        $ilb3_server_json['fields']['inputs']['FORCE']          = join(['text:', 'true'])
        $ilb3_server_json['fields']['inputs']['LABEL_TAGS']     = join(["text:", $out_instance_tags])
        $ilb3_server_json["fields"]["inputs"]["DOCKER_IMAGES"]  = join(['text:', $gce_proj_id_docker, '/kronos-nginx-ilb-r25-',$param_docker_build_level_ilb,':',$param_build_number_ilb])
        @server3_ilb = $ilb3_server_json
      end
    end
    $bgp_fqdn = gsub($bgp_json['fields']['inputs']['HOST_FQDN'], /text:/, '')
    $bgp_fqdn_elements = split($bgp_fqdn, '.')
    $bgp_fqdn_elements[0] = $bgp_fqdn_elements[0]+"-1"
    $bgp_fqdn_1 = join($bgp_fqdn_elements,".")
    
    sub task_label:'Provisioning all server arrays and servers' do
    concurrent return @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_api, @server_array_udm, @server_array_fnt, @server_array_bgp, @server_array_bgi, @server_ilb, @server2_ilb, @server3_ilb do
      sub on_error: handle_error() do
        concurrent return @server_ilb, @server2_ilb, @server3_ilb do
          provision(@server_ilb)
    if to_s($param_ha_ilb) == "True"
      provision(@server2_ilb)
    end
    if to_s($param_ha_ilb) == "True"
      provision(@server3_ilb)
    end

          end
        end
        sub on_error: handle_error() do
          call log_utilities.audit_log("@server_array_fnt",to_s(@server_array_fnt))
          provision(@server_array_fnt)
        end
        if $param_sa_bgp_num > 0
          sub on_error: handle_error() do
            call log_utilities.audit_log("@server_array_bgp",to_s(@server_array_bgp))
            provision(@server_array_bgp)
          end
        end
        if $param_sa_bgi_num > 0
          sub on_error: handle_error() do
            call log_utilities.audit_log("@server_array_bgi",to_s(@server_array_bgi))
            provision(@server_array_bgi)
          end
        end
      end
      concurrent return @server_array_bck, @server_array_tmk, @server_array_sch, @server_array_api, @server_array_udm do
        call log_utilities.audit_log("@server_array_bck",to_s(@server_array_bck))
           provision(@server_array_bck)
           if $param_sa_tmk_num > 0
              call log_utilities.audit_log("@server_array_tmk",to_s(@server_array_tmk))
              provision(@server_array_tmk)
           end
           if $param_sa_sch_num > 0
              call log_utilities.audit_log("@server_array_sch",to_s(@server_array_sch))
              provision(@server_array_sch)
           end
           if $param_sa_api_num > 0
              call log_utilities.audit_log("@server_array_api",to_s(@server_array_api))
              provision(@server_array_api)
           end
           if $param_sa_udm_num > 0
              call log_utilities.audit_log("@server_array_udm",to_s(@server_array_udm))
              provision(@server_array_udm)
           end
      end
      end

    call server_operations.post(@server_array_fnt) retrieve @server_array_fnt
    call server_operations.post(@server_array_bck) retrieve @server_array_bck
    call server_operations.post(@server_array_tmk) retrieve @server_array_tmk
    call server_operations.post(@server_array_sch) retrieve @server_array_sch
    call server_operations.post(@server_array_api) retrieve @server_array_api
    call server_operations.post(@server_array_udm) retrieve @server_array_udm
    call server_operations.post(@server_array_bgp) retrieve @server_array_bgp
    call server_operations.post(@server_array_bgi) retrieve @server_array_bgi
    call server_operations.post(@server_ilb) retrieve @server_ilb
    if to_s($param_ha_ilb) == "True"
      call server_operations.post(@server2_ilb) retrieve @server2_ilb
      call server_operations.post(@server3_ilb) retrieve @server3_ilb
    end


    $bck_json["fields"]["inputs"]["DOCKER_IMAGES"] = join(['text:', $gce_proj_id_docker, '/kronos-nginx-ilb-r25-',$param_docker_build_level_ilb,':',$param_build_number_ilb])

    task_label('Creating and applying tags')
    $tags = {}
    call config_generic.production_config_tags($bck_json['fields']['inputs'], $tags) retrieve $tags
    call config_generic.production_config_tags($tmk_json['fields']['inputs'], $tags) retrieve $tags
    call config_generic.production_config_tags($sch_json['fields']['inputs'], $tags) retrieve $tags
    call config_generic.production_config_tags($api_json['fields']['inputs'], $tags) retrieve $tags
    call config_generic.production_config_tags($udm_json['fields']['inputs'], $tags) retrieve $tags
    call config_generic.production_config_tags($fnt_json['fields']['inputs'], $tags) retrieve $tags
    call config_generic.production_config_tags($bgp_json['fields']['inputs'], $tags) retrieve $tags
    call config_generic.production_config_tags($bgi_json['fields']['inputs'], $tags) retrieve $tags

    @execution_data = @@execution.get(view: "expanded")
    $execution_data = to_object(@execution_data)
    $tags_href = $execution_data['details'][0]['href']
    $tags_to_add = []
    $tags_to_add << join(["kronos:", "href", "=", $tags_href])
    $tags_to_add << join(["kronos:", "deployment_state", "=", "ready"])
    rs_cm.tags.multi_add( resource_hrefs: [@@deployment], tags: $tags_to_add )

    $dbserver_name = gsub($bck_json['fields']['inputs']['DB_SERVER_NAME'], /text:/, '')
    $dbserver_name_initial = split($dbserver_name, '.')[0]
    $dbserver_name_split = join(['-', split($dbserver_name_initial, '-')[-1] ])
    $dbserver_name_tag = gsub(gsub($dbserver_name_initial, $dbserver_name_split, ''), /-/, '_')
    $db_name = gsub($bck_json['fields']['inputs']['DB_NAME'], /text:/, '')
    $tags['service_name'] = join([$dbserver_name_tag, '_', $db_name])

    call config_generic.production_apply_tags("wfm", $tags) retrieve $tags

    concurrent return $backend_build_number, $frontend_build_number do
      sub task_label: 'Get backend build number', on_error: handle_error() do
        call servers_utilities.get_server_array_image_href(@server_array_bck) retrieve $previous_image_href, $resource_uid
        $backend_build_number = split(split($resource_uid, '-')[-2], 'b')[1]
      end
      sub task_label: 'Get frontend build number', on_error: handle_error() do
        call servers_utilities.get_server_array_image_href(@server_array_fnt) retrieve $previous_image_href, $resource_uid
        $frontend_build_number = split(split($resource_uid, '-')[-2], 'b')[1]
      end
    end

    task_label('Setting locals and outputs')
    
    $local_build_level  = $param_build_level
    $local_build_number = $param_build_number
    $local_cloud        = $param_cloud
    $local_datacenter   = $param_deployment_datacenter
    $local_fqdn         = $fqdn
    $local_subnetwork   = $subnet_code
    $local_owner        = $param_owner
    # for CATs that have multiple servers with different names, this server might not exist
    # Those CATs need to set the private_ip on their own
    sub on_error: skip do
       $local_private_ip = @server.current_instance().private_ip_addresses[0]
    end

    if to_s($param_ha_ilb) == "False"
      $local_ha_fqdn_ilb1  = gsub($wfm_bck_fqdn_ilb1, /text:/, '')
    else
      $local_ha_fqdn_ilb1  = gsub($wfm_bck_fqdn_ilb1, /text:/, '')
      $local_ha_fqdn_ilb2  = gsub($wfm_bck_fqdn_ilb2, /text:/, '')
      $local_ha_fqdn_ilb3  = gsub($wfm_bck_fqdn_ilb3, /text:/, '')
    end
    task_label("Set outputs")
  $local_atmcld_internal_use    = map($map_tf_choice, $param_atmcld_internal_use, "choice_lc")
  $local_atmcld_name            = switch($atmcld_name_default, map($map_default_locations, join([$param_deployment_datacenter, " ", $param_subnet]), "mapping_atmcld_name"), $param_atmcld_name)
  $local_atmcld_proxy_host      = $param_atmcld_proxy_host
  $local_atmcld_url             = switch($atmcld_url_default, map($map_default_locations, join([$param_deployment_datacenter, " ", $param_subnet]), "mapping_atmcld_url"), $param_atmcld_url)
  $local_auth_host              = switch($auth_url_default, map($map_default_locations, join([$param_deployment_datacenter, " ", $param_subnet]), "mapping_auth_url"), $param_auth_url)
  $local_build_level_backend    = $param_build_level_backend
  $local_build_level_frontend   = $param_build_level_frontend
  $local_build_number_backend   = $backend_build_number
  $local_build_number_frontend  = $frontend_build_number
  $local_cname_ilb_be           = gsub($bck_json['fields']['inputs']['CNAME_FQDN'], /text:/, '')
  $local_cname_ilb_fe           = gsub($fnt_json['fields']['inputs']['CNAME_FQDN'], /text:/, '')
  $local_datacenter             = $param_deployment_datacenter
  $local_datastx_cluster        = switch($datastx_cluster_default, map($map_default_locations, join([$param_deployment_datacenter, " ", $param_subnet]), "mapping_datastx_cluster"), $param_datastx_cluster)
  $local_datastx_master         = switch($datastx_master_default, map($map_default_locations, join([$param_deployment_datacenter, " ", $param_subnet]), "mapping_datastx_master"), $param_datastx_master)
  $local_datastx_nodes          = switch($datastx_nodes_default, map($map_default_locations, join([$param_deployment_datacenter, " ", $param_subnet]), "mapping_datastx_nodes"), $param_datastx_nodes)
  $local_fqdn_ilb_be            = gsub($bck_json['fields']['inputs']['ILB_FQDN'], /text:/, '')
  $local_fqdn_ilb_fe            = gsub($fnt_json['fields']['inputs']['ILB_FQDN'], /text:/, '')
  $local_gateway_url            = switch($gateway_url_default, map($map_default_locations, join([$param_deployment_datacenter, " ", $param_subnet]), "mapping_gateway_url"), $param_gateway_url)
  $local_help_url               = switch($help_url_default, map($map_default_locations, join([$param_deployment_datacenter, " ", $param_subnet]), "mapping_help_url"), $param_help_url)
  $local_openam_idp_proxy_url   = switch($openam_idp_proxy_url_default, map($map_default_locations, join([$param_deployment_datacenter, " ", $param_subnet]), "mapping_openam_idp_proxy_url"), $param_openam_idp_proxy_url)
  $local_rabbit_host            = switch($rabbit_host_default, map($map_default_locations, join([$param_deployment_datacenter, " ", $param_subnet]), "mapping_rabbit_host"), $param_rabbit_host)
  $local_env_rabbit_host        = switch($rabbit_env_host_default, map($map_default_locations, join([$param_deployment_datacenter, " ", $param_subnet]), "mapping_env_rabbit_host"), $param_env_rabbit_host)
  $local_redis_cluster          = $param_redis_cluster
  $local_redis_hosts            = switch($redis_hosts_default, map($map_default_locations, join([$param_deployment_datacenter, " ", $param_subnet]), "mapping_redis_hosts_2"), $param_redis_hosts)
  $local_redis_master           = switch($redis_master_default, map($map_default_locations, join([$param_deployment_datacenter, " ", $param_subnet]), "mapping_redis_master_2"), $param_redis_master)
  $local_reporting_designer_url = switch($reporting_designer_url_default, map($map_default_locations, join([$param_deployment_datacenter, " ", $param_subnet]), "mapping_reporting_designer_url"), $param_reporting_designer_url)
  $local_reporting_host         = switch($reporting_host_default, map($map_default_locations, join([$param_deployment_datacenter, " ", $param_subnet]), "mapping_reporting_host"), $param_reporting_host)
  $local_sdm_host               = switch($sdm_host_default, map($map_default_locations, join([$param_deployment_datacenter, " ", $param_subnet]), "mapping_sdm_host"), $param_sdm_host)
  $local_ecs_host               = switch($ecs_host_default, map($map_default_locations, join([$param_deployment_datacenter, " ", $param_subnet]), "mapping_ecs_host"), $param_ecs_host)
  $local_smtp_fqdn              = $param_smtp_fqdn
  $local_hca_url                = switch($hca_url_default, map($map_default_locations, join([$param_deployment_datacenter, " ", $param_subnet]), "mapping_hca_url"), $param_hca_url)
  $local_subnetwork             = $param_subnetwork
  $local_tms_url                = switch($tms_url_default, map($map_default_locations, join([$param_deployment_datacenter, " ", $param_subnet]), "mapping_tms_url"), $param_tms_url)
  $local_tr_host                = $param_tr_host
  $local_udm_url                = switch($udm_url_default, map($map_default_locations, join([$param_deployment_datacenter, " ", $param_subnet]), "mapping_udm_url"), $param_udm_url)
  $local_ums_host               = switch($ums_host_default, map($map_default_locations, join([$param_deployment_datacenter, " ", $param_subnet]), "mapping_ums_host"), $param_ums_host)
  $local_usage                  = $param_usage
  $local_wflapp_url             = switch($wflapp_url_default, map($map_default_locations, join([$param_deployment_datacenter, " ", $param_subnet]), "mapping_wflapp_url"), $param_wflapp_url)
  $local_wfmadmin_url           = switch($wfladmin_url_default, map($map_default_locations, join([$param_deployment_datacenter, " ", $param_subnet]), "mapping_wfladmin_url"), $param_wfladmin_url)
  $local_ecs_host               = switch($ecs_host_default, map($map_default_locations, join([$param_deployment_datacenter, ' ', $param_subnet]), 'mapping_ecs_host'), $param_ecs_host)
  $local_bgp_fqdn               = $bgp_fqdn_1
  $local_forecasting_cassandra_nodes = switch($fcs_url_default, map($map_default_locations, join([$param_deployment_datacenter, " ", $param_subnet]), "mapping_fcs_url"), $param_forecasting_cassandra_nodes)
  $local_das_prv_url            = switch($das_prv_url_default, map($map_default_locations, join([$param_deployment_datacenter, " ", $param_subnet]), "mapping_das_prv_url"), $param_das_prv_url)
  $local_pes_prv_url            = switch($pes_prv_url_default, map($map_default_locations, join([$param_deployment_datacenter, " ", $param_subnet]), "mapping_pes_prv_url"), $param_pes_prv_url)
  $local_dsaas_url              = switch($dsaas_url_default, map($map_default_locations, join([$param_deployment_datacenter, " ", $param_subnet]), "mapping_dsaas_url"), $param_dsaas_url)
  $local_pge_url                = switch($pge_url_default, map($map_default_locations, join([$param_deployment_datacenter, " ", $param_subnet]), "mapping_pge_url"), $param_pge_url)
  $local_wit_host               = switch($wit_host_default, map($map_default_locations, join([$param_deployment_datacenter, " ", $param_subnet]), "mapping_wit_host"), $param_wit_host)


  end
end

resource "server_ilb", type: "server" do
  cloud_specific_attributes do {
    'root_volume_size' => $param_boot_disk_size
  } end
  associate_public_ip_address false
  inputs do {
    'HOST'            => 'text:',
    'SUBNET'          => 'text:',
    'SERVER_HOSTNAME' => 'env:RS_SERVER_NAME',
    'DOCKER_PORTS'    => join(['text:', "80"]),
    'SERVICE_NAME'    => join(['text:', "wfm-backend"]),
    'PRODUCTION_STATE' => 'text:False',
    'ENABLE_MONITORING' => 'text:""'
  } end
end
resource 'server2_ilb', type: 'server' do
  associate_public_ip_address false
  inputs do {
    'HOST'            => 'text:',
    'SUBNET'          => 'text:',
    'SERVER_HOSTNAME' => 'env:RS_SERVER_NAME',
    'DOCKER_PORTS'    => join(['text:', "80"]),
    'SERVICE_NAME'    => join(['text:', "wfm-backend"]),
    'PRODUCTION_STATE' => 'text:False',
    'ENABLE_MONITORING' => 'text:""'
  } end
end
resource 'server3_ilb', type: 'server' do
  associate_public_ip_address false
  inputs do {
    'HOST'            => 'text:',
    'SUBNET'          => 'text:',
    'SERVER_HOSTNAME' => 'env:RS_SERVER_NAME',
    'DOCKER_PORTS'    => join(['text:', "80"]),
    'SERVICE_NAME'    => join(['text:', "wfm-backend"]),
    'PRODUCTION_STATE' => 'text:False',
    'ENABLE_MONITORING' => 'text:""'
  } end
end


resource "server_array_bck", type: "server_array" do
  state           'enabled'
  array_type      'alert'
  elasticity_params do {
    'bounds' => {
      'min_count' => 0,
      'max_count' => 0
    },
    'pacing' => {
      'resize_calm_time' => 5,
      'resize_down_by' => 1,
      'resize_up_by' => 1
    },
    'alert_specific_params' => {
      'decision_threshold' => 51,
      'voters_tag_predicate' => 'server_array_bck'
    }
  } end
  cloud_specific_attributes do {
        "root_volume_size" => $param_boot_disk_size
  } end
  associate_public_ip_address false
  inputs do {'PRODUCTION_STATE' => 'text:False'} end
end
resource "server_array_tmk", type: "server_array" do
  state           'enabled'
  array_type      'alert'
  elasticity_params do {
    'bounds' => {
      'min_count' => 0,
      'max_count' => 0
    },
    'pacing' => {
      'resize_calm_time' => 5,
      'resize_down_by' => 1,
      'resize_up_by' => 1
    },
    'alert_specific_params' => {
      'decision_threshold' => 51,
      'voters_tag_predicate' => 'server_array_tmk'
    }
  } end
  cloud_specific_attributes do {
        "root_volume_size" => $param_boot_disk_size
  } end
  associate_public_ip_address false
  inputs do {'PRODUCTION_STATE' => 'text:False'} end
end
resource "server_array_sch", type: "server_array" do
  state           'enabled'
  array_type      'alert'
  elasticity_params do {
    'bounds' => {
      'min_count' => 0,
      'max_count' => 0
    },
    'pacing' => {
      'resize_calm_time' => 5,
      'resize_down_by' => 1,
      'resize_up_by' => 1
    },
    'alert_specific_params' => {
      'decision_threshold' => 51,
      'voters_tag_predicate' => 'server_array_sch'
    }
  } end
  cloud_specific_attributes do {
        "root_volume_size" => $param_boot_disk_size
  } end
  associate_public_ip_address false
  inputs do {'PRODUCTION_STATE' => 'text:False'} end
end

resource "server_array_fnt", type: "server_array" do
  state           'enabled'
  array_type      'alert'
  elasticity_params do {
    'bounds' => {
      'min_count' => 0,
      'max_count' => 0
    },
    'pacing' => {
      'resize_calm_time' => 5,
      'resize_down_by' => 1,
      'resize_up_by' => 1
    },
    'alert_specific_params' => {
      'decision_threshold' => 51,
      'voters_tag_predicate' => 'server_array_fnt'
    }
  } end
  cloud_specific_attributes do {
    "root_volume_size" => $param_boot_disk_size
  } end
  associate_public_ip_address false
  inputs do {'PRODUCTION_STATE' => 'text:False'} end
end

resource "server_array_bgp", type: "server_array" do
  state           'enabled'
  array_type      'alert'
  elasticity_params do {
    'bounds' => {
      'min_count' => 0,
      'max_count' => 0
    },
    'pacing' => {
      'resize_calm_time' => 5,
      'resize_down_by' => 1,
      'resize_up_by' => 1
    },
    'alert_specific_params' => {
      'decision_threshold' => 51,
      'voters_tag_predicate' => 'server_array_bgp'
    }
  } end
  cloud_specific_attributes do {
        "root_volume_size" => $param_boot_disk_size
  } end
  associate_public_ip_address false
  inputs do {'PRODUCTION_STATE' => 'text:False'} end
end

resource "server_array_bgi", type: "server_array" do
  state           'enabled'
  array_type      'alert'
  elasticity_params do {
    'bounds' => {
      'min_count' => 0,
      'max_count' => 0
    },
    'pacing' => {
      'resize_calm_time' => 5,
      'resize_down_by' => 1,
      'resize_up_by' => 1
    },
    'alert_specific_params' => {
      'decision_threshold' => 51,
      'voters_tag_predicate' => 'server_array_bgi'
    }
  } end
  cloud_specific_attributes do {
        "root_volume_size" => $param_boot_disk_size
  } end
  associate_public_ip_address false
  inputs do {'PRODUCTION_STATE' => 'text:False'} end
end

resource "server_array_api", type: "server_array" do
  state           'enabled'
  array_type      'alert'
  elasticity_params do {
    'bounds' => {
      'min_count' => 0,
      'max_count' => 0
    },
    'pacing' => {
      'resize_calm_time' => 5,
      'resize_down_by' => 1,
      'resize_up_by' => 1
    },
    'alert_specific_params' => {
      'decision_threshold' => 51,
      'voters_tag_predicate' => 'server_array_api'
    }
  } end
  cloud_specific_attributes do {
      "root_volume_size" => $param_boot_disk_size
  } end
  associate_public_ip_address false
  inputs do {'PRODUCTION_STATE' => 'text:False'} end
end

resource "server_array_udm", type: "server_array" do
  state           'enabled'
  array_type      'alert'
  elasticity_params do {
    'bounds' => {
      'min_count' => 0,
      'max_count' => 0
    },
    'pacing' => {
      'resize_calm_time' => 5,
      'resize_down_by' => 1,
      'resize_up_by' => 1
    },
    'alert_specific_params' => {
      'decision_threshold' => 51,
      'voters_tag_predicate' => 'server_array_udm'
    }
  } end
  cloud_specific_attributes do {
      "root_volume_size" => $param_boot_disk_size
  } end
  associate_public_ip_address false
  inputs do {'PRODUCTION_STATE' => 'text:False'} end
end
